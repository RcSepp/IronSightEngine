/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ISMath(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ISMath(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ISMath(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <ISMath.h>


#include <ISForms.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float SWIGSTDCALL CSharp_saturate(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)saturate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2 *)Vec2Set(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector2 *)Vec2Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Set(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector3 *)Vec3Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Vector4 *)Vec4Set(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector4 *)Vec4Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float *arg2 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color3 *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Quaternion *)QuaternionSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float *arg2 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Quaternion *)QuaternionSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  result = (Color *)ClrClone(arg1,(Color const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  result = (Color3 *)ClrClone(arg1,(Color3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (float)Vec2Dot((Vector2 const *)arg1,(Vector2 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)Vec3Dot((Vector3 const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (float)Vec4Dot((Vector4 const *)arg1,(Vector4 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Cross(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Cross(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Reflect(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Reflect(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Refract(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Refract(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 arg3 ;
  Vector2 arg4 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  Vector2 *argp3 ;
  Vector2 *argp4 ;
  Vector2 *result = 0 ;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (Vector2 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)GetUV(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2Length((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2Length(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3Length((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3Length(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4Length((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4Length(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2LengthSq((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2LengthSq(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3LengthSq((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3LengthSq(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4LengthSq((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4LengthSq(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Inverse(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Inverse(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Inverse(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Invert(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Invert(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Invert(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Normalize(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Normalize(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Normalize(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec3Transform(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformCoord(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformCoord(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformNormal(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec4Transform(arg1,(Vector4 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  float arg4 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector2 *)Vec2Lerp(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Lerp(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrLerp(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *arg3 = (Color3 *) 0 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  arg3 = (Color3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrLerp(arg1,(Color3 const *)arg2,(Color3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2BaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector3 *)Vec3BaryCentric(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2InvBaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2InvBaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Min(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Min(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Max(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Max(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionIdentity(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionInverse(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInvert(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionInvert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionNormalize(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationAxis(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Quaternion *)QuaternionRotationAxis(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionToAxisAngle(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float *)jarg3; 
  QuaternionToAxisAngle((Quaternion const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneFromPointNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Plane *)PlaneFromPointNormal(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Plane *)jarg2; 
  result = (Plane *)PlaneNormalize(arg1,(Plane const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  result = (Plane *)PlaneNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlaneDotCoord(void * jarg1, void * jarg2) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)PlaneDotCoord((Plane const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneIntersectLine(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Plane *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Vector3 *)PlaneIntersectLine(arg1,(Plane const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixIdentity(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  result = (Matrix *)MatrixIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixTranslation(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixTranslation(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixScaling(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixScaling(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverseTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverseTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MatrixDeterminant(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float)MatrixDeterminant((Matrix const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverse(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateX(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateX(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateY(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateY(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateZ(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateZ(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationYawPitchRoll(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixRotationYawPitchRoll(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationQuaternion(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Matrix *)MatrixRotationQuaternion(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayIntersectsBox(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  bool result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (bool)RayIntersectsBox((Vector3 const *)arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)new Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2 *)new Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((Vector2 const *)arg1)->operator +((Vector2 const &)*arg2);
  jresult = new Vector2((const Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_caption_set(void * jarg1, void * jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (FormSettings *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->caption = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormSettings_caption_get(void * jarg1) {
  void * jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  String result;
  
  arg1 = (FormSettings *)jarg1; 
  result =  ((arg1)->caption);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_windowpos_set(void * jarg1, void * jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  Point< int > arg2 ;
  Point< int > *argp2 ;
  
  arg1 = (FormSettings *)jarg1; 
  argp2 = (Point< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Point< int >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->windowpos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormSettings_windowpos_get(void * jarg1) {
  void * jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  Point< int > result;
  
  arg1 = (FormSettings *)jarg1; 
  result =  ((arg1)->windowpos);
  jresult = new Point< int >((const Point< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_clientsize_set(void * jarg1, void * jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  Size< int > arg2 ;
  Size< int > *argp2 ;
  
  arg1 = (FormSettings *)jarg1; 
  argp2 = (Size< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Size< int >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->clientsize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormSettings_clientsize_get(void * jarg1) {
  void * jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  Size< int > result;
  
  arg1 = (FormSettings *)jarg1; 
  result =  ((arg1)->clientsize);
  jresult = new Size< int >((const Size< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_wndstate_set(void * jarg1, int jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  WindowState arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = (WindowState)jarg2; 
  if (arg1) (arg1)->wndstate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FormSettings_wndstate_get(void * jarg1) {
  int jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  WindowState result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (WindowState) ((arg1)->wndstate);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_fbstyle_set(void * jarg1, int jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  FormBorderStyle arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = (FormBorderStyle)jarg2; 
  if (arg1) (arg1)->fbstyle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FormSettings_fbstyle_get(void * jarg1) {
  int jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  FormBorderStyle result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (FormBorderStyle) ((arg1)->fbstyle);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_istoolwindow_set(void * jarg1, unsigned int jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->istoolwindow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FormSettings_istoolwindow_get(void * jarg1) {
  unsigned int jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (bool) ((arg1)->istoolwindow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_hasvscroll_set(void * jarg1, unsigned int jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasvscroll = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FormSettings_hasvscroll_get(void * jarg1) {
  unsigned int jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (bool) ((arg1)->hasvscroll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_hashscroll_set(void * jarg1, unsigned int jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hashscroll = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FormSettings_hashscroll_get(void * jarg1) {
  unsigned int jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  bool result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (bool) ((arg1)->hashscroll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_parent_set(void * jarg1, void * jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  IWinForm *arg2 = (IWinForm *) 0 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = (IWinForm *)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormSettings_parent_get(void * jarg1) {
  void * jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  IWinForm *result = 0 ;
  
  arg1 = (FormSettings *)jarg1; 
  result = (IWinForm *) ((arg1)->parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_mdiwindowmenu_set(void * jarg1, void * jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  IMenuItem **arg2 = (IMenuItem **) 0 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = (IMenuItem **)jarg2; 
  if (arg1) (arg1)->mdiwindowmenu = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormSettings_mdiwindowmenu_get(void * jarg1) {
  void * jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  IMenuItem **result = 0 ;
  
  arg1 = (FormSettings *)jarg1; 
  result = (IMenuItem **) ((arg1)->mdiwindowmenu);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormSettings_options_set(void * jarg1, unsigned long jarg2) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  DWORD arg2 ;
  
  arg1 = (FormSettings *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FormSettings_options_get(void * jarg1) {
  unsigned long jresult ;
  FormSettings *arg1 = (FormSettings *) 0 ;
  DWORD result;
  
  arg1 = (FormSettings *)jarg1; 
  result = (DWORD) ((arg1)->options);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FormSettings() {
  void * jresult ;
  FormSettings *result = 0 ;
  
  result = (FormSettings *)new FormSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FormSettings(void * jarg1) {
  FormSettings *arg1 = (FormSettings *) 0 ;
  
  arg1 = (FormSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FS_CENTERTOSCREEN_get() {
  int jresult ;
  int result;
  
  result = (int)(0x1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FS_MDICLIENT_get() {
  int jresult ;
  int result;
  
  result = (int)(0x2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FS_MDICHILD_get() {
  int jresult ;
  int result;
  
  result = (int)(0x4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_defaultfont_set(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HFONT arg2 ;
  HFONT *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HFONT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HFONT", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->defaultfont = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_defaultfont_get(void * jarg1) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HFONT result;
  
  arg1 = (IForms *)jarg1; 
  result =  ((arg1)->defaultfont);
  jresult = new HFONT((const HFONT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_GetInstance(void * jarg1) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HINSTANCE result;
  
  arg1 = (IForms *)jarg1; 
  result = (arg1)->GetInstance();
  jresult = new HINSTANCE((const HINSTANCE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_GetWinForm(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  size_t arg2 ;
  LPWINFORM result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetWinForm(arg2);
  jresult = new LPWINFORM((const LPWINFORM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_GetHwnd(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  size_t arg2 ;
  HWND result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetHwnd(arg2);
  jresult = new HWND((const HWND &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_GetMDIClientHwnd(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  size_t arg2 ;
  HWND result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetMDIClientHwnd(arg2);
  jresult = new HWND((const HWND &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IForms_GetNumForms(void * jarg1) {
  int jresult ;
  IForms *arg1 = (IForms *) 0 ;
  int result;
  
  arg1 = (IForms *)jarg1; 
  result = (int)(arg1)->GetNumForms();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IForms_VisualStylesEnabled(void * jarg1) {
  unsigned int jresult ;
  IForms *arg1 = (IForms *) 0 ;
  bool result;
  
  arg1 = (IForms *)jarg1; 
  result = (bool)(arg1)->VisualStylesEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_Sync(void * jarg1, void * jarg2) {
fms = (IForms*)jarg1;
  IForms *arg1 = (IForms *) 0 ;
  /*GLOBALVARDEF_LIST arg2 ;
  GLOBALVARDEF_LIST *argp2 ;*/
  
  arg1 = (IForms *)jarg1; 
  /*argp2 = (GLOBALVARDEF_LIST *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GLOBALVARDEF_LIST", 0);
    return ;
  }
  arg2 = *argp2; */

  (arg1)->Sync(GLOBALVAR_LIST);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_Init(void * jarg1, void * jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HINSTANCE arg2 ;
  HINSTANCE *argp2 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
/*  argp2 = (HINSTANCE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return 0;
  }
  arg2 = *argp2; */
  result = (arg1)->Init(GetModuleHandle(NULL));//(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_CreateForm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  FormSettings *arg2 = (FormSettings *) 0 ;
  String *arg3 = (String *) 0 ;
  IWinForm **arg4 = (IWinForm **) 0 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (FormSettings *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (IWinForm **)jarg4; 
  result = (arg1)->CreateForm(arg2,(String const *)arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_CreateForm__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  FormSettings *arg2 = (FormSettings *) 0 ;
  String *arg3 = (String *) 0 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (FormSettings *)jarg2; 
  arg3 = (String *)jarg3; 
  result = (arg1)->CreateForm(arg2,(String const *)arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_CreateForm__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  FormSettings *arg2 = (FormSettings *) 0 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (FormSettings *)jarg2; 
arg2->caption = "caption";
  result = (arg1)->CreateForm(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_CreateForm__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  IWinForm **arg3 = (IWinForm **) 0 ;
  HWND *argp2 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (IWinForm **)jarg3; 
  result = (arg1)->CreateForm(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_CreateForm__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  Result result;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->CreateForm(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseForm__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  (arg1)->CloseForm(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseForm__SWIG_1(void * jarg1, unsigned long jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  size_t arg2 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->CloseForm(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseFormByHwnd__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  bool *arg3 = (bool *) 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (bool *)jarg3; 
  (arg1)->CloseFormByHwnd(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseFormByHwnd__SWIG_1(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->CloseFormByHwnd(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_ShowAll(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  (arg1)->ShowAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseAll__SWIG_0(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (bool *)jarg2; 
  (arg1)->CloseAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CloseAll__SWIG_1(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  (arg1)->CloseAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_EnableVisualStates(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  (arg1)->EnableVisualStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_DisableVisualStates(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  (arg1)->DisableVisualStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CallOnGainFocus(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->CallOnGainFocus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CallOnLoseFocus(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->CallOnLoseFocus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CallOnKeyDown(void * jarg1, unsigned long jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  DWORD arg2 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (DWORD)jarg2; 
  (arg1)->CallOnKeyDown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_CallOnKeyUp(void * jarg1, unsigned long jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  DWORD arg2 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (DWORD)jarg2; 
  (arg1)->CallOnKeyUp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnPaint(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnPaint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseDown(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseDown(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseUp(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseUp(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseMove(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseMove(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseDoubleClick(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseDoubleClick(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseWheel(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseWheel(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMouseLeave(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  MouseEventArgs *arg3 = 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (MouseEventArgs *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MouseEventArgs const & type is null", 0);
    return ;
  } 
  (arg1)->OnMouseLeave(arg2,(MouseEventArgs const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IForms_OnFormClosing(void * jarg1, void * jarg2) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  LRESULT result;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->OnFormClosing(arg2);
  jresult = new LRESULT((const LRESULT &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IForms_OnFormResize(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  Size< UINT > arg3 ;
  WindowState arg4 ;
  HWND *argp2 ;
  Size< UINT > *argp3 ;
  bool result;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Size< UINT > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Size< UINT >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (WindowState)jarg4; 
  result = (bool)(arg1)->OnFormResize(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnFormSizing(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  Rect< int > *arg3 = (Rect< int > *) 0 ;
  byte arg4 ;
  HWND *argp2 ;
  byte *argp4 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect< int > *)jarg3; 
  argp4 = (byte *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null byte", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->OnFormSizing(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnFormMoving(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  Rect< int > *arg3 = (Rect< int > *) 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect< int > *)jarg3; 
  (arg1)->OnFormMoving(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnFormEnterSizeMove(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFormEnterSizeMove(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnFormExitSizeMove(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFormExitSizeMove(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnButtonMessage(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND arg3 ;
  WORD arg4 ;
  HWND *argp2 ;
  HWND *argp3 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HWND *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (WORD)jarg4; 
  (arg1)->OnButtonMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnMenuMessage(void * jarg1, void * jarg2, unsigned short jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  WORD arg3 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (WORD)jarg3; 
  (arg1)->OnMenuMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnTrayIconMessage(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  LPARAM arg3 ;
  HWND *argp2 ;
  LPARAM *argp3 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (LPARAM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPARAM", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnTrayIconMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnNotifyMessage(void * jarg1, void * jarg2, void * jarg3) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  NMHDR *arg3 = (NMHDR *) 0 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (NMHDR *)jarg3; 
  (arg1)->OnNotifyMessage(arg2,(NMHDR const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_OnFormContextMenuMessage(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (IForms *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFormContextMenuMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_RegisterForFormDependence(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  IFormDependend *arg2 = (IFormDependend *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (IFormDependend *)jarg2; 
  (arg1)->RegisterForFormDependence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_DeregisterFromFormDependence(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  IFormDependend *arg2 = (IFormDependend *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (IFormDependend *)jarg2; 
  (arg1)->DeregisterFromFormDependence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_RegisterForKeyboardMonitoring(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  IKeyboardMonitoring *arg2 = (IKeyboardMonitoring *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (IKeyboardMonitoring *)jarg2; 
  (arg1)->RegisterForKeyboardMonitoring(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_DeregisterFromKeyboardMonitoring(void * jarg1, void * jarg2) {
  IForms *arg1 = (IForms *) 0 ;
  IKeyboardMonitoring *arg2 = (IKeyboardMonitoring *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  arg2 = (IKeyboardMonitoring *)jarg2; 
  (arg1)->DeregisterFromKeyboardMonitoring(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IForms_Release(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IForms(void * jarg1) {
  IForms *arg1 = (IForms *) 0 ;
  
  arg1 = (IForms *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateForms() {
  void * jresult ;
  LPFORMS result;
  
  result = (LPFORMS)CreateForms();
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

