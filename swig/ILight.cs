//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ILight : IMoveable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ILight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IronSightEnginePINVOKE.ILight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ILight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ILight() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_ILight(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Vector3 GetPos() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_GetPos(swigCPtr), false);
    return ret;
  }

  public virtual void SetPos(Vector3 val) {
    IronSightEnginePINVOKE.ILight_SetPos(swigCPtr, Vector3.getCPtr(val));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 Pos {
    get {
      Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_Pos_get(swigCPtr), false);
      return ret;
    } 
  }

  public virtual Vector3 GetDir() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_GetDir(swigCPtr), false);
    return ret;
  }

  public virtual void SetDir(Vector3 val) {
    IronSightEnginePINVOKE.ILight_SetDir(swigCPtr, Vector3.getCPtr(val));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 Dir {
    get {
      Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_Dir_get(swigCPtr), false);
      return ret;
    } 
  }

  public virtual SWIGTYPE_p_PARENT_NAMESPACE__Color GetColor() {
    SWIGTYPE_p_PARENT_NAMESPACE__Color ret = new SWIGTYPE_p_PARENT_NAMESPACE__Color(IronSightEnginePINVOKE.ILight_GetColor(swigCPtr), false);
    return ret;
  }

  public virtual void SetColor(SWIGTYPE_p_PARENT_NAMESPACE__Color val) {
    IronSightEnginePINVOKE.ILight_SetColor(swigCPtr, SWIGTYPE_p_PARENT_NAMESPACE__Color.getCPtr(val));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_PARENT_NAMESPACE__Color Color {
    get {
      SWIGTYPE_p_PARENT_NAMESPACE__Color ret = new SWIGTYPE_p_PARENT_NAMESPACE__Color(IronSightEnginePINVOKE.ILight_Color_get(swigCPtr), false);
      return ret;
    } 
  }

  public virtual ILight.LightType GetType() {
    ILight.LightType ret = (ILight.LightType)IronSightEnginePINVOKE.ILight_GetType(swigCPtr);
    return ret;
  }

  public virtual void SetType(ILight.LightType val) {
    IronSightEnginePINVOKE.ILight_SetType(swigCPtr, (int)val);
  }

  public ILight.LightType Type {
    set {
      IronSightEnginePINVOKE.ILight_Type_set(swigCPtr, (int)value);
    } 
    get {
      ILight.LightType ret = (ILight.LightType)IronSightEnginePINVOKE.ILight_Type_get(swigCPtr);
      return ret;
    } 
  }

  public virtual Vector3 GetAttenuation() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_GetAttenuation(swigCPtr), false);
    return ret;
  }

  public virtual void SetAttenuation(Vector3 val) {
    IronSightEnginePINVOKE.ILight_SetAttenuation(swigCPtr, Vector3.getCPtr(val));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 Attenuation {
    get {
      Vector3 ret = new Vector3(IronSightEnginePINVOKE.ILight_Attenuation_get(swigCPtr), false);
      return ret;
    } 
  }

  public virtual float GetSpotPower() {
    float ret = IronSightEnginePINVOKE.ILight_GetSpotPower(swigCPtr);
    return ret;
  }

  public virtual void SetSpotPower(float val) {
    IronSightEnginePINVOKE.ILight_SetSpotPower(swigCPtr, val);
  }

  public float SpotPower {
    set {
      IronSightEnginePINVOKE.ILight_SpotPower_set(swigCPtr, value);
    } 
    get {
      float ret = IronSightEnginePINVOKE.ILight_SpotPower_get(swigCPtr);
      return ret;
    } 
  }

  public virtual bool GetEnabled() {
    bool ret = IronSightEnginePINVOKE.ILight_GetEnabled(swigCPtr);
    return ret;
  }

  public virtual void SetEnabled(bool val) {
    IronSightEnginePINVOKE.ILight_SetEnabled(swigCPtr, val);
  }

  public bool Enabled {
    set {
      IronSightEnginePINVOKE.ILight_Enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = IronSightEnginePINVOKE.ILight_Enabled_get(swigCPtr);
      return ret;
    } 
  }

  public virtual void Release() {
    IronSightEnginePINVOKE.ILight_Release(swigCPtr);
  }

  public enum LightType {
    LT_DIRECTIONAL,
    LT_POINT,
    LT_SPOT
  }

}
