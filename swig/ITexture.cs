//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ITexture : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ITexture(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITexture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ITexture() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_ITexture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual uint GetWidth() {
    uint ret = IronSightEnginePINVOKE.ITexture_GetWidth(swigCPtr);
    return ret;
  }

  public virtual uint GetHeight() {
    uint ret = IronSightEnginePINVOKE.ITexture_GetHeight(swigCPtr);
    return ret;
  }

  public virtual uint GetNumMipLevels() {
    uint ret = IronSightEnginePINVOKE.ITexture_GetNumMipLevels(swigCPtr);
    return ret;
  }

  public virtual /*cstype*/ string GetFilename() {
	string ret = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(IronSightEnginePINVOKE.ITexture_GetFilename(swigCPtr));
	return ret;
}

  public virtual Result Lock(SWIGTYPE_p_D3D11_MAPPED_SUBRESOURCE data) {
		Result ret = new Result(IronSightEnginePINVOKE.ITexture_Lock(swigCPtr, SWIGTYPE_p_D3D11_MAPPED_SUBRESOURCE.getCPtr(data)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual void Unlock() {
    IronSightEnginePINVOKE.ITexture_Unlock(swigCPtr);
  }

  public virtual Result MapPixelData(bool read, bool write, SWIGTYPE_p_unsigned_int stride, SWIGTYPE_p_p_void data) {
		Result ret = new Result(IronSightEnginePINVOKE.ITexture_MapPixelData(swigCPtr, read, write, SWIGTYPE_p_unsigned_int.getCPtr(stride), SWIGTYPE_p_p_void.getCPtr(data)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual void UnmapData() {
    IronSightEnginePINVOKE.ITexture_UnmapData(swigCPtr);
  }

  public virtual Result Save(/*cstype*/ string filename, SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT format) {
		Result ret = new Result(IronSightEnginePINVOKE.ITexture_Save__SWIG_0(swigCPtr, new IronSightEnginePINVOKE.SWIGStringMarshal(filename).swigCPtr, SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT.getCPtr(format)), true);
		//
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result Save(SWIGTYPE_p_LPD3D10BLOB datablob, SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT format) {
		Result ret = new Result(IronSightEnginePINVOKE.ITexture_Save__SWIG_1(swigCPtr, SWIGTYPE_p_LPD3D10BLOB.getCPtr(datablob), SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT.getCPtr(format)), true);
		//
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual SWIGTYPE_p_ID3D11Texture2D GetD3DTexture() {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.ITexture_GetD3DTexture(swigCPtr);
    SWIGTYPE_p_ID3D11Texture2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ID3D11Texture2D(cPtr, false);
    return ret;
  }

  public virtual void Release() {
    IronSightEnginePINVOKE.ITexture_Release(swigCPtr);
  }

  public enum Usage {
    TU_SKIN,
    TU_SKIN_NOMIPMAP,
    TU_SOURCE,
    TU_RENDERTARGET,
    TU_RENDERTARGETORSOURCE,
    TU_ALLACCESS,
    TU_CPUWRITE
  }

}
