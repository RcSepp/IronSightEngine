//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MetropolisRendererDesc : RendererDesc {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MetropolisRendererDesc(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IronSightEnginePINVOKE.MetropolisRendererDesc_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MetropolisRendererDesc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MetropolisRendererDesc() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_MetropolisRendererDesc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MetropolisRendererDesc() : this(IronSightEnginePINVOKE.new_MetropolisRendererDesc(), true) {
  }

  public float largestepprobability {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_largestepprobability_set(swigCPtr, value);
    } 
    get {
      float ret = IronSightEnginePINVOKE.MetropolisRendererDesc_largestepprobability_get(swigCPtr);
      return ret;
    } 
  }

  public int samplesperpixel {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_samplesperpixel_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.MetropolisRendererDesc_samplesperpixel_get(swigCPtr);
      return ret;
    } 
  }

  public int bootstrapsamples {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_bootstrapsamples_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.MetropolisRendererDesc_bootstrapsamples_get(swigCPtr);
      return ret;
    } 
  }

  public int directsamples {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_directsamples_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.MetropolisRendererDesc_directsamples_get(swigCPtr);
      return ret;
    } 
  }

  public int maxconsecutiverejects {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_maxconsecutiverejects_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.MetropolisRendererDesc_maxconsecutiverejects_get(swigCPtr);
      return ret;
    } 
  }

  public int maxdepth {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_maxdepth_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.MetropolisRendererDesc_maxdepth_get(swigCPtr);
      return ret;
    } 
  }

  public bool dodirectseparately {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_dodirectseparately_set(swigCPtr, value);
    } 
    get {
      bool ret = IronSightEnginePINVOKE.MetropolisRendererDesc_dodirectseparately_get(swigCPtr);
      return ret;
    } 
  }

  public bool bidirectional {
    set {
      IronSightEnginePINVOKE.MetropolisRendererDesc_bidirectional_set(swigCPtr, value);
    } 
    get {
      bool ret = IronSightEnginePINVOKE.MetropolisRendererDesc_bidirectional_get(swigCPtr);
      return ret;
    } 
  }

}
