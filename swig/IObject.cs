//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IObject : IRenderable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IObject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IronSightEnginePINVOKE.IObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IObject() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_IObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class Vertex : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Vertex(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vertex obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Vertex() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            IronSightEnginePINVOKE.delete_IObject_Vertex(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Vector3 pos {
      set {
        IronSightEnginePINVOKE.IObject_Vertex_pos_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_Vertex_pos_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public Vector3 nml {
      set {
        IronSightEnginePINVOKE.IObject_Vertex_nml_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_Vertex_nml_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public Vector2 texcoord {
      set {
        IronSightEnginePINVOKE.IObject_Vertex_texcoord_set(swigCPtr, Vector2.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_Vertex_texcoord_get(swigCPtr);
        Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
        return ret;
      } 
    }
  
    public uint blendidx {
      set {
        IronSightEnginePINVOKE.IObject_Vertex_blendidx_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_Vertex_blendidx_get(swigCPtr);
        return ret;
      } 
    }
  
    public Vertex() : this(IronSightEnginePINVOKE.new_IObject_Vertex(), true) {
    }
  
  }

  public class AttributeRange : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal AttributeRange(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AttributeRange obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~AttributeRange() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            IronSightEnginePINVOKE.delete_IObject_AttributeRange(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint attrid {
      set {
        IronSightEnginePINVOKE.IObject_AttributeRange_attrid_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_AttributeRange_attrid_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint facestart {
      set {
        IronSightEnginePINVOKE.IObject_AttributeRange_facestart_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_AttributeRange_facestart_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint facecount {
      set {
        IronSightEnginePINVOKE.IObject_AttributeRange_facecount_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_AttributeRange_facecount_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint vertexstart {
      set {
        IronSightEnginePINVOKE.IObject_AttributeRange_vertexstart_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_AttributeRange_vertexstart_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint vertexcount {
      set {
        IronSightEnginePINVOKE.IObject_AttributeRange_vertexcount_set(swigCPtr, value);
      } 
      get {
        uint ret = IronSightEnginePINVOKE.IObject_AttributeRange_vertexcount_get(swigCPtr);
        return ret;
      } 
    }
  
    public AttributeRange() : this(IronSightEnginePINVOKE.new_IObject_AttributeRange(), true) {
    }
  
  }

  public class BoundingSphere : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal BoundingSphere(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoundingSphere obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~BoundingSphere() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            IronSightEnginePINVOKE.delete_IObject_BoundingSphere(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Vector3 center {
      set {
        IronSightEnginePINVOKE.IObject_BoundingSphere_center_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_BoundingSphere_center_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public float radius {
      set {
        IronSightEnginePINVOKE.IObject_BoundingSphere_radius_set(swigCPtr, value);
      } 
      get {
        float ret = IronSightEnginePINVOKE.IObject_BoundingSphere_radius_get(swigCPtr);
        return ret;
      } 
    }
  
    public BoundingSphere() : this(IronSightEnginePINVOKE.new_IObject_BoundingSphere(), true) {
    }
  
  }

  public class BoundingBox : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal BoundingBox(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoundingBox obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~BoundingBox() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            IronSightEnginePINVOKE.delete_IObject_BoundingBox(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Vector3 center {
      set {
        IronSightEnginePINVOKE.IObject_BoundingBox_center_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_BoundingBox_center_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public Vector3 size {
      set {
        IronSightEnginePINVOKE.IObject_BoundingBox_size_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_BoundingBox_size_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public BoundingBox() : this(IronSightEnginePINVOKE.new_IObject_BoundingBox(), true) {
    }
  
  }

  public OrientationMode orientmode {
    set {
      IronSightEnginePINVOKE.IObject_orientmode_set(swigCPtr, (int)value);
    } 
    get {
      OrientationMode ret = (OrientationMode)IronSightEnginePINVOKE.IObject_orientmode_get(swigCPtr);
      return ret;
    } 
  }

  public Matrix transform {
    set {
      IronSightEnginePINVOKE.IObject_transform_set(swigCPtr, Matrix.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_transform_get(swigCPtr);
      Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Matrix_t bonetransform {
    set {
      IronSightEnginePINVOKE.IObject_bonetransform_set(swigCPtr, SWIGTYPE_p_std__vectorT_Matrix_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_bonetransform_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Matrix_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Matrix_t(cPtr, false);
      return ret;
    } 
  }

  public Vector3 pos {
    set {
      IronSightEnginePINVOKE.IObject_pos_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_pos_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 rot {
    set {
      IronSightEnginePINVOKE.IObject_rot_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_rot_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 scl {
    set {
      IronSightEnginePINVOKE.IObject_scl_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_scl_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Quaternion qrot {
    set {
      IronSightEnginePINVOKE.IObject_qrot_set(swigCPtr, Quaternion.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_qrot_get(swigCPtr);
      Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
      return ret;
    } 
  }

  public bool iscameradependent {
    set {
      IronSightEnginePINVOKE.IObject_iscameradependent_set(swigCPtr, value);
    } 
    get {
      bool ret = IronSightEnginePINVOKE.IObject_iscameradependent_get(swigCPtr);
      return ret;
    } 
  }

  public virtual uint GetNumBones() {
    uint ret = IronSightEnginePINVOKE.IObject_GetNumBones(swigCPtr);
    return ret;
  }

  public D3DMaterialVector mats {
    set {
      IronSightEnginePINVOKE.IObject_mats_set(swigCPtr, D3DMaterialVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_mats_get(swigCPtr);
      D3DMaterialVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new D3DMaterialVector(cPtr, false);
      return ret;
    } 
  }

  public virtual int GetUnderlyingShapeCount() {
    int ret = IronSightEnginePINVOKE.IObject_GetUnderlyingShapeCount(swigCPtr);
    return ret;
  }

  public virtual D3dShapeDesc GetUnderlyingShape(int shapeidx) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_GetUnderlyingShape__SWIG_0(swigCPtr, shapeidx);
    D3dShapeDesc ret = (cPtr == global::System.IntPtr.Zero) ? null : new D3dShapeDesc(cPtr, false);
    return ret;
  }

  public virtual D3dShapeDesc GetUnderlyingShape() {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_GetUnderlyingShape__SWIG_1(swigCPtr);
    D3dShapeDesc ret = (cPtr == global::System.IntPtr.Zero) ? null : new D3dShapeDesc(cPtr, false);
    return ret;
  }

  public virtual float RayTrace(Vector3 pos, Vector3 dir, Vector3 normal, SWIGTYPE_p_unsigned_int subset, SWIGTYPE_p_unsigned_int blendpart) {
    float ret = IronSightEnginePINVOKE.IObject_RayTrace__SWIG_0(swigCPtr, Vector3.getCPtr(pos), Vector3.getCPtr(dir), Vector3.getCPtr(normal), SWIGTYPE_p_unsigned_int.getCPtr(subset), SWIGTYPE_p_unsigned_int.getCPtr(blendpart));
    return ret;
  }

  public virtual float RayTrace(Vector3 pos, Vector3 dir, Vector3 normal, SWIGTYPE_p_unsigned_int subset) {
    float ret = IronSightEnginePINVOKE.IObject_RayTrace__SWIG_1(swigCPtr, Vector3.getCPtr(pos), Vector3.getCPtr(dir), Vector3.getCPtr(normal), SWIGTYPE_p_unsigned_int.getCPtr(subset));
    return ret;
  }

  public virtual float RayTrace(Vector3 pos, Vector3 dir, Vector3 normal) {
    float ret = IronSightEnginePINVOKE.IObject_RayTrace__SWIG_2(swigCPtr, Vector3.getCPtr(pos), Vector3.getCPtr(dir), Vector3.getCPtr(normal));
    return ret;
  }

  public virtual float RayTrace(Vector3 pos, Vector3 dir) {
    float ret = IronSightEnginePINVOKE.IObject_RayTrace__SWIG_3(swigCPtr, Vector3.getCPtr(pos), Vector3.getCPtr(dir));
    return ret;
  }

  public virtual Result CreateCollisionMesh(SWIGTYPE_p_LPREGULARENTITY entity) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_CreateCollisionMesh(swigCPtr, SWIGTYPE_p_LPREGULARENTITY.getCPtr(entity)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result CreateConvexCollisionHull(SWIGTYPE_p_LPREGULARENTITY entity) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_CreateConvexCollisionHull(swigCPtr, SWIGTYPE_p_LPREGULARENTITY.getCPtr(entity)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result CreateCollisionCapsule(float radius, SWIGTYPE_p_LPREGULARENTITY entity) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_CreateCollisionCapsule(swigCPtr, radius, SWIGTYPE_p_LPREGULARENTITY.getCPtr(entity)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result CreateCollisionRagdoll(float radius, bool usedynamicmotion, SWIGTYPE_p_LPRAGDOLLENTITY entity) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_CreateCollisionRagdoll(swigCPtr, radius, usedynamicmotion, SWIGTYPE_p_LPRAGDOLLENTITY.getCPtr(entity)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result SetShader(IRenderShader shader) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_SetShader(swigCPtr, IRenderShader.getCPtr(shader)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual IRenderShader GetShader() {
		global::System.IntPtr cPtr = IronSightEnginePINVOKE.IObject_GetShader(swigCPtr);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		IRenderShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new IRenderShader(cPtr, false);
		return ret;
	}

  public virtual Result SetVertexData(IObject.Vertex vertices) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_SetVertexData(swigCPtr, IObject.Vertex.getCPtr(vertices)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result SetIndexData(SWIGTYPE_p_unsigned_int indices) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_SetIndexData(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(indices)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual uint GetVertexCount() {
    uint ret = IronSightEnginePINVOKE.IObject_GetVertexCount(swigCPtr);
    return ret;
  }

  public virtual uint GetFaceCount() {
    uint ret = IronSightEnginePINVOKE.IObject_GetFaceCount(swigCPtr);
    return ret;
  }

  public virtual uint GetIndexCount() {
    uint ret = IronSightEnginePINVOKE.IObject_GetIndexCount(swigCPtr);
    return ret;
  }

  public virtual Result MapVertexData(SWIGTYPE_p_p_IObject__Vertex vertices) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_MapVertexData(swigCPtr, SWIGTYPE_p_p_IObject__Vertex.getCPtr(vertices)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result MapIndexData(SWIGTYPE_p_p_unsigned_int indices) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_MapIndexData(swigCPtr, SWIGTYPE_p_p_unsigned_int.getCPtr(indices)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result UnmapData(SWIGTYPE_p_void vertices) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_UnmapData(swigCPtr, SWIGTYPE_p_void.getCPtr(vertices)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual void GetAttributeTable(IObject.AttributeRange attributetable, SWIGTYPE_p_unsigned_int attributetablesize) {
    IronSightEnginePINVOKE.IObject_GetAttributeTable(swigCPtr, IObject.AttributeRange.getCPtr(attributetable), SWIGTYPE_p_unsigned_int.getCPtr(attributetablesize));
  }

  public virtual Result SetAttributeTable(IObject.AttributeRange attributetable, uint attributetablesize) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_SetAttributeTable(swigCPtr, IObject.AttributeRange.getCPtr(attributetable), attributetablesize), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result CommitChanges() {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_CommitChanges(swigCPtr), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result ComputeNormals() {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_ComputeNormals(swigCPtr), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result Split(SWIGTYPE_p_Plane splitplane, SWIGTYPE_p_p_IObject first, SWIGTYPE_p_p_IObject second) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_Split(swigCPtr, SWIGTYPE_p_Plane.getCPtr(splitplane), SWIGTYPE_p_p_IObject.getCPtr(first), SWIGTYPE_p_p_IObject.getCPtr(second)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual Result Break(int targetnumparts, SWIGTYPE_p_p_IObject parts, SWIGTYPE_p_int numparts) {
		Result ret = new Result(IronSightEnginePINVOKE.IObject_Break(swigCPtr, targetnumparts, SWIGTYPE_p_p_IObject.getCPtr(parts), SWIGTYPE_p_int.getCPtr(numparts)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public virtual IObject.BoundingSphere GetBoundingSphere() {
    IObject.BoundingSphere ret = new IObject.BoundingSphere(IronSightEnginePINVOKE.IObject_GetBoundingSphere(swigCPtr), false);
    return ret;
  }

  public virtual Vector3 GetBoundingSphereCenter() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.IObject_GetBoundingSphereCenter(swigCPtr), false);
    return ret;
  }

  public virtual float GetBoundingSphereRadius() {
    float ret = IronSightEnginePINVOKE.IObject_GetBoundingSphereRadius(swigCPtr);
    return ret;
  }

  public virtual IObject.BoundingBox GetBoundingBox() {
    IObject.BoundingBox ret = new IObject.BoundingBox(IronSightEnginePINVOKE.IObject_GetBoundingBox(swigCPtr), false);
    return ret;
  }

  public virtual Vector3 GetBoundingBoxCenter() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.IObject_GetBoundingBoxCenter(swigCPtr), false);
    return ret;
  }

  public virtual Vector3 GetBoundingBoxSize() {
    Vector3 ret = new Vector3(IronSightEnginePINVOKE.IObject_GetBoundingBoxSize(swigCPtr), false);
    return ret;
  }

  public virtual void SetBeforeRenderCallback(SWIGTYPE_p_RENDER_CALLBACK cbk, SWIGTYPE_p_void user) {
    IronSightEnginePINVOKE.IObject_SetBeforeRenderCallback(swigCPtr, SWIGTYPE_p_RENDER_CALLBACK.getCPtr(cbk), SWIGTYPE_p_void.getCPtr(user));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}
