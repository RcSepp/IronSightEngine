/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_IronSightEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_IronSightEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_IronSightEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <ISEngine.h>


#include <ISMath.h>


#include <ISDirect3D.h>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< D3DMaterial > *new_std_vector_Sl_D3DMaterial_Sg___SWIG_2(int capacity){
        std::vector< D3DMaterial >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< D3DMaterial >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN D3DMaterial std_vector_Sl_D3DMaterial_Sg__getitemcopy(std::vector< D3DMaterial > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN D3DMaterial const &std_vector_Sl_D3DMaterial_Sg__getitem(std::vector< D3DMaterial > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__setitem(std::vector< D3DMaterial > *self,int index,D3DMaterial const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__AddRange(std::vector< D3DMaterial > *self,std::vector< D3DMaterial > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< D3DMaterial > *std_vector_Sl_D3DMaterial_Sg__GetRange(std::vector< D3DMaterial > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< D3DMaterial >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__Insert(std::vector< D3DMaterial > *self,int index,D3DMaterial const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__InsertRange(std::vector< D3DMaterial > *self,int index,std::vector< D3DMaterial > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__RemoveAt(std::vector< D3DMaterial > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__RemoveRange(std::vector< D3DMaterial > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< D3DMaterial > *std_vector_Sl_D3DMaterial_Sg__Repeat(D3DMaterial const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< D3DMaterial >(count, value);
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__Reverse__SWIG_0(std::vector< D3DMaterial > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__Reverse__SWIG_1(std::vector< D3DMaterial > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_D3DMaterial_Sg__SetRange(std::vector< D3DMaterial > *self,int index,std::vector< D3DMaterial > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

typedef IHUD::IElement IElement;
typedef IHUD::LPELEMENT LPELEMENT;
typedef IHUD::IImageElement IImageElement;
typedef IHUD::LPIMAGEELEMENT LPIMAGEELEMENT;
typedef IHUD::ITextElement ITextElement;
typedef IHUD::LPTEXTELEMENT LPTEXTELEMENT;
typedef IHUD::ElementType ElementType;

SWIGINTERN IImageElement *IHUD_XCreateElement__SWIG_0(IHUD *self,ITexture *tex,int x,int y,DockType dock,Color color,int zorder=0){
		// CreateElement Wrapper
		IImageElement* ret;
		self->CreateElement(tex, x, y, dock, color, zorder, &ret);
		return ret;
	}
SWIGINTERN IImageElement *IHUD_XCreateElement__SWIG_2(IHUD *self,ITexture *tex,int x,int y,DockType dock,Color color,Rect< int > const &subregion,int zorder=0){
		// CreateElement Wrapper
		IImageElement* ret;
		self->CreateElement(tex, x, y, dock, color, subregion, zorder, &ret);
		return ret;
	}
SWIGINTERN void IOutputWindow_RegisterForUpdating__SWIG_1(IOutputWindow *self,ICamera *cam){
		self->RegisterForUpdating(cam);
	}
SWIGINTERN ITexture *IOutputWindow_XCreateTexture(IOutputWindow *self,FilePath const &filename,ITexture::Usage usage,bool deviceindependent){
		// CreateTexture Wrapper
		ITexture* ret;
		self->CreateTexture(filename, usage, deviceindependent, &ret);
		return ret;
	}
SWIGINTERN IRenderShader *IOutputWindow_CreateRenderShader(IOutputWindow *self,FilePath const &filename){
		// CreateRenderShader Wrapper
		IRenderShader* ret;
		Result rlt = self->CreateRenderShader(filename, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IObject *IOutputWindow_CreateObject__SWIG_0(IOutputWindow *self,FilePath const &filename,bool loadtextures){
		// CreateObject Wrapper
		IObject* ret;
		Result rlt = self->CreateObject(filename,loadtextures, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IObject *IOutputWindow_CreateObject__SWIG_1(IOutputWindow *self,IObject *srcobj,bool newmaterials){
		// CreateObject Wrapper
		IObject* ret;
		Result rlt = self->CreateObject(srcobj,newmaterials, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IObject *IOutputWindow_CreateObject__SWIG_2(IOutputWindow *self,UINT numvertices,UINT numfaces){
		// CreateObject Wrapper
		IObject* ret;
		Result rlt = self->CreateObject(numvertices,numfaces, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IObject *IOutputWindow_CreateObject__SWIG_3(IOutputWindow *self,D3dShapeDesc const &shapedesc){
		// CreateObject Wrapper
		IObject* ret;
		Result rlt = self->CreateObject(shapedesc, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IObject *IOutputWindow_CreateObject__SWIG_4(IOutputWindow *self,D3dShapeDesc const *shapedescs[],UINT numshapedescs){
		// CreateObject Wrapper
		IObject* ret;
		Result rlt = self->CreateObject(shapedescs,numshapedescs, &ret);
		if(rlt.details)
		{
			SWIG_CSharpException(SWIG_RuntimeError, rlt.GetLastResult());
			return NULL;
		}
		else
			return ret;
	}
SWIGINTERN IHUD *IOutputWindow_XCreateHUD(IOutputWindow *self){
		// CreateHUD Wrapper
		IHUD* ret;
		self->CreateHUD(&ret);
		return ret;
	}
SWIGINTERN ISpriteContainer *IOutputWindow_XCreateSpriteContainer(IOutputWindow *self,UINT buffersize){
		// CreateSpriteContainer Wrapper
		ISpriteContainer* ret;
		self->CreateSpriteContainer(buffersize, &ret);
		return ret;
	}
SWIGINTERN IOutputWindow *IDirect3D_XCreateOutputWindow(IDirect3D *self,IOutputWindow::Settings *settings){
		// CreateOutputWindow Wrapper
		IOutputWindow* ret;
		self->CreateOutputWindow(settings, &ret);
		return ret;
	}
SWIGINTERN ICamera *IDirect3D_XCreateCamera(IDirect3D *self,float fov,float clipnear,float clipfar){
		// CreateCamera Wrapper
		ICamera* ret;
		self->CreateCamera(fov, clipnear, clipfar, &ret);
		return ret;
	}
SWIGINTERN ILight *IDirect3D_XCreateLight(IDirect3D *self,ILight::LightType type){
		// CreateLight Wrapper
		ILight* ret;
		self->CreateLight(type, &ret);
		return ret;
	}

#include <ISPbrt.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_Result_Details(void * jarg1) {
  Result::Details *arg1 = (Result::Details *) 0 ;
  
  arg1 = (Result::Details *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_details_set(void * jarg1, void * jarg2) {
  Result *arg1 = (Result *) 0 ;
  Result::Details *arg2 = (Result::Details *) 0 ;
  
  arg1 = (Result *)jarg1; 
  arg2 = (Result::Details *)jarg2; 
  if (arg1) (arg1)->details = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_details_get(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  Result::Details *result = 0 ;
  
  arg1 = (Result *)jarg1; 
  result = (Result::Details *) ((arg1)->details);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_refcounter_set(void * jarg1, void * jarg2) {
  Result *arg1 = (Result *) 0 ;
  UINT *arg2 = (UINT *) 0 ;
  
  arg1 = (Result *)jarg1; 
  arg2 = (UINT *)jarg2; 
  if (arg1) (arg1)->refcounter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_refcounter_get(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  UINT *result = 0 ;
  
  arg1 = (Result *)jarg1; 
  result = (UINT *) ((arg1)->refcounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_0() {
  void * jresult ;
  Result *result = 0 ;
  
  result = (Result *)new Result();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_1(void * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  Result *result = 0 ;
  
  arg1 = new String((char*)jarg1); 
  result = (Result *)new Result(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_2(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  String *arg1 = 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  LPCTSTR arg3 = (LPCTSTR) 0 ;
  int arg4 ;
  Result *result = 0 ;
  
  arg1 = new String((char*)jarg1); 
  arg2 = (LPCTSTR)jarg2; 
  arg3 = (LPCTSTR)jarg3; 
  arg4 = (int)jarg4; 
  result = (Result *)new Result(*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Result(void * jarg1) {
  Result *arg1 = (Result *) 0 ;
  
  arg1 = (Result *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  String arg1 ;
  String arg2 ;
  String arg3 ;
  int arg4 ;
  
  arg1 = String((char*)jarg1); 
  arg2 = String((char*)jarg2); 
  arg3 = String((char*)jarg3); 
  arg4 = (int)jarg4; 
  Result::PrintLogMessage(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_1(void * jarg1) {
  String arg1 ;
  
  arg1 = String((char*)jarg1); 
  Result::PrintLogMessage(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_2(void * jarg1) {
  Result::Details *arg1 = (Result::Details *) 0 ;
  
  arg1 = (Result::Details *)jarg1; 
  Result::PrintLogMessage((Result::Details const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_3(void * jarg1) {
  void * jresult ;
  Result *arg1 = 0 ;
  Result *result = 0 ;
  
  arg1 = (Result *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Result const & type is null", 0);
    return 0;
  } 
  result = (Result *)new Result((Result const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_GetLastResult__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  bool arg2 ;
  String result;
  
  arg1 = (Result *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((Result const *)arg1)->GetLastResult(arg2);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_GetLastResult__SWIG_1(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  String result;
  
  arg1 = (Result *)jarg1; 
  result = ((Result const *)arg1)->GetLastResult();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PtrWrapper_ptr_set(void * jarg1, void * jarg2) {
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PtrWrapper_ptr_get(void * jarg1) {
  void * jresult ;
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  void *result = 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  result = (void *) ((arg1)->ptr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PtrWrapper(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  PtrWrapper *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (PtrWrapper *)new PtrWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PtrWrapper(void * jarg1) {
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnginePtr__SWIG_0() {
  void * jresult ;
  SyncedPtr< Engine > *result = 0 ;
  
  result = (SyncedPtr< Engine > *)new SyncedPtr< Engine >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnginePtr__SWIG_1(void * jarg1) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  SyncedPtr< Engine > *result = 0 ;
  
  arg1 = (Engine *)jarg1; 
  result = (SyncedPtr< Engine > *)new SyncedPtr< Engine >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnginePtr(void * jarg1) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Engine *result = 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (Engine *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_EnginePtr_GetHInstance(void * jarg1) {
  void* jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  HINSTANCE result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (*arg1)->GetHInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_FindDLL(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = 0 ;
  LPTSTR *arg3 = (LPTSTR *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  arg3 = (LPTSTR *)jarg3; 
  result = (bool)(*arg1)->FindDLL((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_GetConsolePtr(void * jarg1, void * jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  SyncedPtr< Console > *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (SyncedPtr< Console > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (*arg1)->GetConsolePtr(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HICON arg5 ;
  HICON arg6 ;
  HBRUSH *argp3 ;
  HICON *argp5 ;
  HICON *argp6 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (HICON *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (HICON *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (*arg1)->RegisterWinClass((String const *)arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HICON arg5 ;
  HBRUSH *argp3 ;
  HICON *argp5 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (HICON *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (*arg1)->RegisterWinClass((String const *)arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HBRUSH *argp3 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (*arg1)->RegisterWinClass((String const *)arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  HBRUSH *argp3 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (*arg1)->RegisterWinClass((String const *)arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (*arg1)->RegisterWinClass((String const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterWinClass__SWIG_5(void * jarg1) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (*arg1)->RegisterWinClass();
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_RegisterCustomWndProc(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  CUSTOMWNDPROC arg2 ;
  LPVOID arg3 = (LPVOID) 0 ;
  CUSTOMWNDPROC *argp2 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  argp2 = (CUSTOMWNDPROC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUSTOMWNDPROC", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (LPVOID)jarg3; 
  result = (*arg1)->RegisterCustomWndProc(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_UnregisterCustomWndProc(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  CUSTOMWNDPROC arg2 ;
  CUSTOMWNDPROC *argp2 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  argp2 = (CUSTOMWNDPROC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUSTOMWNDPROC", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (*arg1)->UnregisterCustomWndProc(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_UnregisterWinClass__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  (*arg1)->UnregisterWinClass((String const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_UnregisterWinClass__SWIG_1(void * jarg1) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  (*arg1)->UnregisterWinClass();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_IsWinClassRegistered(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = (String *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (bool)(*arg1)->IsWinClassRegistered((String const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_Run(void * jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  INITFUNC arg2 ;
  INITFUNC arg3 ;
  CYCLICFUNC arg4 ;
  QUITFUNC arg5 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (INITFUNC)jarg2; 
  arg3 = (INITFUNC)jarg3; 
  arg4 = (CYCLICFUNC)jarg4; 
  arg5 = (QUITFUNC)jarg5; 
  result = (*arg1)->Run(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_ChangeCyclicFunc(void * jarg1, void* jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  CYCLICFUNC arg2 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (CYCLICFUNC)jarg2; 
  (*arg1)->ChangeCyclicFunc(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_Work(void * jarg1) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (bool)(*arg1)->Work();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_Wait(void * jarg1) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (bool)(*arg1)->Wait();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_WakeUp(void * jarg1) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  (*arg1)->WakeUp();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_CreateTimer(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  TIMERELAPSED_CALLBACK arg2 ;
  UINT arg3 ;
  bool arg4 ;
  LPVOID arg5 = (LPVOID) 0 ;
  Timer **arg6 = (Timer **) 0 ;
  TIMERELAPSED_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  argp2 = (TIMERELAPSED_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TIMERELAPSED_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UINT)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (LPVOID)jarg5; 
  arg6 = (Timer **)jarg6; 
  result = (*arg1)->CreateTimer(arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_ResetTimer(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (Timer *)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (*arg1)->ResetTimer(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_RemoveTimer(void * jarg1, void * jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (Timer *)jarg2; 
  (*arg1)->RemoveTimer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Direct3D__SWIG_0() {
  void * jresult ;
  SyncedPtr< IDirect3D > *result = 0 ;
  
  result = (SyncedPtr< IDirect3D > *)new SyncedPtr< IDirect3D >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Direct3D__SWIG_1(void * jarg1) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  SyncedPtr< IDirect3D > *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  result = (SyncedPtr< IDirect3D > *)new SyncedPtr< IDirect3D >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Direct3D(void * jarg1) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  IDirect3D *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  result = (IDirect3D *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Direct3D_IsFullscreen(void * jarg1) {
  unsigned int jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  result = (bool)(*arg1)->IsFullscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_Sync(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, void * jarg18, void * jarg19, void * jarg20, void * jarg21, void * jarg22, void * jarg23) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  SyncedPtr< Engine > *arg2 = 0 ;
  SyncedPtr< IDirect3D > *arg3 = 0 ;
  SyncedPtr< IOpenGL > *arg4 = 0 ;
  SyncedPtr< IHavok > *arg5 = 0 ;
  SyncedPtr< IGuiFactory > *arg6 = 0 ;
  SyncedPtr< IForms > *arg7 = 0 ;
  SyncedPtr< IDirectIpt > *arg8 = 0 ;
  SyncedPtr< IWinIpt > *arg9 = 0 ;
  SyncedPtr< IFFmpeg > *arg10 = 0 ;
  SyncedPtr< ICryptoPP > *arg11 = 0 ;
  SyncedPtr< IID3Lib > *arg12 = 0 ;
  SyncedPtr< IWinAudio > *arg13 = 0 ;
  SyncedPtr< IXAudio2 > *arg14 = 0 ;
  SyncedPtr< IWinMidi > *arg15 = 0 ;
  SyncedPtr< IWinSock > *arg16 = 0 ;
  SyncedPtr< IAsyncWorkers > *arg17 = 0 ;
  SyncedPtr< ISQLite > *arg18 = 0 ;
  SyncedPtr< IHaruPdf > *arg19 = 0 ;
  SyncedPtr< IRayTracer > *arg20 = 0 ;
  SyncedPtr< IPbrt > *arg21 = 0 ;
  SyncedPtr< IPythonScriptEngine > *arg22 = 0 ;
  SyncedPtr< Console > *arg23 = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (SyncedPtr< Engine > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Engine > & type is null", 0);
    return ;
  } 
  arg3 = (SyncedPtr< IDirect3D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirect3D > & type is null", 0);
    return ;
  } 
  arg4 = (SyncedPtr< IOpenGL > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IOpenGL > & type is null", 0);
    return ;
  } 
  arg5 = (SyncedPtr< IHavok > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHavok > & type is null", 0);
    return ;
  } 
  arg6 = (SyncedPtr< IGuiFactory > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IGuiFactory > & type is null", 0);
    return ;
  } 
  arg7 = (SyncedPtr< IForms > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IForms > & type is null", 0);
    return ;
  } 
  arg8 = (SyncedPtr< IDirectIpt > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirectIpt > & type is null", 0);
    return ;
  } 
  arg9 = (SyncedPtr< IWinIpt > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinIpt > & type is null", 0);
    return ;
  } 
  arg10 = (SyncedPtr< IFFmpeg > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IFFmpeg > & type is null", 0);
    return ;
  } 
  arg11 = (SyncedPtr< ICryptoPP > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ICryptoPP > & type is null", 0);
    return ;
  } 
  arg12 = (SyncedPtr< IID3Lib > *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IID3Lib > & type is null", 0);
    return ;
  } 
  arg13 = (SyncedPtr< IWinAudio > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinAudio > & type is null", 0);
    return ;
  } 
  arg14 = (SyncedPtr< IXAudio2 > *)jarg14;
  if (!arg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IXAudio2 > & type is null", 0);
    return ;
  } 
  arg15 = (SyncedPtr< IWinMidi > *)jarg15;
  if (!arg15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinMidi > & type is null", 0);
    return ;
  } 
  arg16 = (SyncedPtr< IWinSock > *)jarg16;
  if (!arg16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinSock > & type is null", 0);
    return ;
  } 
  arg17 = (SyncedPtr< IAsyncWorkers > *)jarg17;
  if (!arg17) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IAsyncWorkers > & type is null", 0);
    return ;
  } 
  arg18 = (SyncedPtr< ISQLite > *)jarg18;
  if (!arg18) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ISQLite > & type is null", 0);
    return ;
  } 
  arg19 = (SyncedPtr< IHaruPdf > *)jarg19;
  if (!arg19) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHaruPdf > & type is null", 0);
    return ;
  } 
  arg20 = (SyncedPtr< IRayTracer > *)jarg20;
  if (!arg20) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IRayTracer > & type is null", 0);
    return ;
  } 
  arg21 = (SyncedPtr< IPbrt > *)jarg21;
  if (!arg21) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPbrt > & type is null", 0);
    return ;
  } 
  arg22 = (SyncedPtr< IPythonScriptEngine > *)jarg22;
  if (!arg22) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPythonScriptEngine > & type is null", 0);
    return ;
  } 
  arg23 = (SyncedPtr< Console > *)jarg23;
  if (!arg23) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (*arg1)->Sync(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14,*arg15,*arg16,*arg17,*arg18,*arg19,*arg20,*arg21,*arg22,*arg23);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_Init(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  D3dStartupSettings *arg2 = (D3dStartupSettings *) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (D3dStartupSettings *)jarg2; 
  result = (*arg1)->Init((D3dStartupSettings const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_Render(void * jarg1) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  (*arg1)->Render();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Direct3D_CastRayTo(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4; 
  result = (bool)(*arg1)->CastRayTo((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Direct3D_CastRayDir(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4; 
  result = (bool)(*arg1)->CastRayDir((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_TakeScreenShots(void * jarg1, void * jarg2, void * jarg3) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  FilePath *arg2 = 0 ;
  D3DX_IMAGE_FILEFORMAT arg3 ;
  D3DX_IMAGE_FILEFORMAT *argp3 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  argp3 = (D3DX_IMAGE_FILEFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null D3DX_IMAGE_FILEFORMAT", 0);
    return ;
  }
  arg3 = *argp3; 
  (*arg1)->TakeScreenShots((FilePath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_GetEnabledLights(void * jarg1, void * jarg2) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  std::list< ILight * > *arg2 = (std::list< ILight * > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (std::list< ILight * > *)jarg2; 
  (*arg1)->GetEnabledLights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_RemoveAllLights(void * jarg1) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  (*arg1)->RemoveAllLights();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_GetOutputWindows(void * jarg1) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  std::list< IOutputWindow * > *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  result = (std::list< IOutputWindow * > *) &(*arg1)->GetOutputWindows();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_CreateOutputWindow(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  IOutputWindow::Settings *arg2 = (IOutputWindow::Settings *) 0 ;
  IOutputWindow **arg3 = (IOutputWindow **) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (IOutputWindow::Settings *)jarg2; 
  arg3 = (IOutputWindow **)jarg3; 
  result = (*arg1)->CreateOutputWindow(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_CreateWindowlessDevice(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  IWindowlessDevice **arg2 = (IWindowlessDevice **) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (IWindowlessDevice **)jarg2; 
  result = (*arg1)->CreateWindowlessDevice(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_CreateCamera(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ICamera **arg5 = (ICamera **) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ICamera **)jarg5; 
  result = (*arg1)->CreateCamera(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_CreateLight(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  ILight::LightType arg2 ;
  ILight **arg3 = (ILight **) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  arg3 = (ILight **)jarg3; 
  result = (*arg1)->CreateLight(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Direct3D_Release(void * jarg1) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_XCreateOutputWindow(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  IOutputWindow::Settings *arg2 = (IOutputWindow::Settings *) 0 ;
  IOutputWindow *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (IOutputWindow::Settings *)jarg2; 
  result = (IOutputWindow *)IDirect3D_XCreateOutputWindow((IDirect3D*)(arg1)->operator ->(),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_XCreateCamera(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ICamera *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ICamera *)IDirect3D_XCreateCamera((IDirect3D*)(arg1)->operator ->(),arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D_XCreateLight(void * jarg1, int jarg2) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  ILight::LightType arg2 ;
  ILight *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  result = (ILight *)IDirect3D_XCreateLight((IDirect3D*)(arg1)->operator ->(),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OpenGL__SWIG_0() {
  void * jresult ;
  SyncedPtr< IOpenGL > *result = 0 ;
  
  result = (SyncedPtr< IOpenGL > *)new SyncedPtr< IOpenGL >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OpenGL__SWIG_1(void * jarg1) {
  void * jresult ;
  IOpenGL *arg1 = (IOpenGL *) 0 ;
  SyncedPtr< IOpenGL > *result = 0 ;
  
  arg1 = (IOpenGL *)jarg1; 
  result = (SyncedPtr< IOpenGL > *)new SyncedPtr< IOpenGL >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OpenGL(void * jarg1) {
  SyncedPtr< IOpenGL > *arg1 = (SyncedPtr< IOpenGL > *) 0 ;
  
  arg1 = (SyncedPtr< IOpenGL > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenGL___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IOpenGL > *arg1 = (SyncedPtr< IOpenGL > *) 0 ;
  IOpenGL *result = 0 ;
  
  arg1 = (SyncedPtr< IOpenGL > *)jarg1; 
  result = (IOpenGL *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Havok__SWIG_0() {
  void * jresult ;
  SyncedPtr< IHavok > *result = 0 ;
  
  result = (SyncedPtr< IHavok > *)new SyncedPtr< IHavok >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Havok__SWIG_1(void * jarg1) {
  void * jresult ;
  IHavok *arg1 = (IHavok *) 0 ;
  SyncedPtr< IHavok > *result = 0 ;
  
  arg1 = (IHavok *)jarg1; 
  result = (SyncedPtr< IHavok > *)new SyncedPtr< IHavok >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Havok(void * jarg1) {
  SyncedPtr< IHavok > *arg1 = (SyncedPtr< IHavok > *) 0 ;
  
  arg1 = (SyncedPtr< IHavok > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Havok___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IHavok > *arg1 = (SyncedPtr< IHavok > *) 0 ;
  IHavok *result = 0 ;
  
  arg1 = (SyncedPtr< IHavok > *)jarg1; 
  result = (IHavok *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuiFactory__SWIG_0() {
  void * jresult ;
  SyncedPtr< IGuiFactory > *result = 0 ;
  
  result = (SyncedPtr< IGuiFactory > *)new SyncedPtr< IGuiFactory >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuiFactory__SWIG_1(void * jarg1) {
  void * jresult ;
  IGuiFactory *arg1 = (IGuiFactory *) 0 ;
  SyncedPtr< IGuiFactory > *result = 0 ;
  
  arg1 = (IGuiFactory *)jarg1; 
  result = (SyncedPtr< IGuiFactory > *)new SyncedPtr< IGuiFactory >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GuiFactory(void * jarg1) {
  SyncedPtr< IGuiFactory > *arg1 = (SyncedPtr< IGuiFactory > *) 0 ;
  
  arg1 = (SyncedPtr< IGuiFactory > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GuiFactory___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IGuiFactory > *arg1 = (SyncedPtr< IGuiFactory > *) 0 ;
  IGuiFactory *result = 0 ;
  
  arg1 = (SyncedPtr< IGuiFactory > *)jarg1; 
  result = (IGuiFactory *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Forms__SWIG_0() {
  void * jresult ;
  SyncedPtr< IForms > *result = 0 ;
  
  result = (SyncedPtr< IForms > *)new SyncedPtr< IForms >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Forms__SWIG_1(void * jarg1) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  SyncedPtr< IForms > *result = 0 ;
  
  arg1 = (IForms *)jarg1; 
  result = (SyncedPtr< IForms > *)new SyncedPtr< IForms >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Forms(void * jarg1) {
  SyncedPtr< IForms > *arg1 = (SyncedPtr< IForms > *) 0 ;
  
  arg1 = (SyncedPtr< IForms > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Forms___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IForms > *arg1 = (SyncedPtr< IForms > *) 0 ;
  IForms *result = 0 ;
  
  arg1 = (SyncedPtr< IForms > *)jarg1; 
  result = (IForms *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectIpt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IDirectIpt > *result = 0 ;
  
  result = (SyncedPtr< IDirectIpt > *)new SyncedPtr< IDirectIpt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectIpt__SWIG_1(void * jarg1) {
  void * jresult ;
  IDirectIpt *arg1 = (IDirectIpt *) 0 ;
  SyncedPtr< IDirectIpt > *result = 0 ;
  
  arg1 = (IDirectIpt *)jarg1; 
  result = (SyncedPtr< IDirectIpt > *)new SyncedPtr< IDirectIpt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectIpt(void * jarg1) {
  SyncedPtr< IDirectIpt > *arg1 = (SyncedPtr< IDirectIpt > *) 0 ;
  
  arg1 = (SyncedPtr< IDirectIpt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectIpt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IDirectIpt > *arg1 = (SyncedPtr< IDirectIpt > *) 0 ;
  IDirectIpt *result = 0 ;
  
  arg1 = (SyncedPtr< IDirectIpt > *)jarg1; 
  result = (IDirectIpt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinIpt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinIpt > *result = 0 ;
  
  result = (SyncedPtr< IWinIpt > *)new SyncedPtr< IWinIpt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinIpt__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinIpt *arg1 = (IWinIpt *) 0 ;
  SyncedPtr< IWinIpt > *result = 0 ;
  
  arg1 = (IWinIpt *)jarg1; 
  result = (SyncedPtr< IWinIpt > *)new SyncedPtr< IWinIpt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinIpt(void * jarg1) {
  SyncedPtr< IWinIpt > *arg1 = (SyncedPtr< IWinIpt > *) 0 ;
  
  arg1 = (SyncedPtr< IWinIpt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinIpt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinIpt > *arg1 = (SyncedPtr< IWinIpt > *) 0 ;
  IWinIpt *result = 0 ;
  
  arg1 = (SyncedPtr< IWinIpt > *)jarg1; 
  result = (IWinIpt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FFmpeg__SWIG_0() {
  void * jresult ;
  SyncedPtr< IFFmpeg > *result = 0 ;
  
  result = (SyncedPtr< IFFmpeg > *)new SyncedPtr< IFFmpeg >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FFmpeg__SWIG_1(void * jarg1) {
  void * jresult ;
  IFFmpeg *arg1 = (IFFmpeg *) 0 ;
  SyncedPtr< IFFmpeg > *result = 0 ;
  
  arg1 = (IFFmpeg *)jarg1; 
  result = (SyncedPtr< IFFmpeg > *)new SyncedPtr< IFFmpeg >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FFmpeg(void * jarg1) {
  SyncedPtr< IFFmpeg > *arg1 = (SyncedPtr< IFFmpeg > *) 0 ;
  
  arg1 = (SyncedPtr< IFFmpeg > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FFmpeg___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IFFmpeg > *arg1 = (SyncedPtr< IFFmpeg > *) 0 ;
  IFFmpeg *result = 0 ;
  
  arg1 = (SyncedPtr< IFFmpeg > *)jarg1; 
  result = (IFFmpeg *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CryptoPP__SWIG_0() {
  void * jresult ;
  SyncedPtr< ICryptoPP > *result = 0 ;
  
  result = (SyncedPtr< ICryptoPP > *)new SyncedPtr< ICryptoPP >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CryptoPP__SWIG_1(void * jarg1) {
  void * jresult ;
  ICryptoPP *arg1 = (ICryptoPP *) 0 ;
  SyncedPtr< ICryptoPP > *result = 0 ;
  
  arg1 = (ICryptoPP *)jarg1; 
  result = (SyncedPtr< ICryptoPP > *)new SyncedPtr< ICryptoPP >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CryptoPP(void * jarg1) {
  SyncedPtr< ICryptoPP > *arg1 = (SyncedPtr< ICryptoPP > *) 0 ;
  
  arg1 = (SyncedPtr< ICryptoPP > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CryptoPP___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< ICryptoPP > *arg1 = (SyncedPtr< ICryptoPP > *) 0 ;
  ICryptoPP *result = 0 ;
  
  arg1 = (SyncedPtr< ICryptoPP > *)jarg1; 
  result = (ICryptoPP *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ID3Lib__SWIG_0() {
  void * jresult ;
  SyncedPtr< IID3Lib > *result = 0 ;
  
  result = (SyncedPtr< IID3Lib > *)new SyncedPtr< IID3Lib >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ID3Lib__SWIG_1(void * jarg1) {
  void * jresult ;
  IID3Lib *arg1 = (IID3Lib *) 0 ;
  SyncedPtr< IID3Lib > *result = 0 ;
  
  arg1 = (IID3Lib *)jarg1; 
  result = (SyncedPtr< IID3Lib > *)new SyncedPtr< IID3Lib >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ID3Lib(void * jarg1) {
  SyncedPtr< IID3Lib > *arg1 = (SyncedPtr< IID3Lib > *) 0 ;
  
  arg1 = (SyncedPtr< IID3Lib > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ID3Lib___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IID3Lib > *arg1 = (SyncedPtr< IID3Lib > *) 0 ;
  IID3Lib *result = 0 ;
  
  arg1 = (SyncedPtr< IID3Lib > *)jarg1; 
  result = (IID3Lib *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinAudio__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinAudio > *result = 0 ;
  
  result = (SyncedPtr< IWinAudio > *)new SyncedPtr< IWinAudio >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinAudio__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinAudio *arg1 = (IWinAudio *) 0 ;
  SyncedPtr< IWinAudio > *result = 0 ;
  
  arg1 = (IWinAudio *)jarg1; 
  result = (SyncedPtr< IWinAudio > *)new SyncedPtr< IWinAudio >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinAudio(void * jarg1) {
  SyncedPtr< IWinAudio > *arg1 = (SyncedPtr< IWinAudio > *) 0 ;
  
  arg1 = (SyncedPtr< IWinAudio > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinAudio___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinAudio > *arg1 = (SyncedPtr< IWinAudio > *) 0 ;
  IWinAudio *result = 0 ;
  
  arg1 = (SyncedPtr< IWinAudio > *)jarg1; 
  result = (IWinAudio *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XAudio2__SWIG_0() {
  void * jresult ;
  SyncedPtr< IXAudio2 > *result = 0 ;
  
  result = (SyncedPtr< IXAudio2 > *)new SyncedPtr< IXAudio2 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XAudio2__SWIG_1(void * jarg1) {
  void * jresult ;
  IXAudio2 *arg1 = (IXAudio2 *) 0 ;
  SyncedPtr< IXAudio2 > *result = 0 ;
  
  arg1 = (IXAudio2 *)jarg1; 
  result = (SyncedPtr< IXAudio2 > *)new SyncedPtr< IXAudio2 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XAudio2(void * jarg1) {
  SyncedPtr< IXAudio2 > *arg1 = (SyncedPtr< IXAudio2 > *) 0 ;
  
  arg1 = (SyncedPtr< IXAudio2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAudio2___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IXAudio2 > *arg1 = (SyncedPtr< IXAudio2 > *) 0 ;
  IXAudio2 *result = 0 ;
  
  arg1 = (SyncedPtr< IXAudio2 > *)jarg1; 
  result = (IXAudio2 *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinMidi__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinMidi > *result = 0 ;
  
  result = (SyncedPtr< IWinMidi > *)new SyncedPtr< IWinMidi >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinMidi__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinMidi *arg1 = (IWinMidi *) 0 ;
  SyncedPtr< IWinMidi > *result = 0 ;
  
  arg1 = (IWinMidi *)jarg1; 
  result = (SyncedPtr< IWinMidi > *)new SyncedPtr< IWinMidi >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinMidi(void * jarg1) {
  SyncedPtr< IWinMidi > *arg1 = (SyncedPtr< IWinMidi > *) 0 ;
  
  arg1 = (SyncedPtr< IWinMidi > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinMidi___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinMidi > *arg1 = (SyncedPtr< IWinMidi > *) 0 ;
  IWinMidi *result = 0 ;
  
  arg1 = (SyncedPtr< IWinMidi > *)jarg1; 
  result = (IWinMidi *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinSock__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinSock > *result = 0 ;
  
  result = (SyncedPtr< IWinSock > *)new SyncedPtr< IWinSock >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinSock__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinSock *arg1 = (IWinSock *) 0 ;
  SyncedPtr< IWinSock > *result = 0 ;
  
  arg1 = (IWinSock *)jarg1; 
  result = (SyncedPtr< IWinSock > *)new SyncedPtr< IWinSock >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinSock(void * jarg1) {
  SyncedPtr< IWinSock > *arg1 = (SyncedPtr< IWinSock > *) 0 ;
  
  arg1 = (SyncedPtr< IWinSock > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinSock___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinSock > *arg1 = (SyncedPtr< IWinSock > *) 0 ;
  IWinSock *result = 0 ;
  
  arg1 = (SyncedPtr< IWinSock > *)jarg1; 
  result = (IWinSock *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncWorkers__SWIG_0() {
  void * jresult ;
  SyncedPtr< IAsyncWorkers > *result = 0 ;
  
  result = (SyncedPtr< IAsyncWorkers > *)new SyncedPtr< IAsyncWorkers >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncWorkers__SWIG_1(void * jarg1) {
  void * jresult ;
  IAsyncWorkers *arg1 = (IAsyncWorkers *) 0 ;
  SyncedPtr< IAsyncWorkers > *result = 0 ;
  
  arg1 = (IAsyncWorkers *)jarg1; 
  result = (SyncedPtr< IAsyncWorkers > *)new SyncedPtr< IAsyncWorkers >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AsyncWorkers(void * jarg1) {
  SyncedPtr< IAsyncWorkers > *arg1 = (SyncedPtr< IAsyncWorkers > *) 0 ;
  
  arg1 = (SyncedPtr< IAsyncWorkers > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AsyncWorkers___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IAsyncWorkers > *arg1 = (SyncedPtr< IAsyncWorkers > *) 0 ;
  IAsyncWorkers *result = 0 ;
  
  arg1 = (SyncedPtr< IAsyncWorkers > *)jarg1; 
  result = (IAsyncWorkers *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SQLite__SWIG_0() {
  void * jresult ;
  SyncedPtr< ISQLite > *result = 0 ;
  
  result = (SyncedPtr< ISQLite > *)new SyncedPtr< ISQLite >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SQLite__SWIG_1(void * jarg1) {
  void * jresult ;
  ISQLite *arg1 = (ISQLite *) 0 ;
  SyncedPtr< ISQLite > *result = 0 ;
  
  arg1 = (ISQLite *)jarg1; 
  result = (SyncedPtr< ISQLite > *)new SyncedPtr< ISQLite >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SQLite(void * jarg1) {
  SyncedPtr< ISQLite > *arg1 = (SyncedPtr< ISQLite > *) 0 ;
  
  arg1 = (SyncedPtr< ISQLite > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SQLite___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< ISQLite > *arg1 = (SyncedPtr< ISQLite > *) 0 ;
  ISQLite *result = 0 ;
  
  arg1 = (SyncedPtr< ISQLite > *)jarg1; 
  result = (ISQLite *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HaruPdf__SWIG_0() {
  void * jresult ;
  SyncedPtr< IHaruPdf > *result = 0 ;
  
  result = (SyncedPtr< IHaruPdf > *)new SyncedPtr< IHaruPdf >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HaruPdf__SWIG_1(void * jarg1) {
  void * jresult ;
  IHaruPdf *arg1 = (IHaruPdf *) 0 ;
  SyncedPtr< IHaruPdf > *result = 0 ;
  
  arg1 = (IHaruPdf *)jarg1; 
  result = (SyncedPtr< IHaruPdf > *)new SyncedPtr< IHaruPdf >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HaruPdf(void * jarg1) {
  SyncedPtr< IHaruPdf > *arg1 = (SyncedPtr< IHaruPdf > *) 0 ;
  
  arg1 = (SyncedPtr< IHaruPdf > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HaruPdf___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IHaruPdf > *arg1 = (SyncedPtr< IHaruPdf > *) 0 ;
  IHaruPdf *result = 0 ;
  
  arg1 = (SyncedPtr< IHaruPdf > *)jarg1; 
  result = (IHaruPdf *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayTracer__SWIG_0() {
  void * jresult ;
  SyncedPtr< IRayTracer > *result = 0 ;
  
  result = (SyncedPtr< IRayTracer > *)new SyncedPtr< IRayTracer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayTracer__SWIG_1(void * jarg1) {
  void * jresult ;
  IRayTracer *arg1 = (IRayTracer *) 0 ;
  SyncedPtr< IRayTracer > *result = 0 ;
  
  arg1 = (IRayTracer *)jarg1; 
  result = (SyncedPtr< IRayTracer > *)new SyncedPtr< IRayTracer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayTracer(void * jarg1) {
  SyncedPtr< IRayTracer > *arg1 = (SyncedPtr< IRayTracer > *) 0 ;
  
  arg1 = (SyncedPtr< IRayTracer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayTracer___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IRayTracer > *arg1 = (SyncedPtr< IRayTracer > *) 0 ;
  IRayTracer *result = 0 ;
  
  arg1 = (SyncedPtr< IRayTracer > *)jarg1; 
  result = (IRayTracer *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pbrt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IPbrt > *result = 0 ;
  
  result = (SyncedPtr< IPbrt > *)new SyncedPtr< IPbrt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pbrt__SWIG_1(void * jarg1) {
  void * jresult ;
  IPbrt *arg1 = (IPbrt *) 0 ;
  SyncedPtr< IPbrt > *result = 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  result = (SyncedPtr< IPbrt > *)new SyncedPtr< IPbrt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pbrt(void * jarg1) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pbrt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  IPbrt *result = 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  result = (IPbrt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pbrt_Sync(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, void * jarg18, void * jarg19, void * jarg20, void * jarg21, void * jarg22, void * jarg23) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  SyncedPtr< Engine > *arg2 = 0 ;
  SyncedPtr< IDirect3D > *arg3 = 0 ;
  SyncedPtr< IOpenGL > *arg4 = 0 ;
  SyncedPtr< IHavok > *arg5 = 0 ;
  SyncedPtr< IGuiFactory > *arg6 = 0 ;
  SyncedPtr< IForms > *arg7 = 0 ;
  SyncedPtr< IDirectIpt > *arg8 = 0 ;
  SyncedPtr< IWinIpt > *arg9 = 0 ;
  SyncedPtr< IFFmpeg > *arg10 = 0 ;
  SyncedPtr< ICryptoPP > *arg11 = 0 ;
  SyncedPtr< IID3Lib > *arg12 = 0 ;
  SyncedPtr< IWinAudio > *arg13 = 0 ;
  SyncedPtr< IXAudio2 > *arg14 = 0 ;
  SyncedPtr< IWinMidi > *arg15 = 0 ;
  SyncedPtr< IWinSock > *arg16 = 0 ;
  SyncedPtr< IAsyncWorkers > *arg17 = 0 ;
  SyncedPtr< ISQLite > *arg18 = 0 ;
  SyncedPtr< IHaruPdf > *arg19 = 0 ;
  SyncedPtr< IRayTracer > *arg20 = 0 ;
  SyncedPtr< IPbrt > *arg21 = 0 ;
  SyncedPtr< IPythonScriptEngine > *arg22 = 0 ;
  SyncedPtr< Console > *arg23 = 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  arg2 = (SyncedPtr< Engine > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Engine > & type is null", 0);
    return ;
  } 
  arg3 = (SyncedPtr< IDirect3D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirect3D > & type is null", 0);
    return ;
  } 
  arg4 = (SyncedPtr< IOpenGL > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IOpenGL > & type is null", 0);
    return ;
  } 
  arg5 = (SyncedPtr< IHavok > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHavok > & type is null", 0);
    return ;
  } 
  arg6 = (SyncedPtr< IGuiFactory > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IGuiFactory > & type is null", 0);
    return ;
  } 
  arg7 = (SyncedPtr< IForms > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IForms > & type is null", 0);
    return ;
  } 
  arg8 = (SyncedPtr< IDirectIpt > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirectIpt > & type is null", 0);
    return ;
  } 
  arg9 = (SyncedPtr< IWinIpt > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinIpt > & type is null", 0);
    return ;
  } 
  arg10 = (SyncedPtr< IFFmpeg > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IFFmpeg > & type is null", 0);
    return ;
  } 
  arg11 = (SyncedPtr< ICryptoPP > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ICryptoPP > & type is null", 0);
    return ;
  } 
  arg12 = (SyncedPtr< IID3Lib > *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IID3Lib > & type is null", 0);
    return ;
  } 
  arg13 = (SyncedPtr< IWinAudio > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinAudio > & type is null", 0);
    return ;
  } 
  arg14 = (SyncedPtr< IXAudio2 > *)jarg14;
  if (!arg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IXAudio2 > & type is null", 0);
    return ;
  } 
  arg15 = (SyncedPtr< IWinMidi > *)jarg15;
  if (!arg15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinMidi > & type is null", 0);
    return ;
  } 
  arg16 = (SyncedPtr< IWinSock > *)jarg16;
  if (!arg16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinSock > & type is null", 0);
    return ;
  } 
  arg17 = (SyncedPtr< IAsyncWorkers > *)jarg17;
  if (!arg17) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IAsyncWorkers > & type is null", 0);
    return ;
  } 
  arg18 = (SyncedPtr< ISQLite > *)jarg18;
  if (!arg18) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ISQLite > & type is null", 0);
    return ;
  } 
  arg19 = (SyncedPtr< IHaruPdf > *)jarg19;
  if (!arg19) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHaruPdf > & type is null", 0);
    return ;
  } 
  arg20 = (SyncedPtr< IRayTracer > *)jarg20;
  if (!arg20) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IRayTracer > & type is null", 0);
    return ;
  } 
  arg21 = (SyncedPtr< IPbrt > *)jarg21;
  if (!arg21) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPbrt > & type is null", 0);
    return ;
  } 
  arg22 = (SyncedPtr< IPythonScriptEngine > *)jarg22;
  if (!arg22) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPythonScriptEngine > & type is null", 0);
    return ;
  } 
  arg23 = (SyncedPtr< Console > *)jarg23;
  if (!arg23) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (*arg1)->Sync(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14,*arg15,*arg16,*arg17,*arg18,*arg19,*arg20,*arg21,*arg22,*arg23);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pbrt_CreateDirectRenderView(void * jarg1, void * jarg2) {
  void * jresult ;
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  IOutputWindow *arg2 = (IOutputWindow *) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  arg2 = (IOutputWindow *)jarg2; 
  result = (*arg1)->CreateDirectRenderView(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pbrt_RemoveDirectRenderView(void * jarg1) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  (*arg1)->RemoveDirectRenderView();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pbrt_Render__SWIG_0(void * jarg1) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  (*arg1)->Render();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pbrt_Render__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  IOutputWindow *arg2 = (IOutputWindow *) 0 ;
  FilterDesc *arg3 = (FilterDesc *) 0 ;
  RendererDesc *arg4 = (RendererDesc *) 0 ;
  Result result;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  arg2 = (IOutputWindow *)jarg2; 
  arg3 = (FilterDesc *)jarg3; 
  arg4 = (RendererDesc *)jarg4; 
  result = (*arg1)->Render(arg2,(FilterDesc const *)arg3,(RendererDesc const *)arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pbrt_Release(void * jarg1) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PythonScriptEngine__SWIG_0() {
  void * jresult ;
  SyncedPtr< IPythonScriptEngine > *result = 0 ;
  
  result = (SyncedPtr< IPythonScriptEngine > *)new SyncedPtr< IPythonScriptEngine >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PythonScriptEngine__SWIG_1(void * jarg1) {
  void * jresult ;
  IPythonScriptEngine *arg1 = (IPythonScriptEngine *) 0 ;
  SyncedPtr< IPythonScriptEngine > *result = 0 ;
  
  arg1 = (IPythonScriptEngine *)jarg1; 
  result = (SyncedPtr< IPythonScriptEngine > *)new SyncedPtr< IPythonScriptEngine >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PythonScriptEngine(void * jarg1) {
  SyncedPtr< IPythonScriptEngine > *arg1 = (SyncedPtr< IPythonScriptEngine > *) 0 ;
  
  arg1 = (SyncedPtr< IPythonScriptEngine > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PythonScriptEngine___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IPythonScriptEngine > *arg1 = (SyncedPtr< IPythonScriptEngine > *) 0 ;
  IPythonScriptEngine *result = 0 ;
  
  arg1 = (SyncedPtr< IPythonScriptEngine > *)jarg1; 
  result = (IPythonScriptEngine *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Console__SWIG_0() {
  void * jresult ;
  SyncedPtr< Console > *result = 0 ;
  
  result = (SyncedPtr< Console > *)new SyncedPtr< Console >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Console__SWIG_1(void * jarg1) {
  void * jresult ;
  Console *arg1 = (Console *) 0 ;
  SyncedPtr< Console > *result = 0 ;
  
  arg1 = (Console *)jarg1; 
  result = (SyncedPtr< Console > *)new SyncedPtr< Console >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Console(void * jarg1) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Console___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  Console *result = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  result = (Console *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->Print((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Print(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->Print(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->PrintLine((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->PrintLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->PrintLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->PrintD3D((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->PrintD3D(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->PrintD3D(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Release(void * jarg1) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PointI_x_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PointI_x_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PointI_y_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PointI_y_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PointI__SWIG_0() {
  void * jresult ;
  Point< int > *result = 0 ;
  
  result = (Point< int > *)new Point< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PointI__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Point< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Point< int > *)new Point< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointI_ToString(void * jarg1) {
  void * jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  String result;
  
  arg1 = (Point< int > *)jarg1; 
  result = ((Point< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PointI(void * jarg1) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  
  arg1 = (Point< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeI_width_set(void * jarg1, int jarg2) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Size< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SizeI_width_get(void * jarg1) {
  int jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  int result;
  
  arg1 = (Size< int > *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeI_height_set(void * jarg1, int jarg2) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Size< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SizeI_height_get(void * jarg1) {
  int jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  int result;
  
  arg1 = (Size< int > *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeI__SWIG_0() {
  void * jresult ;
  Size< int > *result = 0 ;
  
  result = (Size< int > *)new Size< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeI__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Size< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Size< int > *)new Size< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SizeI_ToString(void * jarg1) {
  void * jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  String result;
  
  arg1 = (Size< int > *)jarg1; 
  result = ((Size< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeI(void * jarg1) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  
  arg1 = (Size< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeU_width_set(void * jarg1, unsigned int jarg2) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SizeU_width_get(void * jarg1) {
  unsigned int jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeU_height_set(void * jarg1, unsigned int jarg2) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SizeU_height_get(void * jarg1) {
  unsigned int jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = (unsigned int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeU__SWIG_0() {
  void * jresult ;
  Size< UINT > *result = 0 ;
  
  result = (Size< UINT > *)new Size< UINT >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeU__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Size< UINT > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Size< UINT > *)new Size< UINT >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SizeU_ToString(void * jarg1) {
  void * jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  String result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = ((Size< UINT > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeU(void * jarg1) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_location_set(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = (Point< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2; 
  if (arg1) (arg1)->location = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_location_get(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (Point< int > *)& ((arg1)->location);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_size_set(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *arg2 = (Size< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Size< int > *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_size_get(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (Size< int > *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_0() {
  void * jresult ;
  Rect< int > *result = 0 ;
  
  result = (Rect< int > *)new Rect< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Rect< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (Rect< int > *)new Rect< int >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_2(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = 0 ;
  Rect< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (Rect< int > *)new Rect< int >((Rect< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Point< int > *arg1 = 0 ;
  Size< int > *arg2 = 0 ;
  Rect< int > *result = 0 ;
  
  arg1 = (Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (Size< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  result = (Rect< int > *)new Rect< int >((Point< int > const &)*arg1,(Size< int > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_5(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Rect< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Rect< int > *)new Rect< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetX(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetX(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetY(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetY(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetWidth(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetWidth(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetHeight(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetHeight(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_x_set(void * jarg1, int jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_x_get(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_y_set(void * jarg1, int jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_y_get(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_width_set(void * jarg1, int jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_width_get(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_height_set(void * jarg1, int jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_height_get(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_left(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->left();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_top(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->top();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_right(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->right();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_bottom(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->bottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Empty() {
  void * jresult ;
  Rect< int > result;
  
  result = Rect< int >::SWIGTEMPLATEDISAMBIGUATOR Empty();
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Offset__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect< int > result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((Rect< int > const *)arg1)->Offset(arg2,arg3);
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Offset__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = 0 ;
  Rect< int > result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  result = ((Rect< int > const *)arg1)->Offset((Point< int > const &)*arg2);
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Contains__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Rect< int > const *)arg1)->Contains(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Rect< int > const *)arg1)->Contains((Point< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Intersects(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Rect< int > const *)arg1)->Intersects((Rect< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_ToString(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  String result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = ((Rect< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_Inflate__SWIG_0(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *arg2 = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Size< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return ;
  } 
  (arg1)->Inflate((Size< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_Inflate__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Inflate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RectI(void * jarg1) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine(void* jarg1) {
  void * jresult ;
  HINSTANCE arg1 ;
  Engine *result = 0 ;
  
  arg1 = (HINSTANCE)jarg1; /* System.IntPtr */ 
  result = (Engine *)new Engine(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Engine(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Engine_GetHInstance(void * jarg1) {
  void* jresult ;
  Engine *arg1 = (Engine *) 0 ;
  HINSTANCE result;
  
  arg1 = (Engine *)jarg1; 
  result = (arg1)->GetHInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_FindDLL(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  LPTSTR *arg2 = (LPTSTR *) 0 ;
  bool result;
  
  arg1 = new String((char*)jarg1); 
  arg2 = (LPTSTR *)jarg2; 
  result = (bool)Engine::FindDLL((String const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_GetConsolePtr(void * jarg1, void * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  SyncedPtr< Console > *arg2 = 0 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (SyncedPtr< Console > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (arg1)->GetConsolePtr(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HICON arg5 ;
  HICON arg6 ;
  HBRUSH *argp3 ;
  HICON *argp5 ;
  HICON *argp6 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (HICON *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (HICON *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (arg1)->RegisterWinClass((String const *)arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HICON arg5 ;
  HBRUSH *argp3 ;
  HICON *argp5 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (HICON *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->RegisterWinClass((String const *)arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  bool arg4 ;
  HBRUSH *argp3 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->RegisterWinClass((String const *)arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  HBRUSH arg3 ;
  HBRUSH *argp3 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  argp3 = (HBRUSH *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HBRUSH", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->RegisterWinClass((String const *)arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (arg1)->RegisterWinClass((String const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterWinClass__SWIG_5(void * jarg1) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  result = (arg1)->RegisterWinClass();
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_RegisterCustomWndProc(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  CUSTOMWNDPROC arg2 ;
  LPVOID arg3 = (LPVOID) 0 ;
  CUSTOMWNDPROC *argp2 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  argp2 = (CUSTOMWNDPROC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUSTOMWNDPROC", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (LPVOID)jarg3; 
  result = (arg1)->RegisterCustomWndProc(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_UnregisterCustomWndProc(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  CUSTOMWNDPROC arg2 ;
  CUSTOMWNDPROC *argp2 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  argp2 = (CUSTOMWNDPROC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CUSTOMWNDPROC", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->UnregisterCustomWndProc(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_UnregisterWinClass__SWIG_0(void * jarg1, void * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  (arg1)->UnregisterWinClass((String const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_UnregisterWinClass__SWIG_1(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  (arg1)->UnregisterWinClass();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_IsWinClassRegistered(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Engine *arg1 = (Engine *) 0 ;
  String *arg2 = (String *) 0 ;
  bool result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (String *)jarg2; 
  result = (bool)(arg1)->IsWinClassRegistered((String const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Run(void * jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  INITFUNC arg2 ;
  INITFUNC arg3 ;
  CYCLICFUNC arg4 ;
  QUITFUNC arg5 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (INITFUNC)jarg2; 
  arg3 = (INITFUNC)jarg3; 
  arg4 = (CYCLICFUNC)jarg4; 
  arg5 = (QUITFUNC)jarg5; 
  result = (arg1)->Run(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_ChangeCyclicFunc(void * jarg1, void* jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  CYCLICFUNC arg2 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (CYCLICFUNC)jarg2; 
  (arg1)->ChangeCyclicFunc(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_Work(void * jarg1) {
  unsigned int jresult ;
  Engine *arg1 = (Engine *) 0 ;
  bool result;
  
  arg1 = (Engine *)jarg1; 
  result = (bool)(arg1)->Work();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_Wait(void * jarg1) {
  unsigned int jresult ;
  Engine *arg1 = (Engine *) 0 ;
  bool result;
  
  arg1 = (Engine *)jarg1; 
  result = (bool)(arg1)->Wait();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_WakeUp(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  (arg1)->WakeUp();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_CreateTimer(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  TIMERELAPSED_CALLBACK arg2 ;
  UINT arg3 ;
  bool arg4 ;
  LPVOID arg5 = (LPVOID) 0 ;
  Timer **arg6 = (Timer **) 0 ;
  TIMERELAPSED_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  argp2 = (TIMERELAPSED_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TIMERELAPSED_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UINT)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (LPVOID)jarg5; 
  arg6 = (Timer **)jarg6; 
  result = (arg1)->CreateTimer(arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_ResetTimer(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (Timer *)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (arg1)->ResetTimer(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_RemoveTimer(void * jarg1, void * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (Timer *)jarg2; 
  (arg1)->RemoveTimer(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_saturate(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)saturate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2 *)Vec2Set(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector2 *)Vec2Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Set(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector3 *)Vec3Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Vector4 *)Vec4Set(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector4 *)Vec4Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float *arg2 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color3 *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Quaternion *)QuaternionSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float *arg2 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Quaternion *)QuaternionSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  result = (Color *)ClrClone(arg1,(Color const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  result = (Color3 *)ClrClone(arg1,(Color3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (float)Vec2Dot((Vector2 const *)arg1,(Vector2 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)Vec3Dot((Vector3 const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (float)Vec4Dot((Vector4 const *)arg1,(Vector4 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Cross(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Cross(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Reflect(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Reflect(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Refract(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Refract(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 arg3 ;
  Vector2 arg4 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  Vector2 *argp3 ;
  Vector2 *argp4 ;
  Vector2 *result = 0 ;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (Vector2 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)GetUV(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2Length((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2Length(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3Length((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3Length(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4Length((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4Length(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2LengthSq((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2LengthSq(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3LengthSq((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3LengthSq(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4LengthSq((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4LengthSq(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Inverse(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Inverse(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Inverse(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Invert(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Invert(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Invert(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Normalize(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Normalize(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Normalize(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec3Transform(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformCoord(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformCoord(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformNormal(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec4Transform(arg1,(Vector4 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  float arg4 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector2 *)Vec2Lerp(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Lerp(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrLerp(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *arg3 = (Color3 *) 0 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  arg3 = (Color3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrLerp(arg1,(Color3 const *)arg2,(Color3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2BaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector3 *)Vec3BaryCentric(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2InvBaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2InvBaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Min(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Min(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Max(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Max(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionIdentity(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionInverse(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInvert(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionInvert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionNormalize(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationAxis(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Quaternion *)QuaternionRotationAxis(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionToAxisAngle(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float *)jarg3; 
  QuaternionToAxisAngle((Quaternion const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneFromPointNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Plane *)PlaneFromPointNormal(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Plane *)jarg2; 
  result = (Plane *)PlaneNormalize(arg1,(Plane const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  result = (Plane *)PlaneNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlaneDotCoord(void * jarg1, void * jarg2) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)PlaneDotCoord((Plane const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneIntersectLine(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Plane *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Vector3 *)PlaneIntersectLine(arg1,(Plane const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixIdentity(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  result = (Matrix *)MatrixIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixTranslation(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixTranslation(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixScaling(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixScaling(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverseTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverseTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MatrixDeterminant(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float)MatrixDeterminant((Matrix const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverse(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateX(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateX(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateY(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateY(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateZ(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateZ(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationYawPitchRoll(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixRotationYawPitchRoll(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationQuaternion(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Matrix *)MatrixRotationQuaternion(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayIntersectsBox(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  bool result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (bool)RayIntersectsBox((Vector3 const *)arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)new Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Vector2 *)new Vector2((Vector2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2 *)new Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((Vector2 const *)arg1)->operator +((Vector2 const &)*arg2);
  jresult = new Vector2((const Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_x_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_x_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_y_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_y_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_z_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_z_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_0() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *)new Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Vector3 *)new Vector3((Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)new Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Vector3 *)new Vector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Add(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Add(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Sub(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Sub(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Scale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)Vec3Scale(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3AddScaled(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3AddScaled(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_r_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_r_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_g_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_g_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_b_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_b_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_a_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_a_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  Color *result = 0 ;
  
  result = (Color *)new Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)new Color(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Color *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Color *)new Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Color *)new Color((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_4(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Color *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (Color *)new Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  Color *arg1 = (Color *) 0 ;
  
  arg1 = (Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAdd(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrAdd(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSub(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrSub(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrMul(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrMul(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrScale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  float arg3 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Color *)ClrScale(arg1,(Color const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *arg4 = (Color *) 0 ;
  float arg5 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (Color *)jarg4; 
  arg5 = (float)jarg5; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,(Color const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *arg4 = (Color *) 0 ;
  Color *arg5 = (Color *) 0 ;
  float arg6 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (Color *)jarg4; 
  arg5 = (Color *)jarg5; 
  arg6 = (float)jarg6; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,(Color const *)arg4,(Color const *)arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_x_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_x_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_y_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_y_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_z_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_z_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_w_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_w_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0() {
  void * jresult ;
  Quaternion *result = 0 ;
  
  result = (Quaternion *)new Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Quaternion *)new Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Quaternion *)new Quaternion((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & type is null", 0);
    return 0;
  } 
  result = ((Quaternion const *)arg1)->operator *((Quaternion const &)*arg2);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_ComputeAxisWrapper(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Vector3 *)((Quaternion const *)arg1)->ComputeAxisWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_ComputeAngleWrapper(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float)((Quaternion const *)arg1)->ComputeAngleWrapper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__11_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__11_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__12_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__12_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__13_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_13 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__13_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__14_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_14 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__14_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__21_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__21_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__22_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__22_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__23_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_23 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__23_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__24_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_24 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__24_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__31_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_31 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__31_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__32_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_32 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__32_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__33_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_33 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__33_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__34_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_34 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__34_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__41_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_41 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__41_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__42_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_42 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__42_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__43_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_43 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__43_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__44_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_44 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__44_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Matrix *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (Matrix *)new Matrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_1() {
  void * jresult ;
  Matrix *result = 0 ;
  
  result = (Matrix *)new Matrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix(void * jarg1) {
  Matrix *arg1 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dStartupSettings_isfullscreen_set(void * jarg1, unsigned int jarg2) {
  D3dStartupSettings *arg1 = (D3dStartupSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (D3dStartupSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isfullscreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dStartupSettings_isfullscreen_get(void * jarg1) {
  unsigned int jresult ;
  D3dStartupSettings *arg1 = (D3dStartupSettings *) 0 ;
  bool result;
  
  arg1 = (D3dStartupSettings *)jarg1; 
  result = (bool) ((arg1)->isfullscreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dStartupSettings() {
  void * jresult ;
  D3dStartupSettings *result = 0 ;
  
  result = (D3dStartupSettings *)new D3dStartupSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dStartupSettings(void * jarg1) {
  D3dStartupSettings *arg1 = (D3dStartupSettings *) 0 ;
  
  arg1 = (D3dStartupSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterial_ambient_set(void * jarg1, void * jarg2) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->ambient = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterial_ambient_get(void * jarg1) {
  void * jresult ;
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *result = 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  result = (Color *)& ((arg1)->ambient);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterial_diffuse_set(void * jarg1, void * jarg2) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->diffuse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterial_diffuse_get(void * jarg1) {
  void * jresult ;
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *result = 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  result = (Color *)& ((arg1)->diffuse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterial_specular_set(void * jarg1, void * jarg2) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->specular = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterial_specular_get(void * jarg1) {
  void * jresult ;
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  Color *result = 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  result = (Color *)& ((arg1)->specular);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterial_power_set(void * jarg1, float jarg2) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->power = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3DMaterial_power_get(void * jarg1) {
  float jresult ;
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  float result;
  
  arg1 = (D3DMaterial *)jarg1; 
  result = (float) ((arg1)->power);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterial_tex_set(void * jarg1, void * jarg2) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  if (arg1) (arg1)->tex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterial_tex_get(void * jarg1) {
  void * jresult ;
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  ITexture *result = 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  result = (ITexture *) ((arg1)->tex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3DMaterial() {
  void * jresult ;
  D3DMaterial *result = 0 ;
  
  result = (D3DMaterial *)new D3DMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3DMaterial(void * jarg1) {
  D3DMaterial *arg1 = (D3DMaterial *) 0 ;
  
  arg1 = (D3DMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_Clear(void * jarg1) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_Add(void * jarg1, void * jarg2) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  D3DMaterial *arg2 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (D3DMaterial *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "D3DMaterial const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((D3DMaterial const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_D3DMaterialVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  std::vector< D3DMaterial >::size_type result;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  result = ((std::vector< D3DMaterial > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_D3DMaterialVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  std::vector< D3DMaterial >::size_type result;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  result = ((std::vector< D3DMaterial > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  std::vector< D3DMaterial >::size_type arg2 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (std::vector< D3DMaterial >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3DMaterialVector__SWIG_0() {
  void * jresult ;
  std::vector< D3DMaterial > *result = 0 ;
  
  result = (std::vector< D3DMaterial > *)new std::vector< D3DMaterial >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3DMaterialVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< D3DMaterial > *arg1 = 0 ;
  std::vector< D3DMaterial > *result = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< D3DMaterial > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< D3DMaterial > *)new std::vector< D3DMaterial >((std::vector< D3DMaterial > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3DMaterialVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< D3DMaterial > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< D3DMaterial > *)new_std_vector_Sl_D3DMaterial_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterialVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  D3DMaterial result;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_D3DMaterial_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new D3DMaterial((const D3DMaterial &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterialVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  D3DMaterial *result = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (D3DMaterial *) &std_vector_Sl_D3DMaterial_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  D3DMaterial *arg3 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (D3DMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "D3DMaterial const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_D3DMaterial_Sg__setitem(arg1,arg2,(D3DMaterial const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  std::vector< D3DMaterial > *arg2 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (std::vector< D3DMaterial > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< D3DMaterial > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_D3DMaterial_Sg__AddRange(arg1,(std::vector< D3DMaterial > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterialVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< D3DMaterial > *result = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< D3DMaterial > *)std_vector_Sl_D3DMaterial_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  D3DMaterial *arg3 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (D3DMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "D3DMaterial const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_D3DMaterial_Sg__Insert(arg1,arg2,(D3DMaterial const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  std::vector< D3DMaterial > *arg3 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< D3DMaterial > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< D3DMaterial > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_D3DMaterial_Sg__InsertRange(arg1,arg2,(std::vector< D3DMaterial > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_D3DMaterial_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_D3DMaterial_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3DMaterialVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  D3DMaterial *arg1 = 0 ;
  int arg2 ;
  std::vector< D3DMaterial > *result = 0 ;
  
  arg1 = (D3DMaterial *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "D3DMaterial const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< D3DMaterial > *)std_vector_Sl_D3DMaterial_Sg__Repeat((D3DMaterial const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  std_vector_Sl_D3DMaterial_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_D3DMaterial_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3DMaterialVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  int arg2 ;
  std::vector< D3DMaterial > *arg3 = 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< D3DMaterial > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< D3DMaterial > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_D3DMaterial_Sg__SetRange(arg1,arg2,(std::vector< D3DMaterial > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3DMaterialVector(void * jarg1) {
  std::vector< D3DMaterial > *arg1 = (std::vector< D3DMaterial > *) 0 ;
  
  arg1 = (std::vector< D3DMaterial > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_worldmatrix_set(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->worldmatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_worldmatrix_get(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  result = (Matrix *)& ((arg1)->worldmatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_texcoord_set(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  if (arg1) (arg1)->texcoord = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_texcoord_get(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  result = (Vector2 *)& ((arg1)->texcoord);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_texsize_set(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  if (arg1) (arg1)->texsize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_texsize_get(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  result = (Vector2 *)& ((arg1)->texsize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_color_set(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_color_get(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  result = (Color *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_tex_set(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  if (arg1) (arg1)->tex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_tex_get(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  ITexture *result = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  result = (ITexture *) ((arg1)->tex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite() {
  void * jresult ;
  Sprite *result = 0 ;
  
  result = (Sprite *)new Sprite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sprite(void * jarg1) {
  Sprite *arg1 = (Sprite *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dShapeDesc_texcoordscale_set(void * jarg1, void * jarg2) {
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  if (arg1) (arg1)->texcoordscale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dShapeDesc_texcoordscale_get(void * jarg1) {
  void * jresult ;
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  result = (Vector2 *)& ((arg1)->texcoordscale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D3dShapeDesc_GetId(void * jarg1) {
  int jresult ;
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  D3dShapeId result;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  result = (D3dShapeId)((D3dShapeDesc const *)arg1)->GetId();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  result = (UINT)((D3dShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  result = (UINT)((D3dShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dShapeDesc(void * jarg1) {
  D3dShapeDesc *arg1 = (D3dShapeDesc *) 0 ;
  
  arg1 = (D3dShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dMeshShapeDesc() {
  void * jresult ;
  D3dMeshShapeDesc *result = 0 ;
  
  result = (D3dMeshShapeDesc *)new D3dMeshShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dMeshShapeDesc_filename_set(void * jarg1, void * jarg2) {
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  FilePath arg2 ;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  arg2 = String((char*)jarg2); 
  if (arg1) (arg1)->filename = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dMeshShapeDesc_filename_get(void * jarg1) {
  void * jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  FilePath result;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result =  ((arg1)->filename);
  jresult = new FilePath((const FilePath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dMeshShapeDesc_numvertices_set(void * jarg1, unsigned int jarg2) {
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->numvertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dMeshShapeDesc_numvertices_get(void * jarg1) {
  unsigned int jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->numvertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dMeshShapeDesc_numfaces_set(void * jarg1, unsigned int jarg2) {
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->numfaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dMeshShapeDesc_numfaces_get(void * jarg1) {
  unsigned int jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->numfaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dMeshShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result = (UINT)((D3dMeshShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dMeshShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result = (UINT)((D3dMeshShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dMeshShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dMeshShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dMeshShapeDesc(void * jarg1) {
  D3dMeshShapeDesc *arg1 = (D3dMeshShapeDesc *) 0 ;
  
  arg1 = (D3dMeshShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dPlaneShapeDesc() {
  void * jresult ;
  D3dPlaneShapeDesc *result = 0 ;
  
  result = (D3dPlaneShapeDesc *)new D3dPlaneShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dPlaneShapeDesc_pos_set(void * jarg1, void * jarg2) {
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dPlaneShapeDesc_pos_get(void * jarg1) {
  void * jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dPlaneShapeDesc_nml_set(void * jarg1, void * jarg2) {
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->nml = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dPlaneShapeDesc_nml_get(void * jarg1) {
  void * jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->nml);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dPlaneShapeDesc_size_set(void * jarg1, void * jarg2) {
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dPlaneShapeDesc_size_get(void * jarg1) {
  void * jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (Vector2 *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dPlaneShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (UINT)((D3dPlaneShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dPlaneShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (UINT)((D3dPlaneShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dPlaneShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dPlaneShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dPlaneShapeDesc(void * jarg1) {
  D3dPlaneShapeDesc *arg1 = (D3dPlaneShapeDesc *) 0 ;
  
  arg1 = (D3dPlaneShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dBoxShapeDesc() {
  void * jresult ;
  D3dBoxShapeDesc *result = 0 ;
  
  result = (D3dBoxShapeDesc *)new D3dBoxShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dBoxShapeDesc_pos_set(void * jarg1, void * jarg2) {
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dBoxShapeDesc_pos_get(void * jarg1) {
  void * jresult ;
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dBoxShapeDesc_size_set(void * jarg1, void * jarg2) {
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dBoxShapeDesc_size_get(void * jarg1) {
  void * jresult ;
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dBoxShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  result = (UINT)((D3dBoxShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dBoxShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  result = (UINT)((D3dBoxShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dBoxShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dBoxShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dBoxShapeDesc(void * jarg1) {
  D3dBoxShapeDesc *arg1 = (D3dBoxShapeDesc *) 0 ;
  
  arg1 = (D3dBoxShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dSphereShapeDesc() {
  void * jresult ;
  D3dSphereShapeDesc *result = 0 ;
  
  result = (D3dSphereShapeDesc *)new D3dSphereShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_pos_set(void * jarg1, void * jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dSphereShapeDesc_pos_get(void * jarg1) {
  void * jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_rot_y_set(void * jarg1, float jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rot_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dSphereShapeDesc_rot_y_get(void * jarg1) {
  float jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (float) ((arg1)->rot_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_radius_set(void * jarg1, float jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dSphereShapeDesc_radius_get(void * jarg1) {
  float jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_stacks_set(void * jarg1, unsigned int jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->stacks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dSphereShapeDesc_stacks_get(void * jarg1) {
  unsigned int jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->stacks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_slices_set(void * jarg1, unsigned int jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->slices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dSphereShapeDesc_slices_get(void * jarg1) {
  unsigned int jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->slices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_theta_set(void * jarg1, float jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->theta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dSphereShapeDesc_theta_get(void * jarg1) {
  float jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (float) ((arg1)->theta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dSphereShapeDesc_phi_set(void * jarg1, float jarg2) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->phi = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dSphereShapeDesc_phi_get(void * jarg1) {
  float jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (float) ((arg1)->phi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dSphereShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (UINT)((D3dSphereShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dSphereShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (UINT)((D3dSphereShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dSphereShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dSphereShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dSphereShapeDesc(void * jarg1) {
  D3dSphereShapeDesc *arg1 = (D3dSphereShapeDesc *) 0 ;
  
  arg1 = (D3dSphereShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dCapsuleShapeDesc() {
  void * jresult ;
  D3dCapsuleShapeDesc *result = 0 ;
  
  result = (D3dCapsuleShapeDesc *)new D3dCapsuleShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_v0_set(void * jarg1, void * jarg2) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_v0_get(void * jarg1) {
  void * jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_v1_set(void * jarg1, void * jarg2) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_v1_get(void * jarg1) {
  void * jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_radius_set(void * jarg1, float jarg2) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_radius_get(void * jarg1) {
  float jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_stacks_set(void * jarg1, unsigned int jarg2) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->stacks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_stacks_get(void * jarg1) {
  unsigned int jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->stacks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_slices_set(void * jarg1, unsigned int jarg2) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->slices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_slices_get(void * jarg1) {
  unsigned int jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->slices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (UINT)((D3dCapsuleShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (UINT)((D3dCapsuleShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dCapsuleShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dCapsuleShapeDesc(void * jarg1) {
  D3dCapsuleShapeDesc *arg1 = (D3dCapsuleShapeDesc *) 0 ;
  
  arg1 = (D3dCapsuleShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dCylinderShapeDesc() {
  void * jresult ;
  D3dCylinderShapeDesc *result = 0 ;
  
  result = (D3dCylinderShapeDesc *)new D3dCylinderShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCylinderShapeDesc_v0_set(void * jarg1, void * jarg2) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCylinderShapeDesc_v0_get(void * jarg1) {
  void * jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCylinderShapeDesc_v1_set(void * jarg1, void * jarg2) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCylinderShapeDesc_v1_get(void * jarg1) {
  void * jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCylinderShapeDesc_radius_set(void * jarg1, float jarg2) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dCylinderShapeDesc_radius_get(void * jarg1) {
  float jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCylinderShapeDesc_slices_set(void * jarg1, unsigned int jarg2) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->slices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCylinderShapeDesc_slices_get(void * jarg1) {
  unsigned int jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->slices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dCylinderShapeDesc_hasfrontfaces_set(void * jarg1, unsigned int jarg2) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasfrontfaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCylinderShapeDesc_hasfrontfaces_get(void * jarg1) {
  unsigned int jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  bool result;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (bool) ((arg1)->hasfrontfaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCylinderShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (UINT)((D3dCylinderShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dCylinderShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (UINT)((D3dCylinderShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dCylinderShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dCylinderShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dCylinderShapeDesc(void * jarg1) {
  D3dCylinderShapeDesc *arg1 = (D3dCylinderShapeDesc *) 0 ;
  
  arg1 = (D3dCylinderShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_D3dConeShapeDesc() {
  void * jresult ;
  D3dConeShapeDesc *result = 0 ;
  
  result = (D3dConeShapeDesc *)new D3dConeShapeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dConeShapeDesc_v0_set(void * jarg1, void * jarg2) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dConeShapeDesc_v0_get(void * jarg1) {
  void * jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dConeShapeDesc_v1_set(void * jarg1, void * jarg2) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dConeShapeDesc_v1_get(void * jarg1) {
  void * jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (Vector3 *)& ((arg1)->v1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dConeShapeDesc_radius_set(void * jarg1, float jarg2) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_D3dConeShapeDesc_radius_get(void * jarg1) {
  float jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  float result;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dConeShapeDesc_slices_set(void * jarg1, unsigned int jarg2) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  UINT arg2 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->slices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dConeShapeDesc_slices_get(void * jarg1) {
  unsigned int jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (UINT) ((arg1)->slices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_D3dConeShapeDesc_hasgroundfaces_set(void * jarg1, unsigned int jarg2) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasgroundfaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dConeShapeDesc_hasgroundfaces_get(void * jarg1) {
  unsigned int jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  bool result;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (bool) ((arg1)->hasgroundfaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dConeShapeDesc_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (UINT)((D3dConeShapeDesc const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_D3dConeShapeDesc_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  UINT result;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (UINT)((D3dConeShapeDesc const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_D3dConeShapeDesc_Copy(void * jarg1) {
  void * jresult ;
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  result = (D3dShapeDesc *)((D3dConeShapeDesc const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_D3dConeShapeDesc(void * jarg1) {
  D3dConeShapeDesc *arg1 = (D3dConeShapeDesc *) 0 ;
  
  arg1 = (D3dConeShapeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMoveable_SetTransform(void * jarg1, void * jarg2) {
  IMoveable *arg1 = (IMoveable *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (IMoveable *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  (arg1)->SetTransform((Matrix const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IMoveable() {
  void * jresult ;
  IMoveable *result = 0 ;
  
  result = (IMoveable *)new IMoveable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMoveable(void * jarg1) {
  IMoveable *arg1 = (IMoveable *) 0 ;
  
  arg1 = (IMoveable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRenderable_autorenderenabled_set(void * jarg1, unsigned int jarg2) {
  IRenderable *arg1 = (IRenderable *) 0 ;
  bool arg2 ;
  
  arg1 = (IRenderable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autorenderenabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRenderable_autorenderenabled_get(void * jarg1) {
  unsigned int jresult ;
  IRenderable *arg1 = (IRenderable *) 0 ;
  bool result;
  
  arg1 = (IRenderable *)jarg1; 
  result = (bool) ((arg1)->autorenderenabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRenderable_Render(void * jarg1, int jarg2) {
  IRenderable *arg1 = (IRenderable *) 0 ;
  RenderType arg2 ;
  
  arg1 = (IRenderable *)jarg1; 
  arg2 = (RenderType)jarg2; 
  (arg1)->Render(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRenderable_GetRefPos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IRenderable *arg1 = (IRenderable *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (IRenderable *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return 0;
  } 
  result = (bool)((IRenderable const *)arg1)->GetRefPos(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderable_GetRegisteredClasses(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  IRenderable *arg1 = (IRenderable *) 0 ;
  GETREGISTEREDCLASSES_CALLBACK arg2 ;
  LPVOID arg3 = (LPVOID) 0 ;
  RenderType arg4 ;
  GETREGISTEREDCLASSES_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (IRenderable *)jarg1; 
  argp2 = (GETREGISTEREDCLASSES_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GETREGISTEREDCLASSES_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (LPVOID)jarg3; 
  arg4 = (RenderType)jarg4; 
  result = (arg1)->GetRegisteredClasses(arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderable_GetObject(void * jarg1) {
  void * jresult ;
  IRenderable *arg1 = (IRenderable *) 0 ;
  LPOBJECT result;
  
  arg1 = (IRenderable *)jarg1; 
  result = (LPOBJECT)(arg1)->GetObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRenderable(void * jarg1) {
  IRenderable *arg1 = (IRenderable *) 0 ;
  
  arg1 = (IRenderable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IUpdateable_Update(void * jarg1) {
  IUpdateable *arg1 = (IUpdateable *) 0 ;
  
  arg1 = (IUpdateable *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IUpdateable(void * jarg1) {
  IUpdateable *arg1 = (IUpdateable *) 0 ;
  
  arg1 = (IUpdateable *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITexture_GetWidth(void * jarg1) {
  unsigned int jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  UINT result;
  
  arg1 = (ITexture *)jarg1; 
  result = (UINT)(arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITexture_GetHeight(void * jarg1) {
  unsigned int jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  UINT result;
  
  arg1 = (ITexture *)jarg1; 
  result = (UINT)(arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITexture_GetNumMipLevels(void * jarg1) {
  unsigned int jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  UINT result;
  
  arg1 = (ITexture *)jarg1; 
  result = (UINT)(arg1)->GetNumMipLevels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_GetFilename(void * jarg1) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  FilePath result;
  
  arg1 = (ITexture *)jarg1; 
  result = (arg1)->GetFilename();
  jresult = new FilePath((const FilePath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_Lock(void * jarg1, void * jarg2) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  D3D11_MAPPED_SUBRESOURCE *arg2 = (D3D11_MAPPED_SUBRESOURCE *) 0 ;
  Result result;
  
  arg1 = (ITexture *)jarg1; 
  arg2 = (D3D11_MAPPED_SUBRESOURCE *)jarg2; 
  result = (arg1)->Lock(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITexture_Unlock(void * jarg1) {
  ITexture *arg1 = (ITexture *) 0 ;
  
  arg1 = (ITexture *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_MapPixelData(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  bool arg2 ;
  bool arg3 ;
  UINT *arg4 = (UINT *) 0 ;
  LPVOID *arg5 = (LPVOID *) 0 ;
  Result result;
  
  arg1 = (ITexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (UINT *)jarg4; 
  arg5 = (LPVOID *)jarg5; 
  result = (arg1)->MapPixelData(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITexture_UnmapData(void * jarg1) {
  ITexture *arg1 = (ITexture *) 0 ;
  
  arg1 = (ITexture *)jarg1; 
  (arg1)->UnmapData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_Save__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  FilePath *arg2 = 0 ;
  D3DX_IMAGE_FILEFORMAT arg3 ;
  D3DX_IMAGE_FILEFORMAT *argp3 ;
  Result result;
  
  arg1 = (ITexture *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  argp3 = (D3DX_IMAGE_FILEFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null D3DX_IMAGE_FILEFORMAT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->Save((FilePath const &)*arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_Save__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  LPD3D10BLOB *arg2 = (LPD3D10BLOB *) 0 ;
  D3DX_IMAGE_FILEFORMAT arg3 ;
  D3DX_IMAGE_FILEFORMAT *argp3 ;
  Result result;
  
  arg1 = (ITexture *)jarg1; 
  arg2 = (LPD3D10BLOB *)jarg2; 
  argp3 = (D3DX_IMAGE_FILEFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null D3DX_IMAGE_FILEFORMAT", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->Save(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITexture_GetD3DTexture(void * jarg1) {
  void * jresult ;
  ITexture *arg1 = (ITexture *) 0 ;
  ID3D11Texture2D *result = 0 ;
  
  arg1 = (ITexture *)jarg1; 
  result = (ID3D11Texture2D *)(arg1)->GetD3DTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITexture_Release(void * jarg1) {
  ITexture *arg1 = (ITexture *) 0 ;
  
  arg1 = (ITexture *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITexture(void * jarg1) {
  ITexture *arg1 = (ITexture *) 0 ;
  
  arg1 = (ITexture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_GetVariableBySemantic(void * jarg1, char * jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  LPCSTR arg2 = (LPCSTR) 0 ;
  LPD3D11EFFECTVARIABLE result;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = (LPCSTR)jarg2; 
  result = (arg1)->GetVariableBySemantic(arg2);
  jresult = new LPD3D11EFFECTVARIABLE((const LPD3D11EFFECTVARIABLE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_GetVariableByName(void * jarg1, char * jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  LPCSTR arg2 = (LPCSTR) 0 ;
  LPD3D11EFFECTVARIABLE result;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = (LPCSTR)jarg2; 
  result = (arg1)->GetVariableByName(arg2);
  jresult = new LPD3D11EFFECTVARIABLE((const LPD3D11EFFECTVARIABLE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_GetScalarVariable(void * jarg1, void * jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  String *arg2 = 0 ;
  IEffectScalarVariable *result = 0 ;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = new String((char*)jarg2); 
  result = (IEffectScalarVariable *)(arg1)->GetScalarVariable((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_GetVectorVariable(void * jarg1, void * jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  String *arg2 = 0 ;
  IEffectVectorVariable *result = 0 ;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = new String((char*)jarg2); 
  result = (IEffectVectorVariable *)(arg1)->GetVectorVariable((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_GetMatrixVariable(void * jarg1, void * jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  String *arg2 = 0 ;
  IEffectMatrixVariable *result = 0 ;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = new String((char*)jarg2); 
  result = (IEffectMatrixVariable *)(arg1)->GetMatrixVariable((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRenderShader_SetTechnique(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  UINT arg2 ;
  Result result;
  
  arg1 = (IRenderShader *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (arg1)->SetTechnique(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRenderShader(void * jarg1) {
  IRenderShader *arg1 = (IRenderShader *) 0 ;
  
  arg1 = (IRenderShader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_Vertex_pos_set(void * jarg1, void * jarg2) {
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_Vertex_pos_get(void * jarg1) {
  void * jresult ;
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_Vertex_nml_set(void * jarg1, void * jarg2) {
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->nml = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_Vertex_nml_get(void * jarg1) {
  void * jresult ;
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->nml);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_Vertex_texcoord_set(void * jarg1, void * jarg2) {
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  if (arg1) (arg1)->texcoord = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_Vertex_texcoord_get(void * jarg1) {
  void * jresult ;
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  result = (Vector2 *)& ((arg1)->texcoord);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_Vertex_blendidx_set(void * jarg1, unsigned int jarg2) {
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->blendidx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_Vertex_blendidx_get(void * jarg1) {
  unsigned int jresult ;
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  UINT result;
  
  arg1 = (IObject::Vertex *)jarg1; 
  result = (UINT) ((arg1)->blendidx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IObject_Vertex() {
  void * jresult ;
  IObject::Vertex *result = 0 ;
  
  result = (IObject::Vertex *)new IObject::Vertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject_Vertex(void * jarg1) {
  IObject::Vertex *arg1 = (IObject::Vertex *) 0 ;
  
  arg1 = (IObject::Vertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AttributeRange_attrid_set(void * jarg1, unsigned int jarg2) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->attrid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_AttributeRange_attrid_get(void * jarg1) {
  unsigned int jresult ;
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT result;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  result = (UINT) ((arg1)->attrid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AttributeRange_facestart_set(void * jarg1, unsigned int jarg2) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->facestart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_AttributeRange_facestart_get(void * jarg1) {
  unsigned int jresult ;
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT result;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  result = (UINT) ((arg1)->facestart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AttributeRange_facecount_set(void * jarg1, unsigned int jarg2) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->facecount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_AttributeRange_facecount_get(void * jarg1) {
  unsigned int jresult ;
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT result;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  result = (UINT) ((arg1)->facecount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AttributeRange_vertexstart_set(void * jarg1, unsigned int jarg2) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->vertexstart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_AttributeRange_vertexstart_get(void * jarg1) {
  unsigned int jresult ;
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT result;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  result = (UINT) ((arg1)->vertexstart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AttributeRange_vertexcount_set(void * jarg1, unsigned int jarg2) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT arg2 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->vertexcount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_AttributeRange_vertexcount_get(void * jarg1) {
  unsigned int jresult ;
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  UINT result;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  result = (UINT) ((arg1)->vertexcount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IObject_AttributeRange() {
  void * jresult ;
  IObject::AttributeRange *result = 0 ;
  
  result = (IObject::AttributeRange *)new IObject::AttributeRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject_AttributeRange(void * jarg1) {
  IObject::AttributeRange *arg1 = (IObject::AttributeRange *) 0 ;
  
  arg1 = (IObject::AttributeRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_BoundingSphere_center_set(void * jarg1, void * jarg2) {
  IObject::BoundingSphere *arg1 = (IObject::BoundingSphere *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject::BoundingSphere *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_BoundingSphere_center_get(void * jarg1) {
  void * jresult ;
  IObject::BoundingSphere *arg1 = (IObject::BoundingSphere *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject::BoundingSphere *)jarg1; 
  result = (Vector3 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_BoundingSphere_radius_set(void * jarg1, float jarg2) {
  IObject::BoundingSphere *arg1 = (IObject::BoundingSphere *) 0 ;
  float arg2 ;
  
  arg1 = (IObject::BoundingSphere *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_BoundingSphere_radius_get(void * jarg1) {
  float jresult ;
  IObject::BoundingSphere *arg1 = (IObject::BoundingSphere *) 0 ;
  float result;
  
  arg1 = (IObject::BoundingSphere *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IObject_BoundingSphere() {
  void * jresult ;
  IObject::BoundingSphere *result = 0 ;
  
  result = (IObject::BoundingSphere *)new IObject::BoundingSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject_BoundingSphere(void * jarg1) {
  IObject::BoundingSphere *arg1 = (IObject::BoundingSphere *) 0 ;
  
  arg1 = (IObject::BoundingSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_BoundingBox_center_set(void * jarg1, void * jarg2) {
  IObject::BoundingBox *arg1 = (IObject::BoundingBox *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject::BoundingBox *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_BoundingBox_center_get(void * jarg1) {
  void * jresult ;
  IObject::BoundingBox *arg1 = (IObject::BoundingBox *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject::BoundingBox *)jarg1; 
  result = (Vector3 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_BoundingBox_size_set(void * jarg1, void * jarg2) {
  IObject::BoundingBox *arg1 = (IObject::BoundingBox *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject::BoundingBox *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_BoundingBox_size_get(void * jarg1) {
  void * jresult ;
  IObject::BoundingBox *arg1 = (IObject::BoundingBox *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject::BoundingBox *)jarg1; 
  result = (Vector3 *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IObject_BoundingBox() {
  void * jresult ;
  IObject::BoundingBox *result = 0 ;
  
  result = (IObject::BoundingBox *)new IObject::BoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject_BoundingBox(void * jarg1) {
  IObject::BoundingBox *arg1 = (IObject::BoundingBox *) 0 ;
  
  arg1 = (IObject::BoundingBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_orientmode_set(void * jarg1, int jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  OrientationMode arg2 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (OrientationMode)jarg2; 
  if (arg1) (arg1)->orientmode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IObject_orientmode_get(void * jarg1) {
  int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  OrientationMode result;
  
  arg1 = (IObject *)jarg1; 
  result = (OrientationMode) ((arg1)->orientmode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_transform_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_transform_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Matrix *)& ((arg1)->transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_bonetransform_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  std::vector< Matrix > *arg2 = (std::vector< Matrix > *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (std::vector< Matrix > *)jarg2; 
  if (arg1) (arg1)->bonetransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_bonetransform_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  std::vector< Matrix > *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (std::vector< Matrix > *)& ((arg1)->bonetransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_pos_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_pos_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_rot_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->rot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_rot_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *)& ((arg1)->rot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_scl_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->scl = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_scl_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *)& ((arg1)->scl);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_qrot_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->qrot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_qrot_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Quaternion *)& ((arg1)->qrot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_iscameradependent_set(void * jarg1, unsigned int jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  bool arg2 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iscameradependent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_iscameradependent_get(void * jarg1) {
  unsigned int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  bool result;
  
  arg1 = (IObject *)jarg1; 
  result = (bool) ((arg1)->iscameradependent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_GetNumBones(void * jarg1) {
  unsigned int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT result;
  
  arg1 = (IObject *)jarg1; 
  result = (UINT)(arg1)->GetNumBones();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_mats_set(void * jarg1, void * jarg2) {
  IObject *arg1 = (IObject *) 0 ;
  std::vector< D3DMaterial > *arg2 = (std::vector< D3DMaterial > *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (std::vector< D3DMaterial > *)jarg2; 
  if (arg1) (arg1)->mats = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_mats_get(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  std::vector< D3DMaterial > *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (std::vector< D3DMaterial > *) ((arg1)->mats);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IObject_GetUnderlyingShapeCount(void * jarg1) {
  int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  int result;
  
  arg1 = (IObject *)jarg1; 
  result = (int)(arg1)->GetUnderlyingShapeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetUnderlyingShape__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  int arg2 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (D3dShapeDesc *)(arg1)->GetUnderlyingShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetUnderlyingShape__SWIG_1(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  D3dShapeDesc *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (D3dShapeDesc *)(arg1)->GetUnderlyingShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_RayTrace__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  float jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  UINT *arg5 = (UINT *) 0 ;
  UINT *arg6 = (UINT *) 0 ;
  float result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (UINT *)jarg5; 
  arg6 = (UINT *)jarg6; 
  result = (float)(arg1)->RayTrace((Vector3 const *)arg2,(Vector3 const *)arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_RayTrace__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  UINT *arg5 = (UINT *) 0 ;
  float result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (UINT *)jarg5; 
  result = (float)(arg1)->RayTrace((Vector3 const *)arg2,(Vector3 const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_RayTrace__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  float jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (float)(arg1)->RayTrace((Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_RayTrace__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (float)(arg1)->RayTrace((Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_CreateCollisionMesh(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  LPREGULARENTITY *arg2 = (LPREGULARENTITY *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (LPREGULARENTITY *)jarg2; 
  result = (arg1)->CreateCollisionMesh(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_CreateConvexCollisionHull(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  LPREGULARENTITY *arg2 = (LPREGULARENTITY *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (LPREGULARENTITY *)jarg2; 
  result = (arg1)->CreateConvexCollisionHull(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_CreateCollisionCapsule(void * jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  float arg2 ;
  LPREGULARENTITY *arg3 = (LPREGULARENTITY *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (LPREGULARENTITY *)jarg3; 
  result = (arg1)->CreateCollisionCapsule(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_CreateCollisionRagdoll(void * jarg1, float jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  float arg2 ;
  bool arg3 ;
  LPRAGDOLLENTITY *arg4 = (LPRAGDOLLENTITY *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (LPRAGDOLLENTITY *)jarg4; 
  result = (arg1)->CreateCollisionRagdoll(arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_SetShader(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IRenderShader *arg2 = (IRenderShader *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (IRenderShader *)jarg2; 
  result = (arg1)->SetShader(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetShader(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IRenderShader *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (IRenderShader *)((IObject const *)arg1)->GetShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_SetVertexData(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IObject::Vertex *arg2 = (IObject::Vertex *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (IObject::Vertex *)jarg2; 
  result = (arg1)->SetVertexData((IObject::Vertex const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_SetIndexData(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT *arg2 = (UINT *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (UINT *)jarg2; 
  result = (arg1)->SetIndexData((UINT const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT result;
  
  arg1 = (IObject *)jarg1; 
  result = (UINT)(arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_GetFaceCount(void * jarg1) {
  unsigned int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT result;
  
  arg1 = (IObject *)jarg1; 
  result = (UINT)(arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_GetIndexCount(void * jarg1) {
  unsigned int jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT result;
  
  arg1 = (IObject *)jarg1; 
  result = (UINT)(arg1)->GetIndexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_MapVertexData(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IObject::Vertex **arg2 = (IObject::Vertex **) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (IObject::Vertex **)jarg2; 
  result = (arg1)->MapVertexData(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_MapIndexData(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  UINT **arg2 = (UINT **) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (UINT **)jarg2; 
  result = (arg1)->MapIndexData(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_UnmapData(void * jarg1, void * jarg2) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  LPVOID arg2 = (LPVOID) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (LPVOID)jarg2; 
  result = (arg1)->UnmapData(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_GetAttributeTable(void * jarg1, void * jarg2, void * jarg3) {
  IObject *arg1 = (IObject *) 0 ;
  IObject::AttributeRange *arg2 = (IObject::AttributeRange *) 0 ;
  UINT *arg3 = (UINT *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (IObject::AttributeRange *)jarg2; 
  arg3 = (UINT *)jarg3; 
  (arg1)->GetAttributeTable(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_SetAttributeTable(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IObject::AttributeRange *arg2 = (IObject::AttributeRange *) 0 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (IObject::AttributeRange *)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (arg1)->SetAttributeTable((IObject::AttributeRange const *)arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_CommitChanges(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  result = (arg1)->CommitChanges();
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_ComputeNormals(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  result = (arg1)->ComputeNormals();
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_Split(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  IObject **arg3 = (IObject **) 0 ;
  IObject **arg4 = (IObject **) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (Plane *)jarg2; 
  arg3 = (IObject **)jarg3; 
  arg4 = (IObject **)jarg4; 
  result = (arg1)->Split((Plane const *)arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_Break(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  int arg2 ;
  IObject **arg3 = (IObject **) 0 ;
  int *arg4 = (int *) 0 ;
  Result result;
  
  arg1 = (IObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IObject **)jarg3; 
  arg4 = (int *)jarg4; 
  result = (arg1)->Break(arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetBoundingSphere(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IObject::BoundingSphere *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (IObject::BoundingSphere *) &((IObject const *)arg1)->GetBoundingSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetBoundingSphereCenter(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *) &((IObject const *)arg1)->GetBoundingSphereCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IObject_GetBoundingSphereRadius(void * jarg1) {
  float jresult ;
  IObject *arg1 = (IObject *) 0 ;
  float result;
  
  arg1 = (IObject *)jarg1; 
  result = (float)(arg1)->GetBoundingSphereRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetBoundingBox(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  IObject::BoundingBox *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (IObject::BoundingBox *) &((IObject const *)arg1)->GetBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetBoundingBoxCenter(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *) &((IObject const *)arg1)->GetBoundingBoxCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetBoundingBoxSize(void * jarg1) {
  void * jresult ;
  IObject *arg1 = (IObject *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (IObject *)jarg1; 
  result = (Vector3 *) &(arg1)->GetBoundingBoxSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_SetBeforeRenderCallback(void * jarg1, void * jarg2, void * jarg3) {
  IObject *arg1 = (IObject *) 0 ;
  RENDER_CALLBACK arg2 ;
  LPVOID arg3 = (LPVOID) 0 ;
  RENDER_CALLBACK *argp2 ;
  
  arg1 = (IObject *)jarg1; 
  argp2 = (RENDER_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RENDER_CALLBACK", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (LPVOID)jarg3; 
  (arg1)->SetBeforeRenderCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject(void * jarg1) {
  IObject *arg1 = (IObject *) 0 ;
  
  arg1 = (IObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_viewmode_set(void * jarg1, int jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  enum ICamera::ViewMode arg2 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (enum ICamera::ViewMode)jarg2; 
  if (arg1) (arg1)->viewmode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICamera_viewmode_get(void * jarg1) {
  int jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  enum ICamera::ViewMode result;
  
  arg1 = (ICamera *)jarg1; 
  result = (enum ICamera::ViewMode) ((arg1)->viewmode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_orientmode_set(void * jarg1, int jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  OrientationMode arg2 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (OrientationMode)jarg2; 
  if (arg1) (arg1)->orientmode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICamera_orientmode_get(void * jarg1) {
  int jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  OrientationMode result;
  
  arg1 = (ICamera *)jarg1; 
  result = (OrientationMode) ((arg1)->orientmode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_transform_set(void * jarg1, void * jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_transform_get(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Matrix *)& ((arg1)->transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_pos_set(void * jarg1, void * jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_pos_get(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_rot_set(void * jarg1, void * jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->rot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_rot_get(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Vector3 *)& ((arg1)->rot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_qrot_set(void * jarg1, void * jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  if (arg1) (arg1)->qrot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_qrot_get(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Quaternion *)& ((arg1)->qrot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_UpdateMatrices(void * jarg1) {
  ICamera *arg1 = (ICamera *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  (arg1)->UpdateMatrices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetClipNear(void * jarg1, float jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  float arg2 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetClipNear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetClipFar(void * jarg1, float jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  float arg2 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetClipFar(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetPlayerModel__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ICamera *arg1 = (ICamera *) 0 ;
  LPOBJECT arg2 = (LPOBJECT) 0 ;
  LPRAGDOLLENTITY arg3 ;
  LPRAGDOLLENTITY *argp3 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (LPOBJECT)jarg2; 
  argp3 = (LPRAGDOLLENTITY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPRAGDOLLENTITY", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetPlayerModel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetPlayerModel__SWIG_1(void * jarg1, void * jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  LPOBJECT arg2 = (LPOBJECT) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (LPOBJECT)jarg2; 
  (arg1)->SetPlayerModel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetPerspectiveProjection(void * jarg1, float jarg2) {
  ICamera *arg1 = (ICamera *) 0 ;
  float arg2 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetPerspectiveProjection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICamera_SetOrthogonalProjection(void * jarg1, float jarg2, float jarg3) {
  ICamera *arg1 = (ICamera *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetOrthogonalProjection(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_GetViewFrustum(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Frustum *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Frustum *) &(arg1)->GetViewFrustum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_GetViewMatrix(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Matrix *) &(arg1)->GetViewMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_GetProjMatrix(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Matrix *) &(arg1)->GetProjMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_GetViewProjMatrix(void * jarg1) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  result = (Matrix *) &(arg1)->GetViewProjMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_ComputeViewDir(void * jarg1, void * jarg2) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)((ICamera const *)arg1)->ComputeViewDir(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICamera_ComputePixelDir(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ICamera *arg1 = (ICamera *) 0 ;
  Point< int > *arg2 = 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ICamera *)jarg1; 
  arg2 = (Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)((ICamera const *)arg1)->ComputePixelDir((Point< int > const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICamera(void * jarg1) {
  ICamera *arg1 = (ICamera *) 0 ;
  
  arg1 = (ICamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_GetPos(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(arg1)->GetPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetPos(void * jarg1, void * jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPos((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_Pos_get(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(Vector3 const &) ((arg1)->Pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_GetDir(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(arg1)->GetDir();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetDir(void * jarg1, void * jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetDir((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_Dir_get(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(Vector3 const &) ((arg1)->Dir);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_GetColor(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  PARENT_NAMESPACE::Color *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (PARENT_NAMESPACE::Color *) &(arg1)->GetColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetColor(void * jarg1, void * jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  PARENT_NAMESPACE::Color *arg2 = 0 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (PARENT_NAMESPACE::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PARENT_NAMESPACE::Color const & type is null", 0);
    return ;
  } 
  (arg1)->SetColor((PARENT_NAMESPACE::Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_Color_get(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  PARENT_NAMESPACE::Color *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (PARENT_NAMESPACE::Color *) &(PARENT_NAMESPACE::Color const &) ((arg1)->Color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILight_GetType(void * jarg1) {
  int jresult ;
  ILight *arg1 = (ILight *) 0 ;
  ILight::LightType result;
  
  arg1 = (ILight *)jarg1; 
  result = (ILight::LightType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetType(void * jarg1, int jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  ILight::LightType arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_Type_set(void * jarg1, int jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  ILight::LightType arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILight_Type_get(void * jarg1) {
  int jresult ;
  ILight *arg1 = (ILight *) 0 ;
  ILight::LightType result;
  
  arg1 = (ILight *)jarg1; 
  result = (ILight::LightType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_GetAttenuation(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(arg1)->GetAttenuation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetAttenuation(void * jarg1, void * jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAttenuation((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILight_Attenuation_get(void * jarg1) {
  void * jresult ;
  ILight *arg1 = (ILight *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (ILight *)jarg1; 
  result = (Vector3 *) &(Vector3 const &) ((arg1)->Attenuation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ILight_GetSpotPower(void * jarg1) {
  float jresult ;
  ILight *arg1 = (ILight *) 0 ;
  float result;
  
  arg1 = (ILight *)jarg1; 
  result = (float)(arg1)->GetSpotPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetSpotPower(void * jarg1, float jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  float arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSpotPower(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SpotPower_set(void * jarg1, float jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  float arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpotPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ILight_SpotPower_get(void * jarg1) {
  float jresult ;
  ILight *arg1 = (ILight *) 0 ;
  float result;
  
  arg1 = (ILight *)jarg1; 
  result = (float) ((arg1)->SpotPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILight_GetEnabled(void * jarg1) {
  unsigned int jresult ;
  ILight *arg1 = (ILight *) 0 ;
  bool result;
  
  arg1 = (ILight *)jarg1; 
  result = (bool)(arg1)->GetEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_SetEnabled(void * jarg1, unsigned int jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  bool arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_Enabled_set(void * jarg1, unsigned int jarg2) {
  ILight *arg1 = (ILight *) 0 ;
  bool arg2 ;
  
  arg1 = (ILight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILight_Enabled_get(void * jarg1) {
  unsigned int jresult ;
  ILight *arg1 = (ILight *) 0 ;
  bool result;
  
  arg1 = (ILight *)jarg1; 
  result = (bool) ((arg1)->Enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILight_Release(void * jarg1) {
  ILight *arg1 = (ILight *) 0 ;
  
  arg1 = (ILight *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILight(void * jarg1) {
  ILight *arg1 = (ILight *) 0 ;
  
  arg1 = (ILight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetViewTransform(void * jarg1, void * jarg2) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  (arg1)->SetViewTransform((Matrix const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetIdentityViewTransform(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->SetIdentityViewTransform();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetCameraViewTransform(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->SetCameraViewTransform();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetProjectionTransform(void * jarg1, void * jarg2) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  (arg1)->SetProjectionTransform((Matrix const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetIdentityProjectionTransform(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->SetIdentityProjectionTransform();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_SetCameraProjectionTransform(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->SetCameraProjectionTransform();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_Begin(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_DrawSpriteImmediate(void * jarg1, void * jarg2) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  Sprite *arg2 = (Sprite *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  arg2 = (Sprite *)jarg2; 
  (arg1)->DrawSpriteImmediate((Sprite const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_End(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_DrawSpriteDelayed(void * jarg1, void * jarg2) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  Sprite *arg2 = (Sprite *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  arg2 = (Sprite *)jarg2; 
  (arg1)->DrawSpriteDelayed((Sprite const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISpriteContainer_Release(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISpriteContainer(void * jarg1) {
  ISpriteContainer *arg1 = (ISpriteContainer *) 0 ;
  
  arg1 = (ISpriteContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_visible_set(void * jarg1, unsigned int jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  bool arg2 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->visible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IElement_visible_get(void * jarg1) {
  unsigned int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  bool result;
  
  arg1 = (IElement *)jarg1; 
  result = (bool) ((arg1)->visible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_color_set(void * jarg1, void * jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IElement_color_get(void * jarg1) {
  void * jresult ;
  IElement *arg1 = (IElement *) 0 ;
  Color *result = 0 ;
  
  arg1 = (IElement *)jarg1; 
  result = (Color *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_zorder_get(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  result = (int)(int) ((arg1)->zorder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_type_get(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  IHUD::ElementType result;
  
  arg1 = (IElement *)jarg1; 
  result = (IHUD::ElementType)(IHUD::ElementType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_user_set(void * jarg1, void * jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  LPVOID arg2 = (LPVOID) 0 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (LPVOID)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IElement_user_get(void * jarg1) {
  void * jresult ;
  IElement *arg1 = (IElement *) 0 ;
  LPVOID result;
  
  arg1 = (IElement *)jarg1; 
  result = (LPVOID) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_GetX(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  result = (int)(arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_SetX(void * jarg1, int jarg2) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_x_set(void * jarg1, int jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  int arg2 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_x_get(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_GetY(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  result = (int)(arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_SetY(void * jarg1, int jarg2) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_y_set(void * jarg1, int jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  int arg2 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_y_get(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  int result;
  
  arg1 = (IElement *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_GetDock(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  DockType result;
  
  arg1 = (IElement *)jarg1; 
  result = (DockType)(arg1)->GetDock();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_SetDock(void * jarg1, int jarg2) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  DockType arg2 ;
  DockType result;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (DockType)jarg2; 
  result = (DockType)(arg1)->SetDock(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IElement_dock_set(void * jarg1, int jarg2) {
  IElement *arg1 = (IElement *) 0 ;
  DockType arg2 ;
  
  arg1 = (IElement *)jarg1; 
  arg2 = (DockType)jarg2; 
  if (arg1) (arg1)->dock = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IElement_dock_get(void * jarg1) {
  int jresult ;
  IElement *arg1 = (IElement *) 0 ;
  DockType result;
  
  arg1 = (IElement *)jarg1; 
  result = (DockType) ((arg1)->dock);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IElement_CompareFunctor() {
  void * jresult ;
  IElement::CompareFunctor *result = 0 ;
  
  result = (IElement::CompareFunctor *)new IElement::CompareFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IElement_CompareFunctor(void * jarg1) {
  IElement::CompareFunctor *arg1 = (IElement::CompareFunctor *) 0 ;
  
  arg1 = (IElement::CompareFunctor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IElement(void * jarg1) {
  IElement *arg1 = (IElement *) 0 ;
  
  arg1 = (IElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImageElement(void * jarg1) {
  IImageElement *arg1 = (IImageElement *) 0 ;
  
  arg1 = (IImageElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITextElement_text_set(void * jarg1, void * jarg2) {
  ITextElement *arg1 = (ITextElement *) 0 ;
  String arg2 ;
  
  arg1 = (ITextElement *)jarg1; 
  arg2 = String((char*)jarg2); 
  if (arg1) (arg1)->text = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITextElement_text_get(void * jarg1) {
  void * jresult ;
  ITextElement *arg1 = (ITextElement *) 0 ;
  String result;
  
  arg1 = (ITextElement *)jarg1; 
  result =  ((arg1)->text);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITextElement_font_set(void * jarg1, void * jarg2) {
  ITextElement *arg1 = (ITextElement *) 0 ;
  LPD3DFONT arg2 ;
  LPD3DFONT *argp2 ;
  
  arg1 = (ITextElement *)jarg1; 
  argp2 = (LPD3DFONT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->font = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITextElement_font_get(void * jarg1) {
  void * jresult ;
  ITextElement *arg1 = (ITextElement *) 0 ;
  LPD3DFONT result;
  
  arg1 = (ITextElement *)jarg1; 
  result =  ((arg1)->font);
  jresult = new LPD3DFONT((const LPD3DFONT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITextElement_textflags_set(void * jarg1, unsigned int jarg2) {
  ITextElement *arg1 = (ITextElement *) 0 ;
  UINT arg2 ;
  
  arg1 = (ITextElement *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->textflags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITextElement_textflags_get(void * jarg1) {
  unsigned int jresult ;
  ITextElement *arg1 = (ITextElement *) 0 ;
  UINT result;
  
  arg1 = (ITextElement *)jarg1; 
  result = (UINT) ((arg1)->textflags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITextElement(void * jarg1) {
  ITextElement *arg1 = (ITextElement *) 0 ;
  
  arg1 = (ITextElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  int arg7 ;
  LPIMAGEELEMENT *arg8 = (LPIMAGEELEMENT *) 0 ;
  LPVOID arg9 = (LPVOID) 0 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (int)jarg7; 
  arg8 = (LPIMAGEELEMENT *)jarg8; 
  arg9 = (LPVOID)jarg9; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  int arg7 ;
  LPIMAGEELEMENT *arg8 = (LPIMAGEELEMENT *) 0 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (int)jarg7; 
  arg8 = (LPIMAGEELEMENT *)jarg8; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  int arg7 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (int)jarg7; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_4(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  int arg8 ;
  LPIMAGEELEMENT *arg9 = (LPIMAGEELEMENT *) 0 ;
  LPVOID arg10 = (LPVOID) 0 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  arg9 = (LPIMAGEELEMENT *)jarg9; 
  arg10 = (LPVOID)jarg10; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7,arg8,arg9,arg10);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_5(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  int arg8 ;
  LPIMAGEELEMENT *arg9 = (LPIMAGEELEMENT *) 0 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  arg9 = (LPIMAGEELEMENT *)jarg9; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7,arg8,arg9);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  int arg8 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7,arg8);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_7(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  Color *argp6 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_8(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, int jarg9, unsigned int jarg10, void * jarg11, void * jarg12) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  String arg2 ;
  LPD3DFONT arg3 ;
  int arg4 ;
  int arg5 ;
  DockType arg6 ;
  Color arg7 ;
  Size< int > *arg8 = 0 ;
  int arg9 ;
  UINT arg10 ;
  LPTEXTELEMENT *arg11 = (LPTEXTELEMENT *) 0 ;
  LPVOID arg12 = (LPVOID) 0 ;
  LPD3DFONT *argp3 ;
  Color *argp7 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = String((char*)jarg2); 
  argp3 = (LPD3DFONT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DockType)jarg6; 
  argp7 = (Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (Size< int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  arg9 = (int)jarg9; 
  arg10 = (UINT)jarg10; 
  arg11 = (LPTEXTELEMENT *)jarg11; 
  arg12 = (LPVOID)jarg12; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,(Size< int > const &)*arg8,arg9,arg10,arg11,arg12);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_9(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, int jarg9, unsigned int jarg10, void * jarg11) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  String arg2 ;
  LPD3DFONT arg3 ;
  int arg4 ;
  int arg5 ;
  DockType arg6 ;
  Color arg7 ;
  Size< int > *arg8 = 0 ;
  int arg9 ;
  UINT arg10 ;
  LPTEXTELEMENT *arg11 = (LPTEXTELEMENT *) 0 ;
  LPD3DFONT *argp3 ;
  Color *argp7 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = String((char*)jarg2); 
  argp3 = (LPD3DFONT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DockType)jarg6; 
  argp7 = (Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (Size< int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  arg9 = (int)jarg9; 
  arg10 = (UINT)jarg10; 
  arg11 = (LPTEXTELEMENT *)jarg11; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,(Size< int > const &)*arg8,arg9,arg10,arg11);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_10(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, int jarg9, unsigned int jarg10) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  String arg2 ;
  LPD3DFONT arg3 ;
  int arg4 ;
  int arg5 ;
  DockType arg6 ;
  Color arg7 ;
  Size< int > *arg8 = 0 ;
  int arg9 ;
  UINT arg10 ;
  LPD3DFONT *argp3 ;
  Color *argp7 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = String((char*)jarg2); 
  argp3 = (LPD3DFONT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DockType)jarg6; 
  argp7 = (Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (Size< int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  arg9 = (int)jarg9; 
  arg10 = (UINT)jarg10; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,(Size< int > const &)*arg8,arg9,arg10);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_11(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, int jarg9) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  String arg2 ;
  LPD3DFONT arg3 ;
  int arg4 ;
  int arg5 ;
  DockType arg6 ;
  Color arg7 ;
  Size< int > *arg8 = 0 ;
  int arg9 ;
  LPD3DFONT *argp3 ;
  Color *argp7 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = String((char*)jarg2); 
  argp3 = (LPD3DFONT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DockType)jarg6; 
  argp7 = (Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (Size< int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  arg9 = (int)jarg9; 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,(Size< int > const &)*arg8,arg9);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_CreateElement__SWIG_12(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  String arg2 ;
  LPD3DFONT arg3 ;
  int arg4 ;
  int arg5 ;
  DockType arg6 ;
  Color arg7 ;
  Size< int > *arg8 = 0 ;
  LPD3DFONT *argp3 ;
  Color *argp7 ;
  Result result;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = String((char*)jarg2); 
  argp3 = (LPD3DFONT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPD3DFONT", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DockType)jarg6; 
  argp7 = (Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (Size< int > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateElement(arg2,arg3,arg4,arg5,arg6,arg7,(Size< int > const &)*arg8);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RemoveElement(void * jarg1, void * jarg2) {
  IHUD *arg1 = (IHUD *) 0 ;
  LPELEMENT arg2 = (LPELEMENT) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (LPELEMENT)jarg2; 
  (arg1)->RemoveElement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RegisterMouseDownListener(void * jarg1, void * jarg2, void * jarg3) {
  IHUD *arg1 = (IHUD *) 0 ;
  IElement *arg2 = (IElement *) 0 ;
  IHUD::MOUSEEVENT_CALLBACK arg3 = (IHUD::MOUSEEVENT_CALLBACK) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (IElement *)jarg2; 
  arg3 = (IHUD::MOUSEEVENT_CALLBACK)jarg3; 
  (arg1)->RegisterMouseDownListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RegisterMouseUpListener(void * jarg1, void * jarg2, void * jarg3) {
  IHUD *arg1 = (IHUD *) 0 ;
  IElement *arg2 = (IElement *) 0 ;
  IHUD::MOUSEEVENT_CALLBACK arg3 = (IHUD::MOUSEEVENT_CALLBACK) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (IElement *)jarg2; 
  arg3 = (IHUD::MOUSEEVENT_CALLBACK)jarg3; 
  (arg1)->RegisterMouseUpListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RegisterMouseMoveListener(void * jarg1, void * jarg2, void * jarg3) {
  IHUD *arg1 = (IHUD *) 0 ;
  IElement *arg2 = (IElement *) 0 ;
  IHUD::MOUSEEVENT_CALLBACK arg3 = (IHUD::MOUSEEVENT_CALLBACK) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (IElement *)jarg2; 
  arg3 = (IHUD::MOUSEEVENT_CALLBACK)jarg3; 
  (arg1)->RegisterMouseMoveListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RegisterMouseEnterListener(void * jarg1, void * jarg2, void * jarg3) {
  IHUD *arg1 = (IHUD *) 0 ;
  IElement *arg2 = (IElement *) 0 ;
  IHUD::MOUSEEVENT_CALLBACK arg3 = (IHUD::MOUSEEVENT_CALLBACK) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (IElement *)jarg2; 
  arg3 = (IHUD::MOUSEEVENT_CALLBACK)jarg3; 
  (arg1)->RegisterMouseEnterListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_RegisterMouseLeaveListener(void * jarg1, void * jarg2, void * jarg3) {
  IHUD *arg1 = (IHUD *) 0 ;
  IElement *arg2 = (IElement *) 0 ;
  IHUD::MOUSEEVENT_CALLBACK arg3 = (IHUD::MOUSEEVENT_CALLBACK) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (IElement *)jarg2; 
  arg3 = (IHUD::MOUSEEVENT_CALLBACK)jarg3; 
  (arg1)->RegisterMouseLeaveListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_Update(void * jarg1) {
  IHUD *arg1 = (IHUD *) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_GetSpriteContainer(void * jarg1) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  LPSPRITECONTAINER result;
  
  arg1 = (IHUD *)jarg1; 
  result = (LPSPRITECONTAINER)(arg1)->GetSpriteContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHUD_Release(void * jarg1) {
  IHUD *arg1 = (IHUD *) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_XCreateElement__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  int arg7 ;
  Color *argp6 ;
  IImageElement *result = 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (int)jarg7; 
  result = (IImageElement *)IHUD_XCreateElement__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_XCreateElement__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Color *argp6 ;
  IImageElement *result = 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (IImageElement *)IHUD_XCreateElement__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_XCreateElement__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  int arg8 ;
  Color *argp6 ;
  IImageElement *result = 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  result = (IImageElement *)IHUD_XCreateElement__SWIG_2(arg1,arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHUD_XCreateElement__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  IHUD *arg1 = (IHUD *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  int arg3 ;
  int arg4 ;
  DockType arg5 ;
  Color arg6 ;
  Rect< int > *arg7 = 0 ;
  Color *argp6 ;
  IImageElement *result = 0 ;
  
  arg1 = (IHUD *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (DockType)jarg5; 
  argp6 = (Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (Rect< int > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (IImageElement *)IHUD_XCreateElement__SWIG_2(arg1,arg2,arg3,arg4,arg5,arg6,(Rect< int > const &)*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHUD(void * jarg1) {
  IHUD *arg1 = (IHUD *) 0 ;
  
  arg1 = (IHUD *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Settings_backbuffersize_set(void * jarg1, void * jarg2) {
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  Size< UINT > *arg2 = (Size< UINT > *) 0 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  arg2 = (Size< UINT > *)jarg2; 
  if (arg1) (arg1)->backbuffersize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_Settings_backbuffersize_get(void * jarg1) {
  void * jresult ;
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  Size< UINT > *result = 0 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  result = (Size< UINT > *)& ((arg1)->backbuffersize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Settings_wnd_set(void * jarg1, void* jarg2) {
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  HWND arg2 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  arg2 = (HWND)jarg2; /* System.IntPtr */ 
  if (arg1) (arg1)->wnd = arg2;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_IOutputWindow_Settings_wnd_get(void * jarg1) {
  void* jresult ;
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  HWND result;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  result =  ((arg1)->wnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Settings_enablemultisampling_set(void * jarg1, unsigned int jarg2) {
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  bool arg2 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enablemultisampling = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOutputWindow_Settings_enablemultisampling_get(void * jarg1) {
  unsigned int jresult ;
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  bool result;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  result = (bool) ((arg1)->enablemultisampling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Settings_screenidx_set(void * jarg1, int jarg2) {
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  int arg2 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->screenidx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IOutputWindow_Settings_screenidx_get(void * jarg1) {
  int jresult ;
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  int result;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  result = (int) ((arg1)->screenidx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IOutputWindow_Settings() {
  void * jresult ;
  IOutputWindow::Settings *result = 0 ;
  
  result = (IOutputWindow::Settings *)new IOutputWindow::Settings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOutputWindow_Settings(void * jarg1) {
  IOutputWindow::Settings *arg1 = (IOutputWindow::Settings *) 0 ;
  
  arg1 = (IOutputWindow::Settings *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOutputWindow_ismultisampled_get(void * jarg1) {
  unsigned int jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  bool result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (bool)(bool) ((arg1)->ismultisampled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IOutputWindow_screenidx_get(void * jarg1) {
  int jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  int result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (int)(int) ((arg1)->screenidx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_backcolor_set(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Color *arg2 = (Color *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Color *)jarg2; 
  if (arg1) (arg1)->backcolor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_backcolor_get(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Color *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (Color *)& ((arg1)->backcolor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_backcolorenabled_set(void * jarg1, unsigned int jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->backcolorenabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOutputWindow_backcolorenabled_get(void * jarg1) {
  unsigned int jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  bool result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (bool) ((arg1)->backcolorenabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetBackbufferSize(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Size< UINT > result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (arg1)->GetBackbufferSize();
  jresult = new Size< UINT >((const Size< UINT > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOutputWindow_GetBackbufferWidth(void * jarg1) {
  unsigned int jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (UINT)(arg1)->GetBackbufferWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOutputWindow_GetBackbufferHeight(void * jarg1) {
  unsigned int jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (UINT)(arg1)->GetBackbufferHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_IOutputWindow_GetHwnd(void * jarg1) {
  void* jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  HWND result;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (arg1)->GetHwnd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetBackbuffer(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ITexture *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (ITexture *)(arg1)->GetBackbuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_SetBackbuffer(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  ITexture *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  result = (ITexture *)(arg1)->SetBackbuffer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Backbuffer_set(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  if (arg1) (arg1)->Backbuffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_Backbuffer_get(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ITexture *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (ITexture *) ((arg1)->Backbuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_Resize(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (arg1)->Resize(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Update(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Render(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->Render();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RegisterForRendering__SWIG_0(void * jarg1, void* jarg2, int jarg3, void * jarg4) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  RENDERFUNC arg2 ;
  RenderType arg3 ;
  LPVOID arg4 = (LPVOID) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (RENDERFUNC)jarg2; 
  arg3 = (RenderType)jarg3; 
  arg4 = (LPVOID)jarg4; 
  (arg1)->RegisterForRendering(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RegisterForRendering__SWIG_1(void * jarg1, void* jarg2, int jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  RENDERFUNC arg2 ;
  RenderType arg3 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (RENDERFUNC)jarg2; 
  arg3 = (RenderType)jarg3; 
  (arg1)->RegisterForRendering(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RegisterForRendering__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IRenderable *arg2 = (IRenderable *) 0 ;
  RenderType arg3 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IRenderable *)jarg2; 
  arg3 = (RenderType)jarg3; 
  (arg1)->RegisterForRendering(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DeregisterFromRendering__SWIG_0(void * jarg1, void* jarg2, int jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  RENDERFUNC arg2 ;
  RenderType arg3 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (RENDERFUNC)jarg2; 
  arg3 = (RenderType)jarg3; 
  (arg1)->DeregisterFromRendering(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DeregisterFromRendering__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IRenderable *arg2 = (IRenderable *) 0 ;
  RenderType arg3 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IRenderable *)jarg2; 
  arg3 = (RenderType)jarg3; 
  (arg1)->DeregisterFromRendering(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DeregisterFromRendering__SWIG_2(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IRenderable *arg2 = (IRenderable *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IRenderable *)jarg2; 
  (arg1)->DeregisterFromRendering(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RegisterForUpdating__SWIG_0(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IUpdateable *arg2 = (IUpdateable *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IUpdateable *)jarg2; 
  (arg1)->RegisterForUpdating(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DeregisterFromUpdating(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IUpdateable *arg2 = (IUpdateable *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IUpdateable *)jarg2; 
  (arg1)->DeregisterFromUpdating(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_SortRegisteredClasses(void * jarg1, int jarg2, void * jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  RenderType arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (RenderType)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SortRegisteredClasses(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetRegisteredClasses(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  GETREGISTEREDCLASSES_CALLBACK arg2 ;
  LPVOID arg3 = (LPVOID) 0 ;
  RenderType arg4 ;
  GETREGISTEREDCLASSES_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  argp2 = (GETREGISTEREDCLASSES_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GETREGISTEREDCLASSES_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (LPVOID)jarg3; 
  arg4 = (RenderType)jarg4; 
  result = (arg1)->GetRegisteredClasses(arg2,arg3,arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DrawLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Color arg4 ;
  Color arg5 ;
  RenderType arg6 ;
  Color *argp4 ;
  Color *argp5 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  argp4 = (Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (RenderType)jarg6; 
  (arg1)->DrawLine((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DrawLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Color arg4 ;
  Color arg5 ;
  Color *argp4 ;
  Color *argp5 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  argp4 = (Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->DrawLine((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DrawLine__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color arg4 ;
  Color arg5 ;
  RenderType arg6 ;
  Color *argp4 ;
  Color *argp5 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  argp4 = (Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (RenderType)jarg6; 
  (arg1)->DrawLine((Vector2 const &)*arg2,(Vector2 const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DrawLine__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color arg4 ;
  Color arg5 ;
  Color *argp4 ;
  Color *argp5 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  argp4 = (Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->DrawLine((Vector2 const &)*arg2,(Vector2 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_DrawSprite(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  Sprite *arg2 = (Sprite *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (Sprite *)jarg2; 
  (arg1)->DrawSprite((Sprite const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_EnableSprites(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath arg2 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = String((char*)jarg2); 
  result = (arg1)->EnableSprites(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_EnableLineDrawing(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath arg2 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = String((char*)jarg2); 
  result = (arg1)->EnableLineDrawing(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_ShowFps(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->ShowFps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_HideFps(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->HideFps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_TakeScreenShot(void * jarg1, void * jarg2, void * jarg3) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath *arg2 = 0 ;
  D3DX_IMAGE_FILEFORMAT arg3 ;
  D3DX_IMAGE_FILEFORMAT *argp3 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  argp3 = (D3DX_IMAGE_FILEFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null D3DX_IMAGE_FILEFORMAT", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->TakeScreenShot((FilePath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_SetCamera(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ICamera *arg2 = (ICamera *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ICamera *)jarg2; 
  (arg1)->SetCamera(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetCamera(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ICamera *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (ICamera *)((IOutputWindow const *)arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetViewport(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  D3D11_VIEWPORT *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (D3D11_VIEWPORT *) &(arg1)->GetViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetDevice(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ID3D11Device *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (ID3D11Device *)((IOutputWindow const *)arg1)->GetDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_GetDeviceContext(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ID3D11DeviceContext *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (ID3D11DeviceContext *)((IOutputWindow const *)arg1)->GetDeviceContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_MakeConsoleTarget(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (arg1)->MakeConsoleTarget(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateTexture__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath *arg2 = 0 ;
  ITexture::Usage arg3 ;
  bool arg4 ;
  ITexture **arg5 = (ITexture **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  arg3 = (ITexture::Usage)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ITexture **)jarg5; 
  result = (arg1)->CreateTexture((FilePath const &)*arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateTexture__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  ITexture::Usage arg4 ;
  bool arg5 ;
  DXGI_FORMAT arg6 ;
  ITexture **arg7 = (ITexture **) 0 ;
  DXGI_FORMAT *argp6 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (ITexture::Usage)jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = (DXGI_FORMAT *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DXGI_FORMAT", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (ITexture **)jarg7; 
  result = (arg1)->CreateTexture(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateTexture__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5, void * jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  ITexture::Usage arg4 ;
  bool arg5 ;
  DXGI_FORMAT arg6 ;
  LPVOID arg7 = (LPVOID) 0 ;
  ITexture **arg8 = (ITexture **) 0 ;
  DXGI_FORMAT *argp6 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (ITexture::Usage)jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = (DXGI_FORMAT *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DXGI_FORMAT", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (LPVOID)jarg7; 
  arg8 = (ITexture **)jarg8; 
  result = (arg1)->CreateTexture(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateTexture__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ITexture *arg2 = (ITexture *) 0 ;
  ITexture::Usage arg3 ;
  bool arg4 ;
  ITexture **arg5 = (ITexture **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ITexture *)jarg2; 
  arg3 = (ITexture::Usage)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ITexture **)jarg5; 
  result = (arg1)->CreateTexture(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RemoveObject(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IObject *arg2 = (IObject *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IObject *)jarg2; 
  (arg1)->RemoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RemoveAllObjects(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->RemoveAllObjects();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateHUD(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IHUD **arg2 = (IHUD **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IHUD **)jarg2; 
  result = (arg1)->CreateHUD(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateCursor(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ID3dCursor **arg2 = (ID3dCursor **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ID3dCursor **)jarg2; 
  result = (arg1)->CreateCursor(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateSpriteContainer(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  ISpriteContainer **arg3 = (ISpriteContainer **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (ISpriteContainer **)jarg3; 
  result = (arg1)->CreateSpriteContainer(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateD3dFont(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FontType *arg2 = 0 ;
  ID3dFont **arg3 = (ID3dFont **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (FontType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FontType const & type is null", 0);
    return 0;
  } 
  arg3 = (ID3dFont **)jarg3; 
  result = (arg1)->CreateD3dFont((FontType const &)*arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateSceneManager(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ISceneManager **arg2 = (ISceneManager **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ISceneManager **)jarg2; 
  result = (arg1)->CreateSceneManager(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateSkyBox(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ISkyBox **arg2 = (ISkyBox **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ISkyBox **)jarg2; 
  result = (arg1)->CreateSkyBox(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateBoxedLevel(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT (*arg2)[3] = 0 ;
  UINT arg3 ;
  LPTEXTURE arg4 = (LPTEXTURE) 0 ;
  LPRENDERSHADER arg5 = (LPRENDERSHADER) 0 ;
  IBoxedLevel **arg6 = (IBoxedLevel **) 0 ;
  Result result;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT (*)[3])jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT const (&)[3] type is null", 0);
    return 0;
  } 
  arg3 = (UINT)jarg3; 
  arg4 = (LPTEXTURE)jarg4; 
  arg5 = (LPRENDERSHADER)jarg5; 
  arg6 = (IBoxedLevel **)jarg6; 
  result = (arg1)->CreateBoxedLevel((UINT const (&)[3])*arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_Release(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputWindow_RegisterForUpdating__SWIG_1(void * jarg1, void * jarg2) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  ICamera *arg2 = (ICamera *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (ICamera *)jarg2; 
  IOutputWindow_RegisterForUpdating__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_XCreateTexture(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath *arg2 = 0 ;
  ITexture::Usage arg3 ;
  bool arg4 ;
  ITexture *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  arg3 = (ITexture::Usage)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ITexture *)IOutputWindow_XCreateTexture(arg1,(FilePath const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateRenderShader(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath *arg2 = 0 ;
  IRenderShader *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  result = (IRenderShader *)IOutputWindow_CreateRenderShader(arg1,(FilePath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateObject__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  FilePath *arg2 = 0 ;
  bool arg3 ;
  IObject *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  arg3 = jarg3 ? true : false; 
  result = (IObject *)IOutputWindow_CreateObject__SWIG_0(arg1,(FilePath const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateObject__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IObject *arg2 = (IObject *) 0 ;
  bool arg3 ;
  IObject *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (IObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (IObject *)IOutputWindow_CreateObject__SWIG_1(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateObject__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  IObject *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (IObject *)IOutputWindow_CreateObject__SWIG_2(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateObject__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  D3dShapeDesc *arg2 = 0 ;
  IObject *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (D3dShapeDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "D3dShapeDesc const & type is null", 0);
    return 0;
  } 
  result = (IObject *)IOutputWindow_CreateObject__SWIG_3(arg1,(D3dShapeDesc const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_CreateObject__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  D3dShapeDesc **arg2 ;
  UINT arg3 ;
  IObject *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (D3dShapeDesc **)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (IObject *)IOutputWindow_CreateObject__SWIG_4(arg1,(D3dShapeDesc const *(*))arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_XCreateHUD(void * jarg1) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  IHUD *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  result = (IHUD *)IOutputWindow_XCreateHUD(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOutputWindow_XCreateSpriteContainer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  UINT arg2 ;
  ISpriteContainer *result = 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (ISpriteContainer *)IOutputWindow_XCreateSpriteContainer(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOutputWindow(void * jarg1) {
  IOutputWindow *arg1 = (IOutputWindow *) 0 ;
  
  arg1 = (IOutputWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDirect3D_IsFullscreen(void * jarg1) {
  unsigned int jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  bool result;
  
  arg1 = (IDirect3D *)jarg1; 
  result = (bool)((IDirect3D const *)arg1)->IsFullscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_Sync(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, void * jarg18, void * jarg19, void * jarg20, void * jarg21, void * jarg22, void * jarg23) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  SyncedPtr< Engine > *arg2 = 0 ;
  SyncedPtr< IDirect3D > *arg3 = 0 ;
  SyncedPtr< IOpenGL > *arg4 = 0 ;
  SyncedPtr< IHavok > *arg5 = 0 ;
  SyncedPtr< IGuiFactory > *arg6 = 0 ;
  SyncedPtr< IForms > *arg7 = 0 ;
  SyncedPtr< IDirectIpt > *arg8 = 0 ;
  SyncedPtr< IWinIpt > *arg9 = 0 ;
  SyncedPtr< IFFmpeg > *arg10 = 0 ;
  SyncedPtr< ICryptoPP > *arg11 = 0 ;
  SyncedPtr< IID3Lib > *arg12 = 0 ;
  SyncedPtr< IWinAudio > *arg13 = 0 ;
  SyncedPtr< IXAudio2 > *arg14 = 0 ;
  SyncedPtr< IWinMidi > *arg15 = 0 ;
  SyncedPtr< IWinSock > *arg16 = 0 ;
  SyncedPtr< IAsyncWorkers > *arg17 = 0 ;
  SyncedPtr< ISQLite > *arg18 = 0 ;
  SyncedPtr< IHaruPdf > *arg19 = 0 ;
  SyncedPtr< IRayTracer > *arg20 = 0 ;
  SyncedPtr< IPbrt > *arg21 = 0 ;
  SyncedPtr< IPythonScriptEngine > *arg22 = 0 ;
  SyncedPtr< Console > *arg23 = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (SyncedPtr< Engine > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Engine > & type is null", 0);
    return ;
  } 
  arg3 = (SyncedPtr< IDirect3D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirect3D > & type is null", 0);
    return ;
  } 
  arg4 = (SyncedPtr< IOpenGL > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IOpenGL > & type is null", 0);
    return ;
  } 
  arg5 = (SyncedPtr< IHavok > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHavok > & type is null", 0);
    return ;
  } 
  arg6 = (SyncedPtr< IGuiFactory > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IGuiFactory > & type is null", 0);
    return ;
  } 
  arg7 = (SyncedPtr< IForms > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IForms > & type is null", 0);
    return ;
  } 
  arg8 = (SyncedPtr< IDirectIpt > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirectIpt > & type is null", 0);
    return ;
  } 
  arg9 = (SyncedPtr< IWinIpt > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinIpt > & type is null", 0);
    return ;
  } 
  arg10 = (SyncedPtr< IFFmpeg > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IFFmpeg > & type is null", 0);
    return ;
  } 
  arg11 = (SyncedPtr< ICryptoPP > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ICryptoPP > & type is null", 0);
    return ;
  } 
  arg12 = (SyncedPtr< IID3Lib > *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IID3Lib > & type is null", 0);
    return ;
  } 
  arg13 = (SyncedPtr< IWinAudio > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinAudio > & type is null", 0);
    return ;
  } 
  arg14 = (SyncedPtr< IXAudio2 > *)jarg14;
  if (!arg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IXAudio2 > & type is null", 0);
    return ;
  } 
  arg15 = (SyncedPtr< IWinMidi > *)jarg15;
  if (!arg15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinMidi > & type is null", 0);
    return ;
  } 
  arg16 = (SyncedPtr< IWinSock > *)jarg16;
  if (!arg16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinSock > & type is null", 0);
    return ;
  } 
  arg17 = (SyncedPtr< IAsyncWorkers > *)jarg17;
  if (!arg17) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IAsyncWorkers > & type is null", 0);
    return ;
  } 
  arg18 = (SyncedPtr< ISQLite > *)jarg18;
  if (!arg18) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ISQLite > & type is null", 0);
    return ;
  } 
  arg19 = (SyncedPtr< IHaruPdf > *)jarg19;
  if (!arg19) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHaruPdf > & type is null", 0);
    return ;
  } 
  arg20 = (SyncedPtr< IRayTracer > *)jarg20;
  if (!arg20) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IRayTracer > & type is null", 0);
    return ;
  } 
  arg21 = (SyncedPtr< IPbrt > *)jarg21;
  if (!arg21) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPbrt > & type is null", 0);
    return ;
  } 
  arg22 = (SyncedPtr< IPythonScriptEngine > *)jarg22;
  if (!arg22) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPythonScriptEngine > & type is null", 0);
    return ;
  } 
  arg23 = (SyncedPtr< Console > *)jarg23;
  if (!arg23) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14,*arg15,*arg16,*arg17,*arg18,*arg19,*arg20,*arg21,*arg22,*arg23);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_Init(void * jarg1, void * jarg2) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  D3dStartupSettings *arg2 = (D3dStartupSettings *) 0 ;
  Result result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (D3dStartupSettings *)jarg2; 
  result = (arg1)->Init((D3dStartupSettings const *)arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_Render(void * jarg1) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  (arg1)->Render();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDirect3D_CastRayTo(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4; 
  result = (bool)(arg1)->CastRayTo((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDirect3D_CastRayDir(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4; 
  result = (bool)(arg1)->CastRayDir((Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_TakeScreenShots(void * jarg1, void * jarg2, void * jarg3) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  FilePath *arg2 = 0 ;
  D3DX_IMAGE_FILEFORMAT arg3 ;
  D3DX_IMAGE_FILEFORMAT *argp3 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = new FilePath((char*)jarg2); 
  argp3 = (D3DX_IMAGE_FILEFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null D3DX_IMAGE_FILEFORMAT", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->TakeScreenShots((FilePath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_GetEnabledLights(void * jarg1, void * jarg2) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  std::list< ILight * > *arg2 = (std::list< ILight * > *) 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (std::list< ILight * > *)jarg2; 
  (arg1)->GetEnabledLights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_RemoveAllLights(void * jarg1) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  (arg1)->RemoveAllLights();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_GetOutputWindows(void * jarg1) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  std::list< IOutputWindow * > *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  result = (std::list< IOutputWindow * > *) &((IDirect3D const *)arg1)->GetOutputWindows();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_CreateOutputWindow(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  IOutputWindow::Settings *arg2 = (IOutputWindow::Settings *) 0 ;
  IOutputWindow **arg3 = (IOutputWindow **) 0 ;
  Result result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (IOutputWindow::Settings *)jarg2; 
  arg3 = (IOutputWindow **)jarg3; 
  result = (arg1)->CreateOutputWindow(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_CreateWindowlessDevice(void * jarg1, void * jarg2) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  IWindowlessDevice **arg2 = (IWindowlessDevice **) 0 ;
  Result result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (IWindowlessDevice **)jarg2; 
  result = (arg1)->CreateWindowlessDevice(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_CreateCamera(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ICamera **arg5 = (ICamera **) 0 ;
  Result result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ICamera **)jarg5; 
  result = (arg1)->CreateCamera(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_CreateLight(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  ILight::LightType arg2 ;
  ILight **arg3 = (ILight **) 0 ;
  Result result;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  arg3 = (ILight **)jarg3; 
  result = (arg1)->CreateLight(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDirect3D_Release(void * jarg1) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_XCreateOutputWindow(void * jarg1, void * jarg2) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  IOutputWindow::Settings *arg2 = (IOutputWindow::Settings *) 0 ;
  IOutputWindow *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (IOutputWindow::Settings *)jarg2; 
  result = (IOutputWindow *)IDirect3D_XCreateOutputWindow(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_XCreateCamera(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ICamera *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ICamera *)IDirect3D_XCreateCamera(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDirect3D_XCreateLight(void * jarg1, int jarg2) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  ILight::LightType arg2 ;
  ILight *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  arg2 = (ILight::LightType)jarg2; 
  result = (ILight *)IDirect3D_XCreateLight(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDirect3D(void * jarg1) {
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateDirect3D() {
  void * jresult ;
  LPDIRECT3D result;
  
  result = (LPDIRECT3D)CreateDirect3D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FilterDesc_id_get(void * jarg1) {
  int jresult ;
  FilterDesc *arg1 = (FilterDesc *) 0 ;
  PbrtFilterId result;
  
  arg1 = (FilterDesc *)jarg1; 
  result = (PbrtFilterId)(PbrtFilterId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FilterDesc(void * jarg1) {
  FilterDesc *arg1 = (FilterDesc *) 0 ;
  
  arg1 = (FilterDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoxFilterDesc() {
  void * jresult ;
  BoxFilterDesc *result = 0 ;
  
  result = (BoxFilterDesc *)new BoxFilterDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxFilterDesc_xwidth_set(void * jarg1, float jarg2) {
  BoxFilterDesc *arg1 = (BoxFilterDesc *) 0 ;
  float arg2 ;
  
  arg1 = (BoxFilterDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->xwidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BoxFilterDesc_xwidth_get(void * jarg1) {
  float jresult ;
  BoxFilterDesc *arg1 = (BoxFilterDesc *) 0 ;
  float result;
  
  arg1 = (BoxFilterDesc *)jarg1; 
  result = (float) ((arg1)->xwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxFilterDesc_ywidth_set(void * jarg1, float jarg2) {
  BoxFilterDesc *arg1 = (BoxFilterDesc *) 0 ;
  float arg2 ;
  
  arg1 = (BoxFilterDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ywidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BoxFilterDesc_ywidth_get(void * jarg1) {
  float jresult ;
  BoxFilterDesc *arg1 = (BoxFilterDesc *) 0 ;
  float result;
  
  arg1 = (BoxFilterDesc *)jarg1; 
  result = (float) ((arg1)->ywidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoxFilterDesc(void * jarg1) {
  BoxFilterDesc *arg1 = (BoxFilterDesc *) 0 ;
  
  arg1 = (BoxFilterDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FilmDesc_id_get(void * jarg1) {
  int jresult ;
  FilmDesc *arg1 = (FilmDesc *) 0 ;
  PbrtFilmId result;
  
  arg1 = (FilmDesc *)jarg1; 
  result = (PbrtFilmId)(PbrtFilmId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FilmDesc(void * jarg1) {
  FilmDesc *arg1 = (FilmDesc *) 0 ;
  
  arg1 = (FilmDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageFilmDesc() {
  void * jresult ;
  ImageFilmDesc *result = 0 ;
  
  result = (ImageFilmDesc *)new ImageFilmDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFilmDesc_filename_set(void * jarg1, void * jarg2) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  FilePath arg2 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  arg2 = String((char*)jarg2); 
  if (arg1) (arg1)->filename = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFilmDesc_filename_get(void * jarg1) {
  void * jresult ;
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  FilePath result;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  result =  ((arg1)->filename);
  jresult = new FilePath((const FilePath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFilmDesc_xresolution_set(void * jarg1, int jarg2) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xresolution = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFilmDesc_xresolution_get(void * jarg1) {
  int jresult ;
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  int result;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  result = (int) ((arg1)->xresolution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFilmDesc_yresolution_set(void * jarg1, int jarg2) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  int arg2 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yresolution = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFilmDesc_yresolution_get(void * jarg1) {
  int jresult ;
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  int result;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  result = (int) ((arg1)->yresolution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFilmDesc_display_set(void * jarg1, unsigned int jarg2) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->display = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageFilmDesc_display_get(void * jarg1) {
  unsigned int jresult ;
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  bool result;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  result = (bool) ((arg1)->display);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFilmDesc_cropwindow_set(void * jarg1, void * jarg2) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->cropwindow;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFilmDesc_cropwindow_get(void * jarg1) {
  void * jresult ;
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->cropwindow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageFilmDesc(void * jarg1) {
  ImageFilmDesc *arg1 = (ImageFilmDesc *) 0 ;
  
  arg1 = (ImageFilmDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CameraDesc_id_get(void * jarg1) {
  int jresult ;
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  PbrtCameraId result;
  
  arg1 = (CameraDesc *)jarg1; 
  result = (PbrtCameraId)(PbrtCameraId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraDesc_shutteropen_set(void * jarg1, float jarg2) {
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (CameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shutteropen = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CameraDesc_shutteropen_get(void * jarg1) {
  float jresult ;
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float result;
  
  arg1 = (CameraDesc *)jarg1; 
  result = (float) ((arg1)->shutteropen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraDesc_shutterclose_set(void * jarg1, float jarg2) {
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (CameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shutterclose = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CameraDesc_shutterclose_get(void * jarg1) {
  float jresult ;
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float result;
  
  arg1 = (CameraDesc *)jarg1; 
  result = (float) ((arg1)->shutterclose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraDesc_frameaspectratio_set(void * jarg1, float jarg2) {
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (CameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frameaspectratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CameraDesc_frameaspectratio_get(void * jarg1) {
  float jresult ;
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float result;
  
  arg1 = (CameraDesc *)jarg1; 
  result = (float) ((arg1)->frameaspectratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraDesc_screenwindow_set(void * jarg1, void * jarg2) {
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (CameraDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->screenwindow;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CameraDesc_screenwindow_get(void * jarg1) {
  void * jresult ;
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (CameraDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->screenwindow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CameraDesc(void * jarg1) {
  CameraDesc *arg1 = (CameraDesc *) 0 ;
  
  arg1 = (CameraDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerspectiveCameraDesc() {
  void * jresult ;
  PerspectiveCameraDesc *result = 0 ;
  
  result = (PerspectiveCameraDesc *)new PerspectiveCameraDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerspectiveCameraDesc_lensradius_set(void * jarg1, float jarg2) {
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lensradius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PerspectiveCameraDesc_lensradius_get(void * jarg1) {
  float jresult ;
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float result;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  result = (float) ((arg1)->lensradius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerspectiveCameraDesc_focaldistance_set(void * jarg1, float jarg2) {
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->focaldistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PerspectiveCameraDesc_focaldistance_get(void * jarg1) {
  float jresult ;
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float result;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  result = (float) ((arg1)->focaldistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerspectiveCameraDesc_fov_set(void * jarg1, float jarg2) {
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float arg2 ;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fov = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PerspectiveCameraDesc_fov_get(void * jarg1) {
  float jresult ;
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  float result;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  result = (float) ((arg1)->fov);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PerspectiveCameraDesc(void * jarg1) {
  PerspectiveCameraDesc *arg1 = (PerspectiveCameraDesc *) 0 ;
  
  arg1 = (PerspectiveCameraDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplerDesc_id_get(void * jarg1) {
  int jresult ;
  SamplerDesc *arg1 = (SamplerDesc *) 0 ;
  PbrtSamplerId result;
  
  arg1 = (SamplerDesc *)jarg1; 
  result = (PbrtSamplerId)(PbrtSamplerId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SamplerDesc(void * jarg1) {
  SamplerDesc *arg1 = (SamplerDesc *) 0 ;
  
  arg1 = (SamplerDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LowDiscrepancySamplerDesc() {
  void * jresult ;
  LowDiscrepancySamplerDesc *result = 0 ;
  
  result = (LowDiscrepancySamplerDesc *)new LowDiscrepancySamplerDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LowDiscrepancySamplerDesc_pixelsamples_set(void * jarg1, int jarg2) {
  LowDiscrepancySamplerDesc *arg1 = (LowDiscrepancySamplerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (LowDiscrepancySamplerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pixelsamples = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LowDiscrepancySamplerDesc_pixelsamples_get(void * jarg1) {
  int jresult ;
  LowDiscrepancySamplerDesc *arg1 = (LowDiscrepancySamplerDesc *) 0 ;
  int result;
  
  arg1 = (LowDiscrepancySamplerDesc *)jarg1; 
  result = (int) ((arg1)->pixelsamples);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LowDiscrepancySamplerDesc(void * jarg1) {
  LowDiscrepancySamplerDesc *arg1 = (LowDiscrepancySamplerDesc *) 0 ;
  
  arg1 = (LowDiscrepancySamplerDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SurfaceIntegratorDesc_id_get(void * jarg1) {
  int jresult ;
  SurfaceIntegratorDesc *arg1 = (SurfaceIntegratorDesc *) 0 ;
  PbrtSurfaceIntegratorId result;
  
  arg1 = (SurfaceIntegratorDesc *)jarg1; 
  result = (PbrtSurfaceIntegratorId)(PbrtSurfaceIntegratorId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SurfaceIntegratorDesc(void * jarg1) {
  SurfaceIntegratorDesc *arg1 = (SurfaceIntegratorDesc *) 0 ;
  
  arg1 = (SurfaceIntegratorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectLightingSurfaceIntegratorDesc() {
  void * jresult ;
  DirectLightingSurfaceIntegratorDesc *result = 0 ;
  
  result = (DirectLightingSurfaceIntegratorDesc *)new DirectLightingSurfaceIntegratorDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectLightingSurfaceIntegratorDesc_maxdepth_set(void * jarg1, int jarg2) {
  DirectLightingSurfaceIntegratorDesc *arg1 = (DirectLightingSurfaceIntegratorDesc *) 0 ;
  int arg2 ;
  
  arg1 = (DirectLightingSurfaceIntegratorDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxdepth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectLightingSurfaceIntegratorDesc_maxdepth_get(void * jarg1) {
  int jresult ;
  DirectLightingSurfaceIntegratorDesc *arg1 = (DirectLightingSurfaceIntegratorDesc *) 0 ;
  int result;
  
  arg1 = (DirectLightingSurfaceIntegratorDesc *)jarg1; 
  result = (int) ((arg1)->maxdepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectLightingSurfaceIntegratorDesc_strategy_set(void * jarg1, int jarg2) {
  DirectLightingSurfaceIntegratorDesc *arg1 = (DirectLightingSurfaceIntegratorDesc *) 0 ;
  enum DirectLightingSurfaceIntegratorDesc::Strategy arg2 ;
  
  arg1 = (DirectLightingSurfaceIntegratorDesc *)jarg1; 
  arg2 = (enum DirectLightingSurfaceIntegratorDesc::Strategy)jarg2; 
  if (arg1) (arg1)->strategy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectLightingSurfaceIntegratorDesc_strategy_get(void * jarg1) {
  int jresult ;
  DirectLightingSurfaceIntegratorDesc *arg1 = (DirectLightingSurfaceIntegratorDesc *) 0 ;
  enum DirectLightingSurfaceIntegratorDesc::Strategy result;
  
  arg1 = (DirectLightingSurfaceIntegratorDesc *)jarg1; 
  result = (enum DirectLightingSurfaceIntegratorDesc::Strategy) ((arg1)->strategy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectLightingSurfaceIntegratorDesc(void * jarg1) {
  DirectLightingSurfaceIntegratorDesc *arg1 = (DirectLightingSurfaceIntegratorDesc *) 0 ;
  
  arg1 = (DirectLightingSurfaceIntegratorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathSurfaceIntegratorDesc() {
  void * jresult ;
  PathSurfaceIntegratorDesc *result = 0 ;
  
  result = (PathSurfaceIntegratorDesc *)new PathSurfaceIntegratorDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathSurfaceIntegratorDesc_maxdepth_set(void * jarg1, int jarg2) {
  PathSurfaceIntegratorDesc *arg1 = (PathSurfaceIntegratorDesc *) 0 ;
  int arg2 ;
  
  arg1 = (PathSurfaceIntegratorDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxdepth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PathSurfaceIntegratorDesc_maxdepth_get(void * jarg1) {
  int jresult ;
  PathSurfaceIntegratorDesc *arg1 = (PathSurfaceIntegratorDesc *) 0 ;
  int result;
  
  arg1 = (PathSurfaceIntegratorDesc *)jarg1; 
  result = (int) ((arg1)->maxdepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PathSurfaceIntegratorDesc(void * jarg1) {
  PathSurfaceIntegratorDesc *arg1 = (PathSurfaceIntegratorDesc *) 0 ;
  
  arg1 = (PathSurfaceIntegratorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VolumeIntegratorDesc_id_get(void * jarg1) {
  int jresult ;
  VolumeIntegratorDesc *arg1 = (VolumeIntegratorDesc *) 0 ;
  PbrtVolumeIntegratorId result;
  
  arg1 = (VolumeIntegratorDesc *)jarg1; 
  result = (PbrtVolumeIntegratorId)(PbrtVolumeIntegratorId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VolumeIntegratorDesc_stepsize_set(void * jarg1, float jarg2) {
  VolumeIntegratorDesc *arg1 = (VolumeIntegratorDesc *) 0 ;
  float arg2 ;
  
  arg1 = (VolumeIntegratorDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stepsize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VolumeIntegratorDesc_stepsize_get(void * jarg1) {
  float jresult ;
  VolumeIntegratorDesc *arg1 = (VolumeIntegratorDesc *) 0 ;
  float result;
  
  arg1 = (VolumeIntegratorDesc *)jarg1; 
  result = (float) ((arg1)->stepsize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VolumeIntegratorDesc(void * jarg1) {
  VolumeIntegratorDesc *arg1 = (VolumeIntegratorDesc *) 0 ;
  
  arg1 = (VolumeIntegratorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EmissionVolumeIntegratorDesc() {
  void * jresult ;
  EmissionVolumeIntegratorDesc *result = 0 ;
  
  result = (EmissionVolumeIntegratorDesc *)new EmissionVolumeIntegratorDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EmissionVolumeIntegratorDesc(void * jarg1) {
  EmissionVolumeIntegratorDesc *arg1 = (EmissionVolumeIntegratorDesc *) 0 ;
  
  arg1 = (EmissionVolumeIntegratorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RendererDesc_id_get(void * jarg1) {
  int jresult ;
  RendererDesc *arg1 = (RendererDesc *) 0 ;
  PbrtRendererId result;
  
  arg1 = (RendererDesc *)jarg1; 
  result = (PbrtRendererId)(PbrtRendererId) ((arg1)->id);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RendererDesc(void * jarg1) {
  RendererDesc *arg1 = (RendererDesc *) 0 ;
  
  arg1 = (RendererDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MetropolisRendererDesc() {
  void * jresult ;
  MetropolisRendererDesc *result = 0 ;
  
  result = (MetropolisRendererDesc *)new MetropolisRendererDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_largestepprobability_set(void * jarg1, float jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  float arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->largestepprobability = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MetropolisRendererDesc_largestepprobability_get(void * jarg1) {
  float jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  float result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (float) ((arg1)->largestepprobability);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_samplesperpixel_set(void * jarg1, int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->samplesperpixel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetropolisRendererDesc_samplesperpixel_get(void * jarg1) {
  int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (int) ((arg1)->samplesperpixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_bootstrapsamples_set(void * jarg1, int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bootstrapsamples = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetropolisRendererDesc_bootstrapsamples_get(void * jarg1) {
  int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (int) ((arg1)->bootstrapsamples);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_directsamples_set(void * jarg1, int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->directsamples = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetropolisRendererDesc_directsamples_get(void * jarg1) {
  int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (int) ((arg1)->directsamples);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_maxconsecutiverejects_set(void * jarg1, int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxconsecutiverejects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetropolisRendererDesc_maxconsecutiverejects_get(void * jarg1) {
  int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (int) ((arg1)->maxconsecutiverejects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_maxdepth_set(void * jarg1, int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxdepth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MetropolisRendererDesc_maxdepth_get(void * jarg1) {
  int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  int result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (int) ((arg1)->maxdepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_dodirectseparately_set(void * jarg1, unsigned int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dodirectseparately = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MetropolisRendererDesc_dodirectseparately_get(void * jarg1) {
  unsigned int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  bool result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (bool) ((arg1)->dodirectseparately);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MetropolisRendererDesc_bidirectional_set(void * jarg1, unsigned int jarg2) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bidirectional = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MetropolisRendererDesc_bidirectional_get(void * jarg1) {
  unsigned int jresult ;
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  bool result;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  result = (bool) ((arg1)->bidirectional);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MetropolisRendererDesc(void * jarg1) {
  MetropolisRendererDesc *arg1 = (MetropolisRendererDesc *) 0 ;
  
  arg1 = (MetropolisRendererDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SamplerRendererDesc() {
  void * jresult ;
  SamplerRendererDesc *result = 0 ;
  
  result = (SamplerRendererDesc *)new SamplerRendererDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplerRendererDesc_sampler_set(void * jarg1, void * jarg2) {
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  SamplerDesc *arg2 = (SamplerDesc *) 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  arg2 = (SamplerDesc *)jarg2; 
  if (arg1) (arg1)->sampler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SamplerRendererDesc_sampler_get(void * jarg1) {
  void * jresult ;
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  SamplerDesc *result = 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  result = (SamplerDesc *) ((arg1)->sampler);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplerRendererDesc_surfaceintegrator_set(void * jarg1, void * jarg2) {
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  SurfaceIntegratorDesc *arg2 = (SurfaceIntegratorDesc *) 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  arg2 = (SurfaceIntegratorDesc *)jarg2; 
  if (arg1) (arg1)->surfaceintegrator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SamplerRendererDesc_surfaceintegrator_get(void * jarg1) {
  void * jresult ;
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  SurfaceIntegratorDesc *result = 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  result = (SurfaceIntegratorDesc *) ((arg1)->surfaceintegrator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplerRendererDesc_volumeintegrator_set(void * jarg1, void * jarg2) {
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  VolumeIntegratorDesc *arg2 = (VolumeIntegratorDesc *) 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  arg2 = (VolumeIntegratorDesc *)jarg2; 
  if (arg1) (arg1)->volumeintegrator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SamplerRendererDesc_volumeintegrator_get(void * jarg1) {
  void * jresult ;
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  VolumeIntegratorDesc *result = 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  result = (VolumeIntegratorDesc *) ((arg1)->volumeintegrator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplerRendererDesc_visualizeobjectids_set(void * jarg1, unsigned int jarg2) {
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->visualizeobjectids = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplerRendererDesc_visualizeobjectids_get(void * jarg1) {
  unsigned int jresult ;
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  bool result;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  result = (bool) ((arg1)->visualizeobjectids);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SamplerRendererDesc(void * jarg1) {
  SamplerRendererDesc *arg1 = (SamplerRendererDesc *) 0 ;
  
  arg1 = (SamplerRendererDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPbrt_Sync(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, void * jarg18, void * jarg19, void * jarg20, void * jarg21, void * jarg22, void * jarg23) {
  IPbrt *arg1 = (IPbrt *) 0 ;
  SyncedPtr< Engine > *arg2 = 0 ;
  SyncedPtr< IDirect3D > *arg3 = 0 ;
  SyncedPtr< IOpenGL > *arg4 = 0 ;
  SyncedPtr< IHavok > *arg5 = 0 ;
  SyncedPtr< IGuiFactory > *arg6 = 0 ;
  SyncedPtr< IForms > *arg7 = 0 ;
  SyncedPtr< IDirectIpt > *arg8 = 0 ;
  SyncedPtr< IWinIpt > *arg9 = 0 ;
  SyncedPtr< IFFmpeg > *arg10 = 0 ;
  SyncedPtr< ICryptoPP > *arg11 = 0 ;
  SyncedPtr< IID3Lib > *arg12 = 0 ;
  SyncedPtr< IWinAudio > *arg13 = 0 ;
  SyncedPtr< IXAudio2 > *arg14 = 0 ;
  SyncedPtr< IWinMidi > *arg15 = 0 ;
  SyncedPtr< IWinSock > *arg16 = 0 ;
  SyncedPtr< IAsyncWorkers > *arg17 = 0 ;
  SyncedPtr< ISQLite > *arg18 = 0 ;
  SyncedPtr< IHaruPdf > *arg19 = 0 ;
  SyncedPtr< IRayTracer > *arg20 = 0 ;
  SyncedPtr< IPbrt > *arg21 = 0 ;
  SyncedPtr< IPythonScriptEngine > *arg22 = 0 ;
  SyncedPtr< Console > *arg23 = 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  arg2 = (SyncedPtr< Engine > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Engine > & type is null", 0);
    return ;
  } 
  arg3 = (SyncedPtr< IDirect3D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirect3D > & type is null", 0);
    return ;
  } 
  arg4 = (SyncedPtr< IOpenGL > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IOpenGL > & type is null", 0);
    return ;
  } 
  arg5 = (SyncedPtr< IHavok > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHavok > & type is null", 0);
    return ;
  } 
  arg6 = (SyncedPtr< IGuiFactory > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IGuiFactory > & type is null", 0);
    return ;
  } 
  arg7 = (SyncedPtr< IForms > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IForms > & type is null", 0);
    return ;
  } 
  arg8 = (SyncedPtr< IDirectIpt > *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IDirectIpt > & type is null", 0);
    return ;
  } 
  arg9 = (SyncedPtr< IWinIpt > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinIpt > & type is null", 0);
    return ;
  } 
  arg10 = (SyncedPtr< IFFmpeg > *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IFFmpeg > & type is null", 0);
    return ;
  } 
  arg11 = (SyncedPtr< ICryptoPP > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ICryptoPP > & type is null", 0);
    return ;
  } 
  arg12 = (SyncedPtr< IID3Lib > *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IID3Lib > & type is null", 0);
    return ;
  } 
  arg13 = (SyncedPtr< IWinAudio > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinAudio > & type is null", 0);
    return ;
  } 
  arg14 = (SyncedPtr< IXAudio2 > *)jarg14;
  if (!arg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IXAudio2 > & type is null", 0);
    return ;
  } 
  arg15 = (SyncedPtr< IWinMidi > *)jarg15;
  if (!arg15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinMidi > & type is null", 0);
    return ;
  } 
  arg16 = (SyncedPtr< IWinSock > *)jarg16;
  if (!arg16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IWinSock > & type is null", 0);
    return ;
  } 
  arg17 = (SyncedPtr< IAsyncWorkers > *)jarg17;
  if (!arg17) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IAsyncWorkers > & type is null", 0);
    return ;
  } 
  arg18 = (SyncedPtr< ISQLite > *)jarg18;
  if (!arg18) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< ISQLite > & type is null", 0);
    return ;
  } 
  arg19 = (SyncedPtr< IHaruPdf > *)jarg19;
  if (!arg19) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IHaruPdf > & type is null", 0);
    return ;
  } 
  arg20 = (SyncedPtr< IRayTracer > *)jarg20;
  if (!arg20) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IRayTracer > & type is null", 0);
    return ;
  } 
  arg21 = (SyncedPtr< IPbrt > *)jarg21;
  if (!arg21) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPbrt > & type is null", 0);
    return ;
  } 
  arg22 = (SyncedPtr< IPythonScriptEngine > *)jarg22;
  if (!arg22) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< IPythonScriptEngine > & type is null", 0);
    return ;
  } 
  arg23 = (SyncedPtr< Console > *)jarg23;
  if (!arg23) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14,*arg15,*arg16,*arg17,*arg18,*arg19,*arg20,*arg21,*arg22,*arg23);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPbrt_CreateDirectRenderView(void * jarg1, void * jarg2) {
  void * jresult ;
  IPbrt *arg1 = (IPbrt *) 0 ;
  IOutputWindow *arg2 = (IOutputWindow *) 0 ;
  Result result;
  
  arg1 = (IPbrt *)jarg1; 
  arg2 = (IOutputWindow *)jarg2; 
  result = (arg1)->CreateDirectRenderView(arg2);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPbrt_RemoveDirectRenderView(void * jarg1) {
  IPbrt *arg1 = (IPbrt *) 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  (arg1)->RemoveDirectRenderView();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPbrt_Render__SWIG_0(void * jarg1) {
  IPbrt *arg1 = (IPbrt *) 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  (arg1)->Render();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPbrt_Render__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  IPbrt *arg1 = (IPbrt *) 0 ;
  IOutputWindow *arg2 = (IOutputWindow *) 0 ;
  FilterDesc *arg3 = (FilterDesc *) 0 ;
  RendererDesc *arg4 = (RendererDesc *) 0 ;
  Result result;
  
  arg1 = (IPbrt *)jarg1; 
  arg2 = (IOutputWindow *)jarg2; 
  arg3 = (FilterDesc *)jarg3; 
  arg4 = (RendererDesc *)jarg4; 
  result = (arg1)->Render(arg2,(FilterDesc const *)arg3,(RendererDesc const *)arg4);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPbrt_Release(void * jarg1) {
  IPbrt *arg1 = (IPbrt *) 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPbrt(void * jarg1) {
  IPbrt *arg1 = (IPbrt *) 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RedirectStdOut(void * jarg1) {
  String *arg1 = 0 ;
  
  arg1 = new String((char*)jarg1); 
  RedirectStdOut((String const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreatePbrt() {
  void * jresult ;
  LPPBRT result;
  
  result = (LPPBRT)CreatePbrt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dMeshShapeDesc_SWIGUpcast(D3dMeshShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dPlaneShapeDesc_SWIGUpcast(D3dPlaneShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dBoxShapeDesc_SWIGUpcast(D3dBoxShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dSphereShapeDesc_SWIGUpcast(D3dSphereShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dCapsuleShapeDesc_SWIGUpcast(D3dCapsuleShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dCylinderShapeDesc_SWIGUpcast(D3dCylinderShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT D3dShapeDesc * SWIGSTDCALL CSharp_D3dConeShapeDesc_SWIGUpcast(D3dConeShapeDesc *jarg1) {
    return (D3dShapeDesc *)jarg1;
}

SWIGEXPORT IMoveable * SWIGSTDCALL CSharp_IRenderable_SWIGUpcast(IRenderable *jarg1) {
    return (IMoveable *)jarg1;
}

SWIGEXPORT IRenderable * SWIGSTDCALL CSharp_IObject_SWIGUpcast(IObject *jarg1) {
    return (IRenderable *)jarg1;
}

SWIGEXPORT IRenderable * SWIGSTDCALL CSharp_ICamera_SWIGUpcast(ICamera *jarg1) {
    return (IRenderable *)jarg1;
}

SWIGEXPORT IMoveable * SWIGSTDCALL CSharp_ILight_SWIGUpcast(ILight *jarg1) {
    return (IMoveable *)jarg1;
}

SWIGEXPORT IRenderable * SWIGSTDCALL CSharp_ISpriteContainer_SWIGUpcast(ISpriteContainer *jarg1) {
    return (IRenderable *)jarg1;
}

SWIGEXPORT IElement * SWIGSTDCALL CSharp_IImageElement_SWIGUpcast(IImageElement *jarg1) {
    return (IElement *)jarg1;
}

SWIGEXPORT IElement * SWIGSTDCALL CSharp_ITextElement_SWIGUpcast(ITextElement *jarg1) {
    return (IElement *)jarg1;
}

SWIGEXPORT IRenderable * SWIGSTDCALL CSharp_IHUD_SWIGUpcast(IHUD *jarg1) {
    return (IRenderable *)jarg1;
}

SWIGEXPORT FilterDesc * SWIGSTDCALL CSharp_BoxFilterDesc_SWIGUpcast(BoxFilterDesc *jarg1) {
    return (FilterDesc *)jarg1;
}

SWIGEXPORT FilmDesc * SWIGSTDCALL CSharp_ImageFilmDesc_SWIGUpcast(ImageFilmDesc *jarg1) {
    return (FilmDesc *)jarg1;
}

SWIGEXPORT CameraDesc * SWIGSTDCALL CSharp_PerspectiveCameraDesc_SWIGUpcast(PerspectiveCameraDesc *jarg1) {
    return (CameraDesc *)jarg1;
}

SWIGEXPORT SamplerDesc * SWIGSTDCALL CSharp_LowDiscrepancySamplerDesc_SWIGUpcast(LowDiscrepancySamplerDesc *jarg1) {
    return (SamplerDesc *)jarg1;
}

SWIGEXPORT SurfaceIntegratorDesc * SWIGSTDCALL CSharp_DirectLightingSurfaceIntegratorDesc_SWIGUpcast(DirectLightingSurfaceIntegratorDesc *jarg1) {
    return (SurfaceIntegratorDesc *)jarg1;
}

SWIGEXPORT SurfaceIntegratorDesc * SWIGSTDCALL CSharp_PathSurfaceIntegratorDesc_SWIGUpcast(PathSurfaceIntegratorDesc *jarg1) {
    return (SurfaceIntegratorDesc *)jarg1;
}

SWIGEXPORT VolumeIntegratorDesc * SWIGSTDCALL CSharp_EmissionVolumeIntegratorDesc_SWIGUpcast(EmissionVolumeIntegratorDesc *jarg1) {
    return (VolumeIntegratorDesc *)jarg1;
}

SWIGEXPORT RendererDesc * SWIGSTDCALL CSharp_MetropolisRendererDesc_SWIGUpcast(MetropolisRendererDesc *jarg1) {
    return (RendererDesc *)jarg1;
}

SWIGEXPORT RendererDesc * SWIGSTDCALL CSharp_SamplerRendererDesc_SWIGUpcast(SamplerRendererDesc *jarg1) {
    return (RendererDesc *)jarg1;
}

#ifdef __cplusplus
}
#endif

