//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ICamera : IRenderable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ICamera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IronSightEnginePINVOKE.ICamera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ICamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICamera() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_ICamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ICamera.ViewMode viewmode {
    set {
      IronSightEnginePINVOKE.ICamera_viewmode_set(swigCPtr, (int)value);
    } 
    get {
      ICamera.ViewMode ret = (ICamera.ViewMode)IronSightEnginePINVOKE.ICamera_viewmode_get(swigCPtr);
      return ret;
    } 
  }

  public OrientationMode orientmode {
    set {
      IronSightEnginePINVOKE.ICamera_orientmode_set(swigCPtr, (int)value);
    } 
    get {
      OrientationMode ret = (OrientationMode)IronSightEnginePINVOKE.ICamera_orientmode_get(swigCPtr);
      return ret;
    } 
  }

  public Matrix transform {
    set {
      IronSightEnginePINVOKE.ICamera_transform_set(swigCPtr, Matrix.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_transform_get(swigCPtr);
      Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
      return ret;
    } 
  }

  public Vector3 pos {
    set {
      IronSightEnginePINVOKE.ICamera_pos_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_pos_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 rot {
    set {
      IronSightEnginePINVOKE.ICamera_rot_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_rot_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Quaternion qrot {
    set {
      IronSightEnginePINVOKE.ICamera_qrot_set(swigCPtr, Quaternion.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_qrot_get(swigCPtr);
      Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
      return ret;
    } 
  }

  public virtual void UpdateMatrices() {
    IronSightEnginePINVOKE.ICamera_UpdateMatrices(swigCPtr);
  }

  public virtual void SetClipNear(float clipnear) {
    IronSightEnginePINVOKE.ICamera_SetClipNear(swigCPtr, clipnear);
  }

  public virtual void SetClipFar(float clipfar) {
    IronSightEnginePINVOKE.ICamera_SetClipFar(swigCPtr, clipfar);
  }

  public virtual void SetPlayerModel(IObject obj, SWIGTYPE_p_LPRAGDOLLENTITY ragdoll) {
    IronSightEnginePINVOKE.ICamera_SetPlayerModel__SWIG_0(swigCPtr, IObject.getCPtr(obj), SWIGTYPE_p_LPRAGDOLLENTITY.getCPtr(ragdoll));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetPlayerModel(IObject obj) {
    IronSightEnginePINVOKE.ICamera_SetPlayerModel__SWIG_1(swigCPtr, IObject.getCPtr(obj));
  }

  public virtual void SetPerspectiveProjection(float fov) {
    IronSightEnginePINVOKE.ICamera_SetPerspectiveProjection(swigCPtr, fov);
  }

  public virtual void SetOrthogonalProjection(float width, float height) {
    IronSightEnginePINVOKE.ICamera_SetOrthogonalProjection(swigCPtr, width, height);
  }

  public virtual SWIGTYPE_p_Frustum GetViewFrustum() {
    SWIGTYPE_p_Frustum ret = new SWIGTYPE_p_Frustum(IronSightEnginePINVOKE.ICamera_GetViewFrustum(swigCPtr), false);
    return ret;
  }

  public virtual Matrix GetViewMatrix() {
    Matrix ret = new Matrix(IronSightEnginePINVOKE.ICamera_GetViewMatrix(swigCPtr), false);
    return ret;
  }

  public virtual Matrix GetProjMatrix() {
    Matrix ret = new Matrix(IronSightEnginePINVOKE.ICamera_GetProjMatrix(swigCPtr), false);
    return ret;
  }

  public virtual Matrix GetViewProjMatrix() {
    Matrix ret = new Matrix(IronSightEnginePINVOKE.ICamera_GetViewProjMatrix(swigCPtr), false);
    return ret;
  }

  public virtual Vector3 ComputeViewDir(Vector3 vdir) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_ComputeViewDir(swigCPtr, Vector3.getCPtr(vdir));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public virtual Vector3 ComputePixelDir(PointI pixelpos, Vector3 vdir) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.ICamera_ComputePixelDir(swigCPtr, PointI.getCPtr(pixelpos), Vector3.getCPtr(vdir));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ViewMode {
    VM_DEFAULT,
    VM_FLY,
    VM_FIRSTPERSON,
    VM_THIRDPERSON
  }

}
