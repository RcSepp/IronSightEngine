//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Direct3D : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Direct3D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Direct3D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Direct3D() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_Direct3D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Direct3D() : this(IronSightEnginePINVOKE.new_Direct3D__SWIG_0(), true) {
  }

  public Direct3D(IDirect3D src) : this(IronSightEnginePINVOKE.new_Direct3D__SWIG_1(IDirect3D.getCPtr(src)), true) {
  }

  public IDirect3D __deref__() {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.Direct3D___deref__(swigCPtr);
    IDirect3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDirect3D(cPtr, false);
    return ret;
  }

  public bool IsFullscreen() {
    bool ret = IronSightEnginePINVOKE.Direct3D_IsFullscreen(swigCPtr);
    return ret;
  }

  public void Sync(EnginePtr exeeng, Direct3D exed3d, OpenGL exeogl, Havok exehvk, GuiFactory exegui, Forms exefms, DirectIpt exedip, WinIpt exewip, FFmpeg exeffm, CryptoPP execpp, ID3Lib exeid3, WinAudio exewad, XAudio2 exexa2, WinMidi exemid, WinSock exewsk, AsyncWorkers exeaws, SQLite exesql, HaruPdf exepdf, RayTracer exertr, Pbrt exepbrt, PythonScriptEngine exepse, Console execle) {
    IronSightEnginePINVOKE.Direct3D_Sync(swigCPtr, EnginePtr.getCPtr(exeeng), Direct3D.getCPtr(exed3d), OpenGL.getCPtr(exeogl), Havok.getCPtr(exehvk), GuiFactory.getCPtr(exegui), Forms.getCPtr(exefms), DirectIpt.getCPtr(exedip), WinIpt.getCPtr(exewip), FFmpeg.getCPtr(exeffm), CryptoPP.getCPtr(execpp), ID3Lib.getCPtr(exeid3), WinAudio.getCPtr(exewad), XAudio2.getCPtr(exexa2), WinMidi.getCPtr(exemid), WinSock.getCPtr(exewsk), AsyncWorkers.getCPtr(exeaws), SQLite.getCPtr(exesql), HaruPdf.getCPtr(exepdf), RayTracer.getCPtr(exertr), Pbrt.getCPtr(exepbrt), PythonScriptEngine.getCPtr(exepse), Console.getCPtr(execle));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Result Init(D3dStartupSettings settings) {
		Result ret = new Result(IronSightEnginePINVOKE.Direct3D_Init(swigCPtr, D3dStartupSettings.getCPtr(settings)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public void Render() {
    IronSightEnginePINVOKE.Direct3D_Render(swigCPtr);
  }

  public bool CastRayTo(Vector3 src, Vector3 dest, SWIGTYPE_p_float dist) {
    bool ret = IronSightEnginePINVOKE.Direct3D_CastRayTo(swigCPtr, Vector3.getCPtr(src), Vector3.getCPtr(dest), SWIGTYPE_p_float.getCPtr(dist));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CastRayDir(Vector3 src, Vector3 dir, SWIGTYPE_p_float dist) {
    bool ret = IronSightEnginePINVOKE.Direct3D_CastRayDir(swigCPtr, Vector3.getCPtr(src), Vector3.getCPtr(dir), SWIGTYPE_p_float.getCPtr(dist));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TakeScreenShots(/*cstype*/ string filename, SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT fileformat) {
    IronSightEnginePINVOKE.Direct3D_TakeScreenShots(swigCPtr, new IronSightEnginePINVOKE.SWIGStringMarshal(filename).swigCPtr, SWIGTYPE_p_D3DX_IMAGE_FILEFORMAT.getCPtr(fileformat));
    if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetEnabledLights(SWIGTYPE_p_std__listT_ILight_p_t lights) {
    IronSightEnginePINVOKE.Direct3D_GetEnabledLights(swigCPtr, SWIGTYPE_p_std__listT_ILight_p_t.getCPtr(lights));
  }

  public void RemoveAllLights() {
    IronSightEnginePINVOKE.Direct3D_RemoveAllLights(swigCPtr);
  }

  public SWIGTYPE_p_std__listT_IOutputWindow_p_t GetOutputWindows() {
    SWIGTYPE_p_std__listT_IOutputWindow_p_t ret = new SWIGTYPE_p_std__listT_IOutputWindow_p_t(IronSightEnginePINVOKE.Direct3D_GetOutputWindows(swigCPtr), false);
    return ret;
  }

  public Result CreateOutputWindow(IOutputWindow.Settings settings, SWIGTYPE_p_p_IOutputWindow wnd) {
		Result ret = new Result(IronSightEnginePINVOKE.Direct3D_CreateOutputWindow(swigCPtr, IOutputWindow.Settings.getCPtr(settings), SWIGTYPE_p_p_IOutputWindow.getCPtr(wnd)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public Result CreateWindowlessDevice(SWIGTYPE_p_p_IWindowlessDevice wldev) {
		Result ret = new Result(IronSightEnginePINVOKE.Direct3D_CreateWindowlessDevice(swigCPtr, SWIGTYPE_p_p_IWindowlessDevice.getCPtr(wldev)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public Result CreateCamera(float fov, float clipnear, float clipfar, SWIGTYPE_p_p_ICamera cam) {
		Result ret = new Result(IronSightEnginePINVOKE.Direct3D_CreateCamera(swigCPtr, fov, clipnear, clipfar, SWIGTYPE_p_p_ICamera.getCPtr(cam)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public Result CreateLight(ILight.LightType type, SWIGTYPE_p_p_ILight light) {
		Result ret = new Result(IronSightEnginePINVOKE.Direct3D_CreateLight(swigCPtr, (int)type, SWIGTYPE_p_p_ILight.getCPtr(light)), true);
		//
		if (IronSightEnginePINVOKE.SWIGPendingException.Pending) throw IronSightEnginePINVOKE.SWIGPendingException.Retrieve();
		return ret;
	}

  public void Release() {
    IronSightEnginePINVOKE.Direct3D_Release(swigCPtr);
  }

  public IOutputWindow XCreateOutputWindow(IOutputWindow.Settings settings) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.Direct3D_XCreateOutputWindow(swigCPtr, IOutputWindow.Settings.getCPtr(settings));
    IOutputWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOutputWindow(cPtr, false);
    return ret;
  }

  public ICamera XCreateCamera(float fov, float clipnear, float clipfar) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.Direct3D_XCreateCamera(swigCPtr, fov, clipnear, clipfar);
    ICamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICamera(cPtr, false);
    return ret;
  }

  public ILight XCreateLight(ILight.LightType type) {
    global::System.IntPtr cPtr = IronSightEnginePINVOKE.Direct3D_XCreateLight(swigCPtr, (int)type);
    ILight ret = (cPtr == global::System.IntPtr.Zero) ? null : new ILight(cPtr, false);
    return ret;
  }

}
