//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IElement : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IElement(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IElement() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IronSightEnginePINVOKE.delete_IElement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool visible {
    set {
      IronSightEnginePINVOKE.IElement_visible_set(swigCPtr, value);
    } 
    get {
      bool ret = IronSightEnginePINVOKE.IElement_visible_get(swigCPtr);
      return ret;
    } 
  }

  public Color color {
    set {
      IronSightEnginePINVOKE.IElement_color_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IElement_color_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public int zorder {
    get {
      int ret = IronSightEnginePINVOKE.IElement_zorder_get(swigCPtr);
      return ret;
    } 
  }

  public IHUD.ElementType type {
    get {
      IHUD.ElementType ret = (IHUD.ElementType)IronSightEnginePINVOKE.IElement_type_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void user {
    set {
      IronSightEnginePINVOKE.IElement_user_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = IronSightEnginePINVOKE.IElement_user_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public virtual int GetX() {
    int ret = IronSightEnginePINVOKE.IElement_GetX(swigCPtr);
    return ret;
  }

  public virtual int SetX(int val) {
    int ret = IronSightEnginePINVOKE.IElement_SetX(swigCPtr, val);
    return ret;
  }

  public int x {
    set {
      IronSightEnginePINVOKE.IElement_x_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.IElement_x_get(swigCPtr);
      return ret;
    } 
  }

  public virtual int GetY() {
    int ret = IronSightEnginePINVOKE.IElement_GetY(swigCPtr);
    return ret;
  }

  public virtual int SetY(int val) {
    int ret = IronSightEnginePINVOKE.IElement_SetY(swigCPtr, val);
    return ret;
  }

  public int y {
    set {
      IronSightEnginePINVOKE.IElement_y_set(swigCPtr, value);
    } 
    get {
      int ret = IronSightEnginePINVOKE.IElement_y_get(swigCPtr);
      return ret;
    } 
  }

  public virtual DockType GetDock() {
    DockType ret = (DockType)IronSightEnginePINVOKE.IElement_GetDock(swigCPtr);
    return ret;
  }

  public virtual DockType SetDock(DockType val) {
    DockType ret = (DockType)IronSightEnginePINVOKE.IElement_SetDock(swigCPtr, (int)val);
    return ret;
  }

  public DockType dock {
    set {
      IronSightEnginePINVOKE.IElement_dock_set(swigCPtr, (int)value);
    } 
    get {
      DockType ret = (DockType)IronSightEnginePINVOKE.IElement_dock_get(swigCPtr);
      return ret;
    } 
  }

  public class CompareFunctor : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal CompareFunctor(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CompareFunctor obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~CompareFunctor() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            IronSightEnginePINVOKE.delete_IElement_CompareFunctor(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public CompareFunctor() : this(IronSightEnginePINVOKE.new_IElement_CompareFunctor(), true) {
    }
  
  }

}
