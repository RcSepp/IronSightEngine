//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ISMath {
  public static float saturate(float val) {
    float ret = ISMathPINVOKE.saturate(val);
    return ret;
  }

  public static Vector2 Vec2Set(Vector2 vout, float x, float y) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Set__SWIG_0(Vector2.getCPtr(vout), x, y);
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2Set(Vector2 vout, SWIGTYPE_p_float xy) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Set__SWIG_1(Vector2.getCPtr(vout), SWIGTYPE_p_float.getCPtr(xy));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Set(Vector3 vout, float x, float y, float z) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Set__SWIG_0(Vector3.getCPtr(vout), x, y, z);
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Set(Vector3 vout, SWIGTYPE_p_float xyz) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Set__SWIG_1(Vector3.getCPtr(vout), SWIGTYPE_p_float.getCPtr(xyz));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Set(SWIGTYPE_p_Vector4 vout, float x, float y, float z, float w) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Set__SWIG_0(SWIGTYPE_p_Vector4.getCPtr(vout), x, y, z, w);
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Set(SWIGTYPE_p_Vector4 vout, SWIGTYPE_p_float xyzw) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Set__SWIG_1(SWIGTYPE_p_Vector4.getCPtr(vout), SWIGTYPE_p_float.getCPtr(xyzw));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static Color ClrSet(Color cout, float r, float g, float b, float a) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSet__SWIG_0(Color.getCPtr(cout), r, g, b, a);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrSet(Color cout, float r, float g, float b) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSet__SWIG_1(Color.getCPtr(cout), r, g, b);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrSet(Color cout, SWIGTYPE_p_float rgba) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSet__SWIG_2(Color.getCPtr(cout), SWIGTYPE_p_float.getCPtr(rgba));
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Color3 ClrSet(SWIGTYPE_p_Color3 cout, float r, float g, float b) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSet__SWIG_3(SWIGTYPE_p_Color3.getCPtr(cout), r, g, b);
    SWIGTYPE_p_Color3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Color3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Color3 ClrSet(SWIGTYPE_p_Color3 cout, SWIGTYPE_p_float rgb) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSet__SWIG_4(SWIGTYPE_p_Color3.getCPtr(cout), SWIGTYPE_p_float.getCPtr(rgb));
    SWIGTYPE_p_Color3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Color3(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionSet(Quaternion qout, float x, float y, float z, float w) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionSet__SWIG_0(Quaternion.getCPtr(qout), x, y, z, w);
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionSet(Quaternion qout, SWIGTYPE_p_float xyzw) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionSet__SWIG_1(Quaternion.getCPtr(qout), SWIGTYPE_p_float.getCPtr(xyzw));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Color ClrClone(Color cout, Color c0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrClone__SWIG_0(Color.getCPtr(cout), Color.getCPtr(c0));
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Color3 ClrClone(SWIGTYPE_p_Color3 cout, SWIGTYPE_p_Color3 c0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrClone__SWIG_1(SWIGTYPE_p_Color3.getCPtr(cout), SWIGTYPE_p_Color3.getCPtr(c0));
    SWIGTYPE_p_Color3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Color3(cPtr, false);
    return ret;
  }

  public static float Vec2Dot(Vector2 v0, Vector2 v1) {
    float ret = ISMathPINVOKE.Vec2Dot(Vector2.getCPtr(v0), Vector2.getCPtr(v1));
    return ret;
  }

  public static float Vec3Dot(Vector3 v0, Vector3 v1) {
    float ret = ISMathPINVOKE.Vec3Dot(Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    return ret;
  }

  public static float Vec4Dot(SWIGTYPE_p_Vector4 v0, SWIGTYPE_p_Vector4 v1) {
    float ret = ISMathPINVOKE.Vec4Dot(SWIGTYPE_p_Vector4.getCPtr(v0), SWIGTYPE_p_Vector4.getCPtr(v1));
    return ret;
  }

  public static Vector3 Vec3Cross(Vector3 vResult, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Cross(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Reflect(Vector3 vResult, Vector3 n, Vector3 v) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Reflect(Vector3.getCPtr(vResult), Vector3.getCPtr(n), Vector3.getCPtr(v));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Refract(Vector3 vResult, Vector3 n, Vector3 v, float ratio) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Refract(Vector3.getCPtr(vResult), Vector3.getCPtr(n), Vector3.getCPtr(v), ratio);
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector2 GetUV(Vector2 t0, Vector2 t1, Vector2 t2, Vector2 tP, Vector2 uv) {
    global::System.IntPtr cPtr = ISMathPINVOKE.GetUV(Vector2.getCPtr(t0), Vector2.getCPtr(t1), Vector2.getCPtr(t2), Vector2.getCPtr(tP), Vector2.getCPtr(uv));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    if (ISMathPINVOKE.SWIGPendingException.Pending) throw ISMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Vec2Length(Vector2 v0) {
    float ret = ISMathPINVOKE.Vec2Length__SWIG_0(Vector2.getCPtr(v0));
    return ret;
  }

  public static float Vec2Length(float x, float y) {
    float ret = ISMathPINVOKE.Vec2Length__SWIG_1(x, y);
    return ret;
  }

  public static float Vec3Length(Vector3 v0) {
    float ret = ISMathPINVOKE.Vec3Length__SWIG_0(Vector3.getCPtr(v0));
    return ret;
  }

  public static float Vec3Length(float x, float y, float z) {
    float ret = ISMathPINVOKE.Vec3Length__SWIG_1(x, y, z);
    return ret;
  }

  public static float Vec4Length(SWIGTYPE_p_Vector4 v0) {
    float ret = ISMathPINVOKE.Vec4Length__SWIG_0(SWIGTYPE_p_Vector4.getCPtr(v0));
    return ret;
  }

  public static float Vec4Length(float x, float y, float z, float w) {
    float ret = ISMathPINVOKE.Vec4Length__SWIG_1(x, y, z, w);
    return ret;
  }

  public static float Vec2LengthSq(Vector2 v0) {
    float ret = ISMathPINVOKE.Vec2LengthSq__SWIG_0(Vector2.getCPtr(v0));
    return ret;
  }

  public static float Vec2LengthSq(float x, float y) {
    float ret = ISMathPINVOKE.Vec2LengthSq__SWIG_1(x, y);
    return ret;
  }

  public static float Vec3LengthSq(Vector3 v0) {
    float ret = ISMathPINVOKE.Vec3LengthSq__SWIG_0(Vector3.getCPtr(v0));
    return ret;
  }

  public static float Vec3LengthSq(float x, float y, float z) {
    float ret = ISMathPINVOKE.Vec3LengthSq__SWIG_1(x, y, z);
    return ret;
  }

  public static float Vec4LengthSq(SWIGTYPE_p_Vector4 v0) {
    float ret = ISMathPINVOKE.Vec4LengthSq__SWIG_0(SWIGTYPE_p_Vector4.getCPtr(v0));
    return ret;
  }

  public static float Vec4LengthSq(float x, float y, float z, float w) {
    float ret = ISMathPINVOKE.Vec4LengthSq__SWIG_1(x, y, z, w);
    return ret;
  }

  public static Vector2 Vec2Inverse(Vector2 vResult, Vector2 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Inverse(Vector2.getCPtr(vResult), Vector2.getCPtr(v0));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Inverse(Vector3 vResult, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Inverse(Vector3.getCPtr(vResult), Vector3.getCPtr(v0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Inverse(SWIGTYPE_p_Vector4 vResult, SWIGTYPE_p_Vector4 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Inverse(SWIGTYPE_p_Vector4.getCPtr(vResult), SWIGTYPE_p_Vector4.getCPtr(v0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2Invert(Vector2 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Invert(Vector2.getCPtr(v0));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Invert(Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Invert(Vector3.getCPtr(v0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Invert(SWIGTYPE_p_Vector4 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Invert(SWIGTYPE_p_Vector4.getCPtr(v0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2Normalize(Vector2 vResult, Vector2 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Normalize__SWIG_0(Vector2.getCPtr(vResult), Vector2.getCPtr(v0));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2Normalize(Vector2 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Normalize__SWIG_1(Vector2.getCPtr(v0));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Normalize(Vector3 vResult, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Normalize__SWIG_0(Vector3.getCPtr(vResult), Vector3.getCPtr(v0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Normalize(Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Normalize__SWIG_1(Vector3.getCPtr(v0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Normalize(SWIGTYPE_p_Vector4 vResult, SWIGTYPE_p_Vector4 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Normalize__SWIG_0(SWIGTYPE_p_Vector4.getCPtr(vResult), SWIGTYPE_p_Vector4.getCPtr(v0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Normalize(SWIGTYPE_p_Vector4 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Normalize__SWIG_1(SWIGTYPE_p_Vector4.getCPtr(v0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec3Transform(SWIGTYPE_p_Vector4 vResult, Vector3 v0, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Transform(SWIGTYPE_p_Vector4.getCPtr(vResult), Vector3.getCPtr(v0), Matrix.getCPtr(m0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3TransformCoord(Vector3 vResult, Vector3 v0, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3TransformCoord(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Matrix.getCPtr(m0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3TransformNormal(Vector3 vResult, Vector3 v0, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3TransformNormal(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Matrix.getCPtr(m0));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Vector4 Vec4Transform(SWIGTYPE_p_Vector4 vResult, SWIGTYPE_p_Vector4 v0, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec4Transform(SWIGTYPE_p_Vector4.getCPtr(vResult), SWIGTYPE_p_Vector4.getCPtr(v0), Matrix.getCPtr(m0));
    SWIGTYPE_p_Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Vector4(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2Lerp(Vector2 vResult, Vector2 v0, Vector2 v1, float f) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2Lerp(Vector2.getCPtr(vResult), Vector2.getCPtr(v0), Vector2.getCPtr(v1), f);
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Lerp(Vector3 vResult, Vector3 v0, Vector3 v1, float f) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Lerp(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Vector3.getCPtr(v1), f);
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Color ClrLerp(Color cResult, Color c0, Color c1, float f) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrLerp__SWIG_0(Color.getCPtr(cResult), Color.getCPtr(c0), Color.getCPtr(c1), f);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Color3 ClrLerp(SWIGTYPE_p_Color3 cResult, SWIGTYPE_p_Color3 c0, SWIGTYPE_p_Color3 c1, float f) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrLerp__SWIG_1(SWIGTYPE_p_Color3.getCPtr(cResult), SWIGTYPE_p_Color3.getCPtr(c0), SWIGTYPE_p_Color3.getCPtr(c1), f);
    SWIGTYPE_p_Color3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Color3(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2BaryCentric(Vector2 vResult, Vector2 v0, Vector2 v1, Vector2 v2, Vector2 uv) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2BaryCentric(Vector2.getCPtr(vResult), Vector2.getCPtr(v0), Vector2.getCPtr(v1), Vector2.getCPtr(v2), Vector2.getCPtr(uv));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3BaryCentric(Vector3 vResult, Vector3 v0, Vector3 v1, Vector3 v2, Vector2 uv) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3BaryCentric(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Vector3.getCPtr(v1), Vector3.getCPtr(v2), Vector2.getCPtr(uv));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector2 Vec2InvBaryCentric(Vector2 vResult, Vector2 v0, Vector2 v1, Vector2 v2, Vector2 uv) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec2InvBaryCentric(Vector2.getCPtr(vResult), Vector2.getCPtr(v0), Vector2.getCPtr(v1), Vector2.getCPtr(v2), Vector2.getCPtr(uv));
    Vector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector2(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Min(Vector3 vResult, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Min(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Max(Vector3 vResult, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Max(Vector3.getCPtr(vResult), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionIdentity(Quaternion qResult) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionIdentity(Quaternion.getCPtr(qResult));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionMultiply(Quaternion qResult, Quaternion q0, Quaternion q1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionMultiply__SWIG_0(Quaternion.getCPtr(qResult), Quaternion.getCPtr(q0), Quaternion.getCPtr(q1));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionMultiply(Quaternion qResult, Quaternion q1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionMultiply__SWIG_1(Quaternion.getCPtr(qResult), Quaternion.getCPtr(q1));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionInverse(Quaternion qResult, Quaternion q0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionInverse(Quaternion.getCPtr(qResult), Quaternion.getCPtr(q0));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionInvert(Quaternion q0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionInvert(Quaternion.getCPtr(q0));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionNormalize(Quaternion qResult, Quaternion q0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionNormalize__SWIG_0(Quaternion.getCPtr(qResult), Quaternion.getCPtr(q0));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionNormalize(Quaternion q0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionNormalize__SWIG_1(Quaternion.getCPtr(q0));
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionRotationX(Quaternion qResult, float pitch) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionRotationX(Quaternion.getCPtr(qResult), pitch);
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionRotationY(Quaternion qResult, float yaw) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionRotationY(Quaternion.getCPtr(qResult), yaw);
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionRotationZ(Quaternion qResult, float roll) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionRotationZ(Quaternion.getCPtr(qResult), roll);
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static Quaternion QuaternionRotationAxis(Quaternion qResult, Vector3 axis, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.QuaternionRotationAxis(Quaternion.getCPtr(qResult), Vector3.getCPtr(axis), angle);
    Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
    return ret;
  }

  public static void QuaternionToAxisAngle(Quaternion q0, Vector3 axis, SWIGTYPE_p_float angle) {
    ISMathPINVOKE.QuaternionToAxisAngle(Quaternion.getCPtr(q0), Vector3.getCPtr(axis), SWIGTYPE_p_float.getCPtr(angle));
  }

  public static SWIGTYPE_p_Plane PlaneFromPointNormal(SWIGTYPE_p_Plane pResult, Vector3 vPt, Vector3 vNml) {
    global::System.IntPtr cPtr = ISMathPINVOKE.PlaneFromPointNormal(SWIGTYPE_p_Plane.getCPtr(pResult), Vector3.getCPtr(vPt), Vector3.getCPtr(vNml));
    SWIGTYPE_p_Plane ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Plane(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Plane PlaneNormalize(SWIGTYPE_p_Plane pResult, SWIGTYPE_p_Plane p0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.PlaneNormalize__SWIG_0(SWIGTYPE_p_Plane.getCPtr(pResult), SWIGTYPE_p_Plane.getCPtr(p0));
    SWIGTYPE_p_Plane ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Plane(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Plane PlaneNormalize(SWIGTYPE_p_Plane pResult) {
    global::System.IntPtr cPtr = ISMathPINVOKE.PlaneNormalize__SWIG_1(SWIGTYPE_p_Plane.getCPtr(pResult));
    SWIGTYPE_p_Plane ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Plane(cPtr, false);
    return ret;
  }

  public static float PlaneDotCoord(SWIGTYPE_p_Plane p0, Vector3 v0) {
    float ret = ISMathPINVOKE.PlaneDotCoord(SWIGTYPE_p_Plane.getCPtr(p0), Vector3.getCPtr(v0));
    return ret;
  }

  public static Vector3 PlaneIntersectLine(Vector3 vResult, SWIGTYPE_p_Plane p0, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.PlaneIntersectLine(Vector3.getCPtr(vResult), SWIGTYPE_p_Plane.getCPtr(p0), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Matrix MatrixIdentity(Matrix mResult) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixIdentity(Matrix.getCPtr(mResult));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixTranslation(Matrix mResult, float x, float y, float z) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixTranslation__SWIG_0(Matrix.getCPtr(mResult), x, y, z);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixTranslation(Matrix mResult, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixTranslation__SWIG_1(Matrix.getCPtr(mResult), Vector3.getCPtr(v0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixTranslate(Matrix mResult, Matrix m0, float x, float y, float z) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixTranslate__SWIG_0(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), x, y, z);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixTranslate(Matrix mResult, Matrix m0, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixTranslate__SWIG_1(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), Vector3.getCPtr(v0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixScaling(Matrix mResult, float x, float y, float z) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixScaling__SWIG_0(Matrix.getCPtr(mResult), x, y, z);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixScaling(Matrix mResult, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixScaling__SWIG_1(Matrix.getCPtr(mResult), Vector3.getCPtr(v0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixScale(Matrix mResult, Matrix m0, float x, float y, float z) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixScale__SWIG_0(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), x, y, z);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixScale(Matrix mResult, Matrix m0, Vector3 v0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixScale__SWIG_1(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), Vector3.getCPtr(v0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixTranspose(Matrix mResult, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixTranspose(Matrix.getCPtr(mResult), Matrix.getCPtr(m0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixInverseTranspose(Matrix mResult, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixInverseTranspose(Matrix.getCPtr(mResult), Matrix.getCPtr(m0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static float MatrixDeterminant(Matrix m0) {
    float ret = ISMathPINVOKE.MatrixDeterminant(Matrix.getCPtr(m0));
    return ret;
  }

  public static Matrix MatrixInverse(Matrix mResult, Matrix m0) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixInverse(Matrix.getCPtr(mResult), Matrix.getCPtr(m0));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixPerspectiveLH(Matrix mResult, float width, float height, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixPerspectiveLH(Matrix.getCPtr(mResult), width, height, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixPerspectiveRH(Matrix mResult, float width, float height, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixPerspectiveRH(Matrix.getCPtr(mResult), width, height, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixPerspectiveFovLH(Matrix mResult, float fovy, float aspect, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixPerspectiveFovLH(Matrix.getCPtr(mResult), fovy, aspect, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixPerspectiveFovRH(Matrix mResult, float fovy, float aspect, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixPerspectiveFovRH(Matrix.getCPtr(mResult), fovy, aspect, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixOrthographicLH(Matrix mResult, float width, float height, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixOrthographicLH(Matrix.getCPtr(mResult), width, height, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixOrthographicRH(Matrix mResult, float width, float height, float zn, float zf) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixOrthographicRH(Matrix.getCPtr(mResult), width, height, zn, zf);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotationX(Matrix mResult, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotationX(Matrix.getCPtr(mResult), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotateX(Matrix mResult, Matrix m0, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotateX(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotationY(Matrix mResult, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotationY(Matrix.getCPtr(mResult), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotateY(Matrix mResult, Matrix m0, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotateY(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotationZ(Matrix mResult, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotationZ(Matrix.getCPtr(mResult), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotateZ(Matrix mResult, Matrix m0, float angle) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotateZ(Matrix.getCPtr(mResult), Matrix.getCPtr(m0), angle);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotationYawPitchRoll(Matrix mResult, float yaw, float pitch, float roll) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotationYawPitchRoll(Matrix.getCPtr(mResult), yaw, pitch, roll);
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixRotationQuaternion(Matrix mResult, Quaternion qrot) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixRotationQuaternion(Matrix.getCPtr(mResult), Quaternion.getCPtr(qrot));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixLookAtLH(Matrix mResult, Vector3 pos, Vector3 target, Vector3 up) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixLookAtLH(Matrix.getCPtr(mResult), Vector3.getCPtr(pos), Vector3.getCPtr(target), Vector3.getCPtr(up));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixLookAtRH(Matrix mResult, Vector3 pos, Vector3 target, Vector3 up) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixLookAtRH(Matrix.getCPtr(mResult), Vector3.getCPtr(pos), Vector3.getCPtr(target), Vector3.getCPtr(up));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixInvLookAtLH(Matrix mResult, Vector3 pos, Vector3 target, Vector3 up) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixInvLookAtLH(Matrix.getCPtr(mResult), Vector3.getCPtr(pos), Vector3.getCPtr(target), Vector3.getCPtr(up));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static Matrix MatrixInvLookAtRH(Matrix mResult, Vector3 pos, Vector3 target, Vector3 up) {
    global::System.IntPtr cPtr = ISMathPINVOKE.MatrixInvLookAtRH(Matrix.getCPtr(mResult), Vector3.getCPtr(pos), Vector3.getCPtr(target), Vector3.getCPtr(up));
    Matrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix(cPtr, false);
    return ret;
  }

  public static bool RayIntersectsBox(Vector3 raypos, Vector3 raydir, Vector3 boxmin, Vector3 boxmax) {
    bool ret = ISMathPINVOKE.RayIntersectsBox(Vector3.getCPtr(raypos), Vector3.getCPtr(raydir), Vector3.getCPtr(boxmin), Vector3.getCPtr(boxmax));
    return ret;
  }

  public static Vector3 Vec3Add(Vector3 vout, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Add(Vector3.getCPtr(vout), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Sub(Vector3 vout, Vector3 v0, Vector3 v1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Sub(Vector3.getCPtr(vout), Vector3.getCPtr(v0), Vector3.getCPtr(v1));
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3Scale(Vector3 vout, Vector3 vin, float scale) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3Scale(Vector3.getCPtr(vout), Vector3.getCPtr(vin), scale);
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Vector3 Vec3AddScaled(Vector3 vout, Vector3 v0, Vector3 v1, float v1scale) {
    global::System.IntPtr cPtr = ISMathPINVOKE.Vec3AddScaled(Vector3.getCPtr(vout), Vector3.getCPtr(v0), Vector3.getCPtr(v1), v1scale);
    Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
    return ret;
  }

  public static Color ClrAdd(Color cout, Color c0, Color c1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrAdd(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1));
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrSub(Color cout, Color c0, Color c1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrSub(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1));
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrMul(Color cout, Color c0, Color c1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrMul(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1));
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrScale(Color cout, Color cin, float scale) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrScale(Color.getCPtr(cout), Color.getCPtr(cin), scale);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrAddScaled(Color cout, Color c0, Color c1, float c1scale) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrAddScaled__SWIG_0(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1), c1scale);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrAddScaled(Color cout, Color c0, Color c1, Color c1scale0, float c1scale1) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrAddScaled__SWIG_1(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1), Color.getCPtr(c1scale0), c1scale1);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

  public static Color ClrAddScaled(Color cout, Color c0, Color c1, Color c1scale0, Color c1scale1, float c1scale2) {
    global::System.IntPtr cPtr = ISMathPINVOKE.ClrAddScaled__SWIG_2(Color.getCPtr(cout), Color.getCPtr(c0), Color.getCPtr(c1), Color.getCPtr(c1scale0), Color.getCPtr(c1scale1), c1scale2);
    Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
    return ret;
  }

}
