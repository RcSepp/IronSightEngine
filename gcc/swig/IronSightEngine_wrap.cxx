/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ISMath(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ISMath(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ISMath(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <ISEngine.h>


#include <ISMath.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_Result_Details(void * jarg1) {
  Result::Details *arg1 = (Result::Details *) 0 ;
  
  arg1 = (Result::Details *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_details_set(void * jarg1, void * jarg2) {
  Result *arg1 = (Result *) 0 ;
  Result::Details *arg2 = (Result::Details *) 0 ;
  
  arg1 = (Result *)jarg1; 
  arg2 = (Result::Details *)jarg2; 
  if (arg1) (arg1)->details = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_details_get(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  Result::Details *result = 0 ;
  
  arg1 = (Result *)jarg1; 
  result = (Result::Details *) ((arg1)->details);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_refcounter_set(void * jarg1, void * jarg2) {
  Result *arg1 = (Result *) 0 ;
  UINT *arg2 = (UINT *) 0 ;
  
  arg1 = (Result *)jarg1; 
  arg2 = (UINT *)jarg2; 
  if (arg1) (arg1)->refcounter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_refcounter_get(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  UINT *result = 0 ;
  
  arg1 = (Result *)jarg1; 
  result = (UINT *) ((arg1)->refcounter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_0() {
  void * jresult ;
  Result *result = 0 ;
  
  result = (Result *)new Result();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_1(void * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  Result *result = 0 ;
  
  arg1 = new String((char*)jarg1); 
  result = (Result *)new Result(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_2(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  String *arg1 = 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  LPCTSTR arg3 = (LPCTSTR) 0 ;
  int arg4 ;
  Result *result = 0 ;
  
  arg1 = new String((char*)jarg1); 
  arg2 = (LPCTSTR)jarg2; 
  arg3 = (LPCTSTR)jarg3; 
  arg4 = (int)jarg4; 
  result = (Result *)new Result(*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Result(void * jarg1) {
  Result *arg1 = (Result *) 0 ;
  
  arg1 = (Result *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  String arg1 ;
  String arg2 ;
  String arg3 ;
  int arg4 ;
  
  arg1 = String((char*)jarg1); 
  arg2 = String((char*)jarg2); 
  arg3 = String((char*)jarg3); 
  arg4 = (int)jarg4; 
  Result::PrintLogMessage(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_1(void * jarg1) {
  String arg1 ;
  
  arg1 = String((char*)jarg1); 
  Result::PrintLogMessage(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Result_PrintLogMessage__SWIG_2(void * jarg1) {
  Result::Details *arg1 = (Result::Details *) 0 ;
  
  arg1 = (Result::Details *)jarg1; 
  Result::PrintLogMessage((Result::Details const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Result__SWIG_3(void * jarg1) {
  void * jresult ;
  Result *arg1 = 0 ;
  Result *result = 0 ;
  
  arg1 = (Result *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Result const & type is null", 0);
    return 0;
  } 
  result = (Result *)new Result((Result const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_GetLastResult__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  bool arg2 ;
  String result;
  
  arg1 = (Result *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((Result const *)arg1)->GetLastResult(arg2);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Result_GetLastResult__SWIG_1(void * jarg1) {
  void * jresult ;
  Result *arg1 = (Result *) 0 ;
  String result;
  
  arg1 = (Result *)jarg1; 
  result = ((Result const *)arg1)->GetLastResult();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PtrWrapper_ptr_set(void * jarg1, void * jarg2) {
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PtrWrapper_ptr_get(void * jarg1) {
  void * jresult ;
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  void *result = 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  result = (void *) ((arg1)->ptr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PtrWrapper(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  PtrWrapper *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (PtrWrapper *)new PtrWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PtrWrapper(void * jarg1) {
  PtrWrapper *arg1 = (PtrWrapper *) 0 ;
  
  arg1 = (PtrWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnginePtr__SWIG_0() {
  void * jresult ;
  SyncedPtr< Engine > *result = 0 ;
  
  result = (SyncedPtr< Engine > *)new SyncedPtr< Engine >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnginePtr__SWIG_1(void * jarg1) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  SyncedPtr< Engine > *result = 0 ;
  
  arg1 = (Engine *)jarg1; 
  result = (SyncedPtr< Engine > *)new SyncedPtr< Engine >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnginePtr(void * jarg1) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Engine *result = 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (Engine *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_EnginePtr_GetHInstance(void * jarg1) {
  void* jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  HINSTANCE result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (*arg1)->GetHInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_FindDLL(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  String *arg2 = 0 ;
  LPTSTR *arg3 = (LPTSTR *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  arg3 = (LPTSTR *)jarg3; 
  result = (bool)(*arg1)->FindDLL((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_GetConsolePtr(void * jarg1, void * jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  SyncedPtr< Console > *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (SyncedPtr< Console > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (*arg1)->GetConsolePtr(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_Run(void * jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  INITFUNC arg2 ;
  INITFUNC arg3 ;
  CYCLICFUNC arg4 ;
  QUITFUNC arg5 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (INITFUNC)jarg2; 
  arg3 = (INITFUNC)jarg3; 
  arg4 = (CYCLICFUNC)jarg4; 
  arg5 = (QUITFUNC)jarg5; 
  result = (*arg1)->Run(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_ChangeCyclicFunc(void * jarg1, void* jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  CYCLICFUNC arg2 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (CYCLICFUNC)jarg2; 
  (*arg1)->ChangeCyclicFunc(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_Work(void * jarg1) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (bool)(*arg1)->Work();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnginePtr_Wait(void * jarg1) {
  unsigned int jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  bool result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  result = (bool)(*arg1)->Wait();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_WakeUp(void * jarg1) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  (*arg1)->WakeUp();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_CreateTimer(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  TIMERELAPSED_CALLBACK arg2 ;
  UINT arg3 ;
  bool arg4 ;
  LPVOID arg5 = (LPVOID) 0 ;
  Timer **arg6 = (Timer **) 0 ;
  TIMERELAPSED_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  argp2 = (TIMERELAPSED_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TIMERELAPSED_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UINT)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (LPVOID)jarg5; 
  arg6 = (Timer **)jarg6; 
  result = (*arg1)->CreateTimer(arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnginePtr_ResetTimer(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (Timer *)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (*arg1)->ResetTimer(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnginePtr_RemoveTimer(void * jarg1, void * jarg2) {
  SyncedPtr< Engine > *arg1 = (SyncedPtr< Engine > *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  arg1 = (SyncedPtr< Engine > *)jarg1; 
  arg2 = (Timer *)jarg2; 
  (*arg1)->RemoveTimer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Direct3D__SWIG_0() {
  void * jresult ;
  SyncedPtr< IDirect3D > *result = 0 ;
  
  result = (SyncedPtr< IDirect3D > *)new SyncedPtr< IDirect3D >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Direct3D__SWIG_1(void * jarg1) {
  void * jresult ;
  IDirect3D *arg1 = (IDirect3D *) 0 ;
  SyncedPtr< IDirect3D > *result = 0 ;
  
  arg1 = (IDirect3D *)jarg1; 
  result = (SyncedPtr< IDirect3D > *)new SyncedPtr< IDirect3D >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Direct3D(void * jarg1) {
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Direct3D___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IDirect3D > *arg1 = (SyncedPtr< IDirect3D > *) 0 ;
  IDirect3D *result = 0 ;
  
  arg1 = (SyncedPtr< IDirect3D > *)jarg1; 
  result = (IDirect3D *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OpenGL__SWIG_0() {
  void * jresult ;
  SyncedPtr< IOpenGL > *result = 0 ;
  
  result = (SyncedPtr< IOpenGL > *)new SyncedPtr< IOpenGL >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OpenGL__SWIG_1(void * jarg1) {
  void * jresult ;
  IOpenGL *arg1 = (IOpenGL *) 0 ;
  SyncedPtr< IOpenGL > *result = 0 ;
  
  arg1 = (IOpenGL *)jarg1; 
  result = (SyncedPtr< IOpenGL > *)new SyncedPtr< IOpenGL >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OpenGL(void * jarg1) {
  SyncedPtr< IOpenGL > *arg1 = (SyncedPtr< IOpenGL > *) 0 ;
  
  arg1 = (SyncedPtr< IOpenGL > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenGL___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IOpenGL > *arg1 = (SyncedPtr< IOpenGL > *) 0 ;
  IOpenGL *result = 0 ;
  
  arg1 = (SyncedPtr< IOpenGL > *)jarg1; 
  result = (IOpenGL *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Havok__SWIG_0() {
  void * jresult ;
  SyncedPtr< IHavok > *result = 0 ;
  
  result = (SyncedPtr< IHavok > *)new SyncedPtr< IHavok >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Havok__SWIG_1(void * jarg1) {
  void * jresult ;
  IHavok *arg1 = (IHavok *) 0 ;
  SyncedPtr< IHavok > *result = 0 ;
  
  arg1 = (IHavok *)jarg1; 
  result = (SyncedPtr< IHavok > *)new SyncedPtr< IHavok >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Havok(void * jarg1) {
  SyncedPtr< IHavok > *arg1 = (SyncedPtr< IHavok > *) 0 ;
  
  arg1 = (SyncedPtr< IHavok > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Havok___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IHavok > *arg1 = (SyncedPtr< IHavok > *) 0 ;
  IHavok *result = 0 ;
  
  arg1 = (SyncedPtr< IHavok > *)jarg1; 
  result = (IHavok *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuiFactory__SWIG_0() {
  void * jresult ;
  SyncedPtr< IGuiFactory > *result = 0 ;
  
  result = (SyncedPtr< IGuiFactory > *)new SyncedPtr< IGuiFactory >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuiFactory__SWIG_1(void * jarg1) {
  void * jresult ;
  IGuiFactory *arg1 = (IGuiFactory *) 0 ;
  SyncedPtr< IGuiFactory > *result = 0 ;
  
  arg1 = (IGuiFactory *)jarg1; 
  result = (SyncedPtr< IGuiFactory > *)new SyncedPtr< IGuiFactory >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GuiFactory(void * jarg1) {
  SyncedPtr< IGuiFactory > *arg1 = (SyncedPtr< IGuiFactory > *) 0 ;
  
  arg1 = (SyncedPtr< IGuiFactory > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GuiFactory___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IGuiFactory > *arg1 = (SyncedPtr< IGuiFactory > *) 0 ;
  IGuiFactory *result = 0 ;
  
  arg1 = (SyncedPtr< IGuiFactory > *)jarg1; 
  result = (IGuiFactory *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Forms__SWIG_0() {
  void * jresult ;
  SyncedPtr< IForms > *result = 0 ;
  
  result = (SyncedPtr< IForms > *)new SyncedPtr< IForms >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Forms__SWIG_1(void * jarg1) {
  void * jresult ;
  IForms *arg1 = (IForms *) 0 ;
  SyncedPtr< IForms > *result = 0 ;
  
  arg1 = (IForms *)jarg1; 
  result = (SyncedPtr< IForms > *)new SyncedPtr< IForms >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Forms(void * jarg1) {
  SyncedPtr< IForms > *arg1 = (SyncedPtr< IForms > *) 0 ;
  
  arg1 = (SyncedPtr< IForms > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Forms___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IForms > *arg1 = (SyncedPtr< IForms > *) 0 ;
  IForms *result = 0 ;
  
  arg1 = (SyncedPtr< IForms > *)jarg1; 
  result = (IForms *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectIpt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IDirectIpt > *result = 0 ;
  
  result = (SyncedPtr< IDirectIpt > *)new SyncedPtr< IDirectIpt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectIpt__SWIG_1(void * jarg1) {
  void * jresult ;
  IDirectIpt *arg1 = (IDirectIpt *) 0 ;
  SyncedPtr< IDirectIpt > *result = 0 ;
  
  arg1 = (IDirectIpt *)jarg1; 
  result = (SyncedPtr< IDirectIpt > *)new SyncedPtr< IDirectIpt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectIpt(void * jarg1) {
  SyncedPtr< IDirectIpt > *arg1 = (SyncedPtr< IDirectIpt > *) 0 ;
  
  arg1 = (SyncedPtr< IDirectIpt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectIpt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IDirectIpt > *arg1 = (SyncedPtr< IDirectIpt > *) 0 ;
  IDirectIpt *result = 0 ;
  
  arg1 = (SyncedPtr< IDirectIpt > *)jarg1; 
  result = (IDirectIpt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinIpt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinIpt > *result = 0 ;
  
  result = (SyncedPtr< IWinIpt > *)new SyncedPtr< IWinIpt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinIpt__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinIpt *arg1 = (IWinIpt *) 0 ;
  SyncedPtr< IWinIpt > *result = 0 ;
  
  arg1 = (IWinIpt *)jarg1; 
  result = (SyncedPtr< IWinIpt > *)new SyncedPtr< IWinIpt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinIpt(void * jarg1) {
  SyncedPtr< IWinIpt > *arg1 = (SyncedPtr< IWinIpt > *) 0 ;
  
  arg1 = (SyncedPtr< IWinIpt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinIpt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinIpt > *arg1 = (SyncedPtr< IWinIpt > *) 0 ;
  IWinIpt *result = 0 ;
  
  arg1 = (SyncedPtr< IWinIpt > *)jarg1; 
  result = (IWinIpt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FFmpeg__SWIG_0() {
  void * jresult ;
  SyncedPtr< IFFmpeg > *result = 0 ;
  
  result = (SyncedPtr< IFFmpeg > *)new SyncedPtr< IFFmpeg >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FFmpeg__SWIG_1(void * jarg1) {
  void * jresult ;
  IFFmpeg *arg1 = (IFFmpeg *) 0 ;
  SyncedPtr< IFFmpeg > *result = 0 ;
  
  arg1 = (IFFmpeg *)jarg1; 
  result = (SyncedPtr< IFFmpeg > *)new SyncedPtr< IFFmpeg >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FFmpeg(void * jarg1) {
  SyncedPtr< IFFmpeg > *arg1 = (SyncedPtr< IFFmpeg > *) 0 ;
  
  arg1 = (SyncedPtr< IFFmpeg > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FFmpeg___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IFFmpeg > *arg1 = (SyncedPtr< IFFmpeg > *) 0 ;
  IFFmpeg *result = 0 ;
  
  arg1 = (SyncedPtr< IFFmpeg > *)jarg1; 
  result = (IFFmpeg *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CryptoPP__SWIG_0() {
  void * jresult ;
  SyncedPtr< ICryptoPP > *result = 0 ;
  
  result = (SyncedPtr< ICryptoPP > *)new SyncedPtr< ICryptoPP >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CryptoPP__SWIG_1(void * jarg1) {
  void * jresult ;
  ICryptoPP *arg1 = (ICryptoPP *) 0 ;
  SyncedPtr< ICryptoPP > *result = 0 ;
  
  arg1 = (ICryptoPP *)jarg1; 
  result = (SyncedPtr< ICryptoPP > *)new SyncedPtr< ICryptoPP >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CryptoPP(void * jarg1) {
  SyncedPtr< ICryptoPP > *arg1 = (SyncedPtr< ICryptoPP > *) 0 ;
  
  arg1 = (SyncedPtr< ICryptoPP > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CryptoPP___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< ICryptoPP > *arg1 = (SyncedPtr< ICryptoPP > *) 0 ;
  ICryptoPP *result = 0 ;
  
  arg1 = (SyncedPtr< ICryptoPP > *)jarg1; 
  result = (ICryptoPP *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ID3Lib__SWIG_0() {
  void * jresult ;
  SyncedPtr< IID3Lib > *result = 0 ;
  
  result = (SyncedPtr< IID3Lib > *)new SyncedPtr< IID3Lib >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ID3Lib__SWIG_1(void * jarg1) {
  void * jresult ;
  IID3Lib *arg1 = (IID3Lib *) 0 ;
  SyncedPtr< IID3Lib > *result = 0 ;
  
  arg1 = (IID3Lib *)jarg1; 
  result = (SyncedPtr< IID3Lib > *)new SyncedPtr< IID3Lib >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ID3Lib(void * jarg1) {
  SyncedPtr< IID3Lib > *arg1 = (SyncedPtr< IID3Lib > *) 0 ;
  
  arg1 = (SyncedPtr< IID3Lib > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ID3Lib___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IID3Lib > *arg1 = (SyncedPtr< IID3Lib > *) 0 ;
  IID3Lib *result = 0 ;
  
  arg1 = (SyncedPtr< IID3Lib > *)jarg1; 
  result = (IID3Lib *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinAudio__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinAudio > *result = 0 ;
  
  result = (SyncedPtr< IWinAudio > *)new SyncedPtr< IWinAudio >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinAudio__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinAudio *arg1 = (IWinAudio *) 0 ;
  SyncedPtr< IWinAudio > *result = 0 ;
  
  arg1 = (IWinAudio *)jarg1; 
  result = (SyncedPtr< IWinAudio > *)new SyncedPtr< IWinAudio >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinAudio(void * jarg1) {
  SyncedPtr< IWinAudio > *arg1 = (SyncedPtr< IWinAudio > *) 0 ;
  
  arg1 = (SyncedPtr< IWinAudio > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinAudio___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinAudio > *arg1 = (SyncedPtr< IWinAudio > *) 0 ;
  IWinAudio *result = 0 ;
  
  arg1 = (SyncedPtr< IWinAudio > *)jarg1; 
  result = (IWinAudio *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XAudio2__SWIG_0() {
  void * jresult ;
  SyncedPtr< IXAudio2 > *result = 0 ;
  
  result = (SyncedPtr< IXAudio2 > *)new SyncedPtr< IXAudio2 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XAudio2__SWIG_1(void * jarg1) {
  void * jresult ;
  IXAudio2 *arg1 = (IXAudio2 *) 0 ;
  SyncedPtr< IXAudio2 > *result = 0 ;
  
  arg1 = (IXAudio2 *)jarg1; 
  result = (SyncedPtr< IXAudio2 > *)new SyncedPtr< IXAudio2 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XAudio2(void * jarg1) {
  SyncedPtr< IXAudio2 > *arg1 = (SyncedPtr< IXAudio2 > *) 0 ;
  
  arg1 = (SyncedPtr< IXAudio2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAudio2___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IXAudio2 > *arg1 = (SyncedPtr< IXAudio2 > *) 0 ;
  IXAudio2 *result = 0 ;
  
  arg1 = (SyncedPtr< IXAudio2 > *)jarg1; 
  result = (IXAudio2 *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinMidi__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinMidi > *result = 0 ;
  
  result = (SyncedPtr< IWinMidi > *)new SyncedPtr< IWinMidi >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinMidi__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinMidi *arg1 = (IWinMidi *) 0 ;
  SyncedPtr< IWinMidi > *result = 0 ;
  
  arg1 = (IWinMidi *)jarg1; 
  result = (SyncedPtr< IWinMidi > *)new SyncedPtr< IWinMidi >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinMidi(void * jarg1) {
  SyncedPtr< IWinMidi > *arg1 = (SyncedPtr< IWinMidi > *) 0 ;
  
  arg1 = (SyncedPtr< IWinMidi > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinMidi___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinMidi > *arg1 = (SyncedPtr< IWinMidi > *) 0 ;
  IWinMidi *result = 0 ;
  
  arg1 = (SyncedPtr< IWinMidi > *)jarg1; 
  result = (IWinMidi *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinSock__SWIG_0() {
  void * jresult ;
  SyncedPtr< IWinSock > *result = 0 ;
  
  result = (SyncedPtr< IWinSock > *)new SyncedPtr< IWinSock >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WinSock__SWIG_1(void * jarg1) {
  void * jresult ;
  IWinSock *arg1 = (IWinSock *) 0 ;
  SyncedPtr< IWinSock > *result = 0 ;
  
  arg1 = (IWinSock *)jarg1; 
  result = (SyncedPtr< IWinSock > *)new SyncedPtr< IWinSock >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WinSock(void * jarg1) {
  SyncedPtr< IWinSock > *arg1 = (SyncedPtr< IWinSock > *) 0 ;
  
  arg1 = (SyncedPtr< IWinSock > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WinSock___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IWinSock > *arg1 = (SyncedPtr< IWinSock > *) 0 ;
  IWinSock *result = 0 ;
  
  arg1 = (SyncedPtr< IWinSock > *)jarg1; 
  result = (IWinSock *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncWorkers__SWIG_0() {
  void * jresult ;
  SyncedPtr< IAsyncWorkers > *result = 0 ;
  
  result = (SyncedPtr< IAsyncWorkers > *)new SyncedPtr< IAsyncWorkers >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncWorkers__SWIG_1(void * jarg1) {
  void * jresult ;
  IAsyncWorkers *arg1 = (IAsyncWorkers *) 0 ;
  SyncedPtr< IAsyncWorkers > *result = 0 ;
  
  arg1 = (IAsyncWorkers *)jarg1; 
  result = (SyncedPtr< IAsyncWorkers > *)new SyncedPtr< IAsyncWorkers >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AsyncWorkers(void * jarg1) {
  SyncedPtr< IAsyncWorkers > *arg1 = (SyncedPtr< IAsyncWorkers > *) 0 ;
  
  arg1 = (SyncedPtr< IAsyncWorkers > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AsyncWorkers___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IAsyncWorkers > *arg1 = (SyncedPtr< IAsyncWorkers > *) 0 ;
  IAsyncWorkers *result = 0 ;
  
  arg1 = (SyncedPtr< IAsyncWorkers > *)jarg1; 
  result = (IAsyncWorkers *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SQLite__SWIG_0() {
  void * jresult ;
  SyncedPtr< ISQLite > *result = 0 ;
  
  result = (SyncedPtr< ISQLite > *)new SyncedPtr< ISQLite >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SQLite__SWIG_1(void * jarg1) {
  void * jresult ;
  ISQLite *arg1 = (ISQLite *) 0 ;
  SyncedPtr< ISQLite > *result = 0 ;
  
  arg1 = (ISQLite *)jarg1; 
  result = (SyncedPtr< ISQLite > *)new SyncedPtr< ISQLite >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SQLite(void * jarg1) {
  SyncedPtr< ISQLite > *arg1 = (SyncedPtr< ISQLite > *) 0 ;
  
  arg1 = (SyncedPtr< ISQLite > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SQLite___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< ISQLite > *arg1 = (SyncedPtr< ISQLite > *) 0 ;
  ISQLite *result = 0 ;
  
  arg1 = (SyncedPtr< ISQLite > *)jarg1; 
  result = (ISQLite *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HaruPdf__SWIG_0() {
  void * jresult ;
  SyncedPtr< IHaruPdf > *result = 0 ;
  
  result = (SyncedPtr< IHaruPdf > *)new SyncedPtr< IHaruPdf >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HaruPdf__SWIG_1(void * jarg1) {
  void * jresult ;
  IHaruPdf *arg1 = (IHaruPdf *) 0 ;
  SyncedPtr< IHaruPdf > *result = 0 ;
  
  arg1 = (IHaruPdf *)jarg1; 
  result = (SyncedPtr< IHaruPdf > *)new SyncedPtr< IHaruPdf >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HaruPdf(void * jarg1) {
  SyncedPtr< IHaruPdf > *arg1 = (SyncedPtr< IHaruPdf > *) 0 ;
  
  arg1 = (SyncedPtr< IHaruPdf > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HaruPdf___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IHaruPdf > *arg1 = (SyncedPtr< IHaruPdf > *) 0 ;
  IHaruPdf *result = 0 ;
  
  arg1 = (SyncedPtr< IHaruPdf > *)jarg1; 
  result = (IHaruPdf *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayTracer__SWIG_0() {
  void * jresult ;
  SyncedPtr< IRayTracer > *result = 0 ;
  
  result = (SyncedPtr< IRayTracer > *)new SyncedPtr< IRayTracer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayTracer__SWIG_1(void * jarg1) {
  void * jresult ;
  IRayTracer *arg1 = (IRayTracer *) 0 ;
  SyncedPtr< IRayTracer > *result = 0 ;
  
  arg1 = (IRayTracer *)jarg1; 
  result = (SyncedPtr< IRayTracer > *)new SyncedPtr< IRayTracer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayTracer(void * jarg1) {
  SyncedPtr< IRayTracer > *arg1 = (SyncedPtr< IRayTracer > *) 0 ;
  
  arg1 = (SyncedPtr< IRayTracer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayTracer___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IRayTracer > *arg1 = (SyncedPtr< IRayTracer > *) 0 ;
  IRayTracer *result = 0 ;
  
  arg1 = (SyncedPtr< IRayTracer > *)jarg1; 
  result = (IRayTracer *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pbrt__SWIG_0() {
  void * jresult ;
  SyncedPtr< IPbrt > *result = 0 ;
  
  result = (SyncedPtr< IPbrt > *)new SyncedPtr< IPbrt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pbrt__SWIG_1(void * jarg1) {
  void * jresult ;
  IPbrt *arg1 = (IPbrt *) 0 ;
  SyncedPtr< IPbrt > *result = 0 ;
  
  arg1 = (IPbrt *)jarg1; 
  result = (SyncedPtr< IPbrt > *)new SyncedPtr< IPbrt >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pbrt(void * jarg1) {
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pbrt___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IPbrt > *arg1 = (SyncedPtr< IPbrt > *) 0 ;
  IPbrt *result = 0 ;
  
  arg1 = (SyncedPtr< IPbrt > *)jarg1; 
  result = (IPbrt *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PythonScriptEngine__SWIG_0() {
  void * jresult ;
  SyncedPtr< IPythonScriptEngine > *result = 0 ;
  
  result = (SyncedPtr< IPythonScriptEngine > *)new SyncedPtr< IPythonScriptEngine >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PythonScriptEngine__SWIG_1(void * jarg1) {
  void * jresult ;
  IPythonScriptEngine *arg1 = (IPythonScriptEngine *) 0 ;
  SyncedPtr< IPythonScriptEngine > *result = 0 ;
  
  arg1 = (IPythonScriptEngine *)jarg1; 
  result = (SyncedPtr< IPythonScriptEngine > *)new SyncedPtr< IPythonScriptEngine >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PythonScriptEngine(void * jarg1) {
  SyncedPtr< IPythonScriptEngine > *arg1 = (SyncedPtr< IPythonScriptEngine > *) 0 ;
  
  arg1 = (SyncedPtr< IPythonScriptEngine > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PythonScriptEngine___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< IPythonScriptEngine > *arg1 = (SyncedPtr< IPythonScriptEngine > *) 0 ;
  IPythonScriptEngine *result = 0 ;
  
  arg1 = (SyncedPtr< IPythonScriptEngine > *)jarg1; 
  result = (IPythonScriptEngine *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Console__SWIG_0() {
  void * jresult ;
  SyncedPtr< Console > *result = 0 ;
  
  result = (SyncedPtr< Console > *)new SyncedPtr< Console >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Console__SWIG_1(void * jarg1) {
  void * jresult ;
  Console *arg1 = (Console *) 0 ;
  SyncedPtr< Console > *result = 0 ;
  
  arg1 = (Console *)jarg1; 
  result = (SyncedPtr< Console > *)new SyncedPtr< Console >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Console(void * jarg1) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Console___deref__(void * jarg1) {
  void * jresult ;
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  Console *result = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  result = (Console *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->Print((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Print(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Print__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->Print(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->PrintLine((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->PrintLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintLine__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->PrintLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_0(void * jarg1, void * jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = new String((char*)jarg2); 
  (*arg1)->PrintD3D((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_1(void * jarg1, int jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  int arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->PrintD3D(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_PrintD3D__SWIG_2(void * jarg1, double jarg2) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  double arg2 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->PrintD3D(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Console_Release(void * jarg1) {
  SyncedPtr< Console > *arg1 = (SyncedPtr< Console > *) 0 ;
  
  arg1 = (SyncedPtr< Console > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PointI_x_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PointI_x_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PointI_y_set(void * jarg1, int jarg2) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Point< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PointI_y_get(void * jarg1) {
  int jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  int result;
  
  arg1 = (Point< int > *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PointI__SWIG_0() {
  void * jresult ;
  Point< int > *result = 0 ;
  
  result = (Point< int > *)new Point< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PointI__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Point< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Point< int > *)new Point< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointI_ToString(void * jarg1) {
  void * jresult ;
  Point< int > *arg1 = (Point< int > *) 0 ;
  String result;
  
  arg1 = (Point< int > *)jarg1; 
  result = ((Point< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PointI(void * jarg1) {
  Point< int > *arg1 = (Point< int > *) 0 ;
  
  arg1 = (Point< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeI_width_set(void * jarg1, int jarg2) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Size< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SizeI_width_get(void * jarg1) {
  int jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  int result;
  
  arg1 = (Size< int > *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeI_height_set(void * jarg1, int jarg2) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Size< int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SizeI_height_get(void * jarg1) {
  int jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  int result;
  
  arg1 = (Size< int > *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeI__SWIG_0() {
  void * jresult ;
  Size< int > *result = 0 ;
  
  result = (Size< int > *)new Size< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeI__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Size< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Size< int > *)new Size< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SizeI_ToString(void * jarg1) {
  void * jresult ;
  Size< int > *arg1 = (Size< int > *) 0 ;
  String result;
  
  arg1 = (Size< int > *)jarg1; 
  result = ((Size< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeI(void * jarg1) {
  Size< int > *arg1 = (Size< int > *) 0 ;
  
  arg1 = (Size< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeU_width_set(void * jarg1, unsigned int jarg2) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SizeU_width_get(void * jarg1) {
  unsigned int jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeU_height_set(void * jarg1, unsigned int jarg2) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SizeU_height_get(void * jarg1) {
  unsigned int jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  unsigned int result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = (unsigned int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeU__SWIG_0() {
  void * jresult ;
  Size< UINT > *result = 0 ;
  
  result = (Size< UINT > *)new Size< UINT >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeU__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Size< UINT > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Size< UINT > *)new Size< UINT >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SizeU_ToString(void * jarg1) {
  void * jresult ;
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  String result;
  
  arg1 = (Size< UINT > *)jarg1; 
  result = ((Size< UINT > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeU(void * jarg1) {
  Size< UINT > *arg1 = (Size< UINT > *) 0 ;
  
  arg1 = (Size< UINT > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_location_set(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = (Point< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2; 
  if (arg1) (arg1)->location = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_location_get(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (Point< int > *)& ((arg1)->location);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_size_set(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *arg2 = (Size< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Size< int > *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_size_get(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (Size< int > *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_0() {
  void * jresult ;
  Rect< int > *result = 0 ;
  
  result = (Rect< int > *)new Rect< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Rect< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (Rect< int > *)new Rect< int >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_2(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = 0 ;
  Rect< int > *result = 0 ;
  
  arg1 = (Rect< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (Rect< int > *)new Rect< int >((Rect< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Point< int > *arg1 = 0 ;
  Size< int > *arg2 = 0 ;
  Rect< int > *result = 0 ;
  
  arg1 = (Point< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (Size< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return 0;
  } 
  result = (Rect< int > *)new Rect< int >((Point< int > const &)*arg1,(Size< int > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectI__SWIG_5(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Rect< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Rect< int > *)new Rect< int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetX(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetX(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetY(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetY(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetWidth(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetWidth(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_GetHeight(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_SetHeight(void * jarg1, int jarg2) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SetHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_left(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->left();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_top(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->top();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_right(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->right();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RectI_bottom(void * jarg1) {
  int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = (int)((Rect< int > const *)arg1)->bottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Empty() {
  void * jresult ;
  Rect< int > result;
  
  result = Rect< int >::SWIGTEMPLATEDISAMBIGUATOR Empty();
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Offset__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect< int > result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((Rect< int > const *)arg1)->Offset(arg2,arg3);
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_Offset__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = 0 ;
  Rect< int > result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  result = ((Rect< int > const *)arg1)->Offset((Point< int > const &)*arg2);
  jresult = new Rect< int >((const Rect< int > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Contains__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Rect< int > const *)arg1)->Contains(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Point< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Point< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Point< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Rect< int > const *)arg1)->Contains((Point< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectI_Intersects(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Rect< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((Rect< int > const *)arg1)->Intersects((Rect< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectI_ToString(void * jarg1) {
  void * jresult ;
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  String result;
  
  arg1 = (Rect< int > *)jarg1; 
  result = ((Rect< int > const *)arg1)->ToString();
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_Inflate__SWIG_0(void * jarg1, void * jarg2) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  Size< int > *arg2 = 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (Size< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Size< int > const & type is null", 0);
    return ;
  } 
  (arg1)->Inflate((Size< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectI_Inflate__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Rect< int > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Inflate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RectI(void * jarg1) {
  Rect< int > *arg1 = (Rect< int > *) 0 ;
  
  arg1 = (Rect< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine() {
  void * jresult ;
  Engine *result = 0 ;
  
  result = (Engine *)new Engine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Engine(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Engine_GetHInstance(void * jarg1) {
  void* jresult ;
  Engine *arg1 = (Engine *) 0 ;
  HINSTANCE result;
  
  arg1 = (Engine *)jarg1; 
  result = (arg1)->GetHInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_FindDLL(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  LPTSTR *arg2 = (LPTSTR *) 0 ;
  bool result;
  
  arg1 = new String((char*)jarg1); 
  arg2 = (LPTSTR *)jarg2; 
  result = (bool)Engine::FindDLL((String const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_GetConsolePtr(void * jarg1, void * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  SyncedPtr< Console > *arg2 = 0 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (SyncedPtr< Console > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SyncedPtr< Console > & type is null", 0);
    return ;
  } 
  (arg1)->GetConsolePtr(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_Run(void * jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  INITFUNC arg2 ;
  INITFUNC arg3 ;
  CYCLICFUNC arg4 ;
  QUITFUNC arg5 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (INITFUNC)jarg2; 
  arg3 = (INITFUNC)jarg3; 
  arg4 = (CYCLICFUNC)jarg4; 
  arg5 = (QUITFUNC)jarg5; 
  result = (arg1)->Run(arg2,arg3,arg4,arg5);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_ChangeCyclicFunc(void * jarg1, void* jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  CYCLICFUNC arg2 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (CYCLICFUNC)jarg2; 
  (arg1)->ChangeCyclicFunc(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_Work(void * jarg1) {
  unsigned int jresult ;
  Engine *arg1 = (Engine *) 0 ;
  bool result;
  
  arg1 = (Engine *)jarg1; 
  result = (bool)(arg1)->Work();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine_Wait(void * jarg1) {
  unsigned int jresult ;
  Engine *arg1 = (Engine *) 0 ;
  bool result;
  
  arg1 = (Engine *)jarg1; 
  result = (bool)(arg1)->Wait();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_WakeUp(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  (arg1)->WakeUp();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_CreateTimer(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  TIMERELAPSED_CALLBACK arg2 ;
  UINT arg3 ;
  bool arg4 ;
  LPVOID arg5 = (LPVOID) 0 ;
  Timer **arg6 = (Timer **) 0 ;
  TIMERELAPSED_CALLBACK *argp2 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  argp2 = (TIMERELAPSED_CALLBACK *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TIMERELAPSED_CALLBACK", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UINT)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (LPVOID)jarg5; 
  arg6 = (Timer **)jarg6; 
  result = (arg1)->CreateTimer(arg2,arg3,arg4,arg5,arg6);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine_ResetTimer(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  UINT arg3 ;
  Result result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (Timer *)jarg2; 
  arg3 = (UINT)jarg3; 
  result = (arg1)->ResetTimer(arg2,arg3);
  jresult = new Result((const Result &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine_RemoveTimer(void * jarg1, void * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (Timer *)jarg2; 
  (arg1)->RemoveTimer(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_saturate(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)saturate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2 *)Vec2Set(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector2 *)Vec2Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Set(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector3 *)Vec3Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Vector4 *)Vec4Set(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float *arg2 = (float *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Vector4 *)Vec4Set(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  float *arg2 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrSet(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSet__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  float *arg2 = (float *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Color3 *)ClrSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Quaternion *)QuaternionSet(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionSet__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float *arg2 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (Quaternion *)QuaternionSet(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  result = (Color *)ClrClone(arg1,(Color const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrClone__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  result = (Color3 *)ClrClone(arg1,(Color3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (float)Vec2Dot((Vector2 const *)arg1,(Vector2 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)Vec3Dot((Vector3 const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Dot(void * jarg1, void * jarg2) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (float)Vec4Dot((Vector4 const *)arg1,(Vector4 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Cross(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Cross(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Reflect(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Reflect(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Refract(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Refract(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 arg3 ;
  Vector2 arg4 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  Vector2 *argp3 ;
  Vector2 *argp4 ;
  Vector2 *result = 0 ;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (Vector2 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)GetUV(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2Length((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2Length__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2Length(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3Length((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3Length__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3Length(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4Length((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4Length__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4Length(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float)Vec2LengthSq((Vector2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec2LengthSq__SWIG_1(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)Vec2LengthSq(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float)Vec3LengthSq((Vector3 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec3LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Vec3LengthSq(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_0(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float)Vec4LengthSq((Vector4 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vec4LengthSq__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)Vec4LengthSq(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Inverse(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Inverse(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Inverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Inverse(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Invert(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Invert(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Invert(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Invert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  result = (Vector2 *)Vec2Normalize(arg1,(Vector2 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  result = (Vector2 *)Vec2Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Vector3 *)Vec3Normalize(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  result = (Vector3 *)Vec3Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  result = (Vector4 *)Vec4Normalize(arg1,(Vector4 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  result = (Vector4 *)Vec4Normalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec3Transform(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformCoord(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformCoord(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3TransformNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector3 *)Vec3TransformNormal(arg1,(Vector3 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec4Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  arg3 = (Matrix *)jarg3; 
  result = (Vector4 *)Vec4Transform(arg1,(Vector4 const *)arg2,(Matrix const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  float arg4 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector2 *)Vec2Lerp(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3Lerp(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrLerp(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrLerp__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color3 *arg1 = (Color3 *) 0 ;
  Color3 *arg2 = (Color3 *) 0 ;
  Color3 *arg3 = (Color3 *) 0 ;
  float arg4 ;
  Color3 *result = 0 ;
  
  arg1 = (Color3 *)jarg1; 
  arg2 = (Color3 *)jarg2; 
  arg3 = (Color3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color3 *)ClrLerp(arg1,(Color3 const *)arg2,(Color3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2BaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3BaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector3 *)Vec3BaryCentric(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec2InvBaryCentric(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  Vector2 *arg3 = (Vector2 *) 0 ;
  Vector2 *arg4 = (Vector2 *) 0 ;
  Vector2 *arg5 = (Vector2 *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2; 
  arg3 = (Vector2 *)jarg3; 
  arg4 = (Vector2 *)jarg4; 
  arg5 = (Vector2 *)jarg5; 
  result = (Vector2 *)Vec2InvBaryCentric(arg1,(Vector2 const *)arg2,(Vector2 const *)arg3,(Vector2 const *)arg4,(Vector2 const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Min(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Min(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Max(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Max(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionIdentity(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2,(Quaternion const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionMultiply__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionMultiply(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionInverse(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionInvert(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionInvert(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Quaternion *)QuaternionNormalize(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Quaternion *)QuaternionNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Quaternion *)QuaternionRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuaternionRotationAxis(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Quaternion *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Quaternion *)QuaternionRotationAxis(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuaternionToAxisAngle(void * jarg1, void * jarg2, void * jarg3) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float *)jarg3; 
  QuaternionToAxisAngle((Quaternion const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneFromPointNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Plane *)PlaneFromPointNormal(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Plane *)jarg2; 
  result = (Plane *)PlaneNormalize(arg1,(Plane const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Plane *result = 0 ;
  
  arg1 = (Plane *)jarg1; 
  result = (Plane *)PlaneNormalize(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlaneDotCoord(void * jarg1, void * jarg2) {
  float jresult ;
  Plane *arg1 = (Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Plane *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (float)PlaneDotCoord((Plane const *)arg1,(Vector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneIntersectLine(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Plane *arg2 = (Plane *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Plane *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Vector3 *)PlaneIntersectLine(arg1,(Plane const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixIdentity(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  result = (Matrix *)MatrixIdentity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixTranslation(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslation__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixTranslation(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranslate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixTranslate(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixScaling(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScaling__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  result = (Matrix *)MatrixScaling(arg1,(Vector3 const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixScale__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Matrix *)MatrixScale(arg1,(Matrix const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverseTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverseTranspose(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MatrixDeterminant(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float)MatrixDeterminant((Matrix const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInverse(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  result = (Matrix *)MatrixInverse(arg1,(Matrix const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixPerspectiveFovRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicLH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicLH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthographicRH(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Matrix *)MatrixOrthographicRH(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateX(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateX(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationY(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateY(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateY(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix *)MatrixRotationZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotateZ(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  float arg3 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix *)MatrixRotateZ(arg1,(Matrix const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationYawPitchRoll(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Matrix *)MatrixRotationYawPitchRoll(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationQuaternion(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  result = (Matrix *)MatrixRotationQuaternion(arg1,(Quaternion const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtLH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtLH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixInvLookAtRH(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (Matrix *)MatrixInvLookAtRH(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayIntersectsBox(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  bool result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  result = (bool)RayIntersectsBox((Vector3 const *)arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,(Vector3 const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)new Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2 *)new Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((Vector2 const *)arg1)->operator +((Vector2 const &)*arg2);
  jresult = new Vector2((const Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_x_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_x_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_y_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_y_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_z_set(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_z_get(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_0() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *)new Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)new Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Vector3 *)new Vector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Add(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Add(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Sub(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  result = (Vector3 *)Vec3Sub(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3Scale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector3 *)Vec3Scale(arg1,(Vector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vec3AddScaled(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  float arg4 ;
  Vector3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Vector3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Vector3 *)Vec3AddScaled(arg1,(Vector3 const *)arg2,(Vector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_r_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_r_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_g_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_g_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_b_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_b_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_a_set(void * jarg1, float jarg2) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Color_a_get(void * jarg1) {
  float jresult ;
  Color *arg1 = (Color *) 0 ;
  float result;
  
  arg1 = (Color *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  Color *result = 0 ;
  
  result = (Color *)new Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)new Color(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Color *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Color *)new Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Color *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Color *)new Color((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_4(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Color *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (Color *)new Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  Color *arg1 = (Color *) 0 ;
  
  arg1 = (Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAdd(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrAdd(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrSub(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrSub(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrMul(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  result = (Color *)ClrMul(arg1,(Color const *)arg2,(Color const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrScale(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  float arg3 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (float)jarg3; 
  result = (Color *)ClrScale(arg1,(Color const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  float arg4 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (float)jarg4; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *arg4 = (Color *) 0 ;
  float arg5 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (Color *)jarg4; 
  arg5 = (float)jarg5; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,(Color const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClrAddScaled__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  void * jresult ;
  Color *arg1 = (Color *) 0 ;
  Color *arg2 = (Color *) 0 ;
  Color *arg3 = (Color *) 0 ;
  Color *arg4 = (Color *) 0 ;
  Color *arg5 = (Color *) 0 ;
  float arg6 ;
  Color *result = 0 ;
  
  arg1 = (Color *)jarg1; 
  arg2 = (Color *)jarg2; 
  arg3 = (Color *)jarg3; 
  arg4 = (Color *)jarg4; 
  arg5 = (Color *)jarg5; 
  arg6 = (float)jarg6; 
  result = (Color *)ClrAddScaled(arg1,(Color const *)arg2,(Color const *)arg3,(Color const *)arg4,(Color const *)arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_x_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_x_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_y_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_y_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_z_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_z_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_w_set(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_w_get(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0() {
  void * jresult ;
  Quaternion *result = 0 ;
  
  result = (Quaternion *)new Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Quaternion *)new Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Quaternion *)new Quaternion((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_mul(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & type is null", 0);
    return 0;
  } 
  result = ((Quaternion const *)arg1)->operator *((Quaternion const &)*arg2);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_ComputeAxisWrapper(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Vector3 *)((Quaternion const *)arg1)->ComputeAxisWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_ComputeAngleWrapper(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float)((Quaternion const *)arg1)->ComputeAngleWrapper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__11_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__11_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__12_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__12_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__13_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_13 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__13_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__14_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_14 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__14_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__21_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__21_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__22_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__22_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__23_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_23 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__23_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__24_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_24 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__24_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__31_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_31 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__31_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__32_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_32 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__32_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__33_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_33 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__33_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__34_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_34 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__34_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__41_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_41 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__41_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__42_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_42 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__42_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__43_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_43 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__43_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix__44_set(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_44 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix__44_get(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float) ((arg1)->_44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Matrix *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (Matrix *)new Matrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix__SWIG_1() {
  void * jresult ;
  Matrix *result = 0 ;
  
  result = (Matrix *)new Matrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix(void * jarg1) {
  Matrix *arg1 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

